Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Enum", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Enum.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Enum", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.max", "polars.Expr.arr.min", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.max", "polars.Series.arr.min", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 105, 135, 153, 208, 282, 296, 510, 711, 746, 843, 894, 1070, 1221], "refer": [0, 40, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128, 161, 296, 396, 399, 508, 553, 601, 633, 634, 635, 639, 746, 771, 855, 958, 961, 1090, 1175, 1176, 1177, 1181, 1221], "input": [0, 79, 85, 107, 115, 116, 156, 184, 187, 208, 212, 221, 238, 239, 242, 246, 249, 261, 271, 272, 275, 296, 303, 340, 418, 442, 502, 509, 510, 519, 542, 557, 589, 629, 630, 631, 632, 663, 665, 667, 668, 670, 673, 675, 676, 677, 684, 688, 697, 698, 705, 706, 707, 709, 710, 711, 713, 717, 725, 728, 730, 736, 746, 758, 762, 783, 786, 813, 814, 815, 817, 821, 826, 832, 833, 836, 855, 899, 1000, 1066, 1067, 1070, 1094, 1120, 1221], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 58, 120, 154, 163, 185, 186, 188, 189, 202, 208, 212, 215, 221, 223, 232, 234, 238, 249, 267, 271, 296, 306, 308, 310, 358, 499, 506, 507, 508, 510, 518, 530, 550, 562, 567, 569, 571, 573, 592, 608, 660, 664, 666, 668, 678, 690, 691, 709, 710, 711, 746, 758, 784, 785, 787, 788, 797, 798, 802, 803, 811, 813, 815, 832, 838, 843, 855, 862, 863, 865, 915, 1070, 1088, 1134, 1150, 1209, 1221], "seri": [0, 1, 2, 16, 30, 70, 71, 80, 81, 82, 83, 87, 88, 89, 104, 106, 109, 111, 138, 140, 141, 145, 165, 174, 177, 180, 182, 185, 190, 193, 194, 195, 197, 199, 201, 209, 210, 211, 212, 216, 217, 228, 229, 230, 232, 236, 248, 249, 253, 256, 259, 260, 276, 296, 309, 310, 321, 329, 336, 337, 339, 392, 421, 427, 431, 432, 440, 444, 447, 448, 451, 453, 454, 455, 467, 474, 476, 497, 499, 504, 506, 508, 510, 547, 553, 554, 555, 556, 557, 558, 560, 562, 563, 564, 570, 578, 581, 592, 622, 633, 634, 635, 639, 643, 650, 651, 659, 668, 670, 674, 681, 682, 685, 686, 690, 691, 693, 694, 699, 701, 705, 706, 708, 709, 710, 711, 719, 721, 722, 725, 728, 733, 734, 737, 746, 758, 780, 784, 811, 837, 855, 1213, 1215, 1217, 1220, 1222, 1225, 1226, 1227, 1229], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 79, 80, 81, 82, 83, 85, 86, 87, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 132, 133, 134, 138, 139, 142, 143, 151, 294, 295, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 742, 746, 758, 767, 768, 772, 776, 777, 781, 784, 792, 793, 794, 795, 797, 798, 802, 803, 807, 810, 820, 821, 827, 828, 829, 832, 833, 834, 836, 837, 838, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 879, 881, 915, 916, 954, 996, 1027, 1028, 1037, 1070, 1088, 1148, 1166, 1167, 1190, 1198, 1199, 1209, 1221, 1228, 1229], "lazyfram": [0, 1, 64, 65, 67, 69, 79, 80, 81, 82, 83, 85, 86, 87, 129, 130, 131, 132, 133, 134, 135, 138, 139, 145, 206, 222, 223, 239, 272, 296, 424, 499, 746, 758, 854, 858, 1228, 1229], "express": [0, 13, 58, 59, 60, 85, 86, 142, 145, 147, 156, 170, 172, 174, 184, 187, 208, 219, 223, 233, 238, 239, 242, 246, 261, 271, 272, 275, 282, 296, 303, 305, 306, 307, 308, 309, 312, 313, 314, 315, 316, 317, 320, 321, 326, 329, 331, 332, 333, 340, 343, 344, 345, 346, 357, 358, 359, 361, 364, 365, 366, 367, 368, 369, 370, 372, 374, 376, 377, 378, 380, 382, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 418, 420, 421, 423, 424, 428, 430, 431, 433, 434, 435, 440, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 457, 460, 461, 465, 466, 468, 469, 470, 473, 474, 479, 481, 498, 499, 504, 505, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 521, 523, 525, 527, 529, 530, 531, 532, 533, 534, 537, 538, 539, 541, 542, 546, 547, 548, 549, 550, 552, 556, 557, 558, 560, 576, 577, 578, 580, 582, 584, 585, 587, 589, 592, 593, 595, 596, 598, 600, 601, 602, 603, 604, 606, 607, 608, 616, 617, 622, 623, 624, 625, 637, 646, 647, 650, 652, 653, 656, 657, 659, 660, 662, 663, 664, 665, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 684, 685, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 705, 706, 707, 708, 709, 710, 711, 713, 717, 719, 721, 722, 723, 724, 725, 726, 728, 730, 732, 733, 734, 736, 737, 742, 745, 758, 762, 767, 768, 775, 776, 777, 780, 783, 786, 807, 813, 814, 817, 818, 819, 821, 826, 832, 833, 834, 836, 843, 855, 858, 899, 914, 924, 984, 1000, 1033, 1034, 1037, 1070, 1094, 1114, 1120, 1121, 1135, 1137, 1138, 1143, 1144, 1145, 1146, 1148, 1158, 1159, 1221], "selector": [0, 40, 157, 164, 166, 170, 214, 221, 223, 255, 263, 265, 296, 418, 746, 758, 764, 772, 773, 776, 802, 827, 855], "extend": [0, 107, 269, 296, 421, 746, 758, 864, 984, 1221], "function": [0, 40, 70, 79, 80, 81, 82, 83, 86, 88, 89, 105, 111, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 134, 138, 139, 140, 141, 143, 153, 154, 161, 169, 177, 208, 214, 222, 223, 257, 258, 262, 265, 266, 277, 282, 296, 306, 310, 357, 393, 415, 416, 417, 438, 499, 506, 507, 508, 510, 530, 542, 546, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 586, 654, 664, 668, 679, 681, 682, 685, 686, 687, 688, 698, 699, 701, 703, 704, 707, 709, 710, 711, 714, 715, 718, 721, 727, 731, 735, 742, 746, 758, 767, 768, 771, 777, 797, 798, 802, 806, 829, 838, 843, 855, 865, 914, 955, 977, 978, 979, 980, 996, 1063, 1070, 1088, 1099, 1100, 1113, 1116, 1123, 1128, 1203, 1221, 1229], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 64, 70, 71, 79, 80, 82, 87, 89, 94, 95, 99, 101, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 133, 138, 139, 140, 141, 143, 144, 145, 147, 153, 159, 171, 183, 184, 185, 186, 187, 188, 189, 202, 203, 204, 206, 208, 221, 222, 226, 232, 233, 234, 235, 244, 252, 257, 258, 262, 271, 274, 294, 296, 306, 307, 308, 312, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 327, 329, 331, 332, 333, 335, 336, 340, 343, 344, 345, 346, 358, 359, 364, 365, 368, 369, 370, 372, 374, 376, 377, 378, 380, 382, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 420, 431, 433, 434, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 460, 461, 465, 466, 468, 474, 479, 481, 487, 498, 500, 505, 510, 537, 538, 541, 542, 550, 552, 553, 556, 557, 558, 560, 562, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 584, 585, 586, 592, 595, 596, 598, 600, 601, 602, 603, 606, 607, 608, 622, 623, 624, 625, 633, 634, 635, 637, 639, 642, 652, 653, 654, 656, 657, 660, 663, 668, 670, 679, 689, 690, 691, 692, 693, 694, 695, 705, 706, 708, 709, 710, 711, 719, 722, 732, 733, 734, 737, 742, 746, 758, 765, 766, 767, 777, 783, 784, 785, 786, 787, 788, 806, 811, 832, 855, 862, 863, 875, 879, 880, 881, 882, 884, 888, 890, 898, 899, 902, 915, 916, 922, 923, 926, 927, 928, 930, 932, 934, 935, 939, 941, 944, 946, 947, 948, 949, 951, 952, 953, 955, 956, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 982, 983, 996, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1029, 1030, 1032, 1038, 1043, 1045, 1051, 1062, 1064, 1070, 1082, 1088, 1090, 1094, 1095, 1097, 1110, 1112, 1123, 1128, 1134, 1135, 1137, 1138, 1140, 1142, 1143, 1144, 1145, 1148, 1149, 1150, 1164, 1165, 1166, 1167, 1175, 1176, 1177, 1179, 1181, 1184, 1201, 1202, 1203, 1204, 1206, 1211, 1220, 1221, 1228], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 85, 86, 94, 104, 106, 107, 108, 109, 110, 115, 116, 117, 119, 120, 124, 125, 126, 129, 130, 131, 133, 137, 138, 139, 140, 141, 144, 145, 154, 177, 183, 185, 186, 188, 189, 190, 203, 204, 208, 232, 252, 258, 260, 263, 296, 306, 308, 312, 313, 314, 315, 316, 317, 320, 326, 329, 331, 332, 333, 335, 336, 337, 340, 343, 344, 345, 346, 358, 359, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 397, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 418, 420, 431, 434, 436, 442, 443, 444, 445, 446, 447, 448, 449, 450, 461, 465, 466, 468, 474, 479, 481, 498, 499, 510, 550, 552, 556, 557, 558, 560, 562, 584, 585, 592, 595, 596, 598, 600, 601, 602, 603, 606, 607, 608, 622, 623, 624, 625, 633, 637, 652, 653, 654, 660, 668, 670, 679, 689, 690, 691, 692, 693, 694, 695, 697, 698, 705, 706, 707, 708, 709, 710, 711, 719, 722, 732, 733, 734, 737, 742, 746, 758, 767, 768, 775, 777, 784, 785, 787, 788, 792, 807, 811, 819, 827, 855, 862, 863, 875, 880, 882, 884, 888, 890, 892, 899, 915, 916, 922, 925, 926, 927, 928, 929, 930, 932, 933, 934, 935, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 959, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 982, 994, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1029, 1030, 1032, 1038, 1043, 1045, 1062, 1063, 1082, 1088, 1094, 1095, 1097, 1123, 1134, 1135, 1137, 1138, 1140, 1142, 1143, 1144, 1145, 1148, 1149, 1150, 1164, 1165, 1166, 1167, 1175, 1179, 1201, 1202, 1204, 1212, 1221, 1228], "config": [0, 79, 238, 271, 296, 594, 618, 695, 758, 767, 813, 832, 855, 1136, 1160], "except": [0, 138, 191, 205, 207, 250, 296, 697, 758, 793, 855, 858, 995, 1025, 1192, 1202, 1211, 1221], "test": [0, 6, 117, 118, 120, 126, 758, 789, 796, 855], "util": [0, 111, 701, 758, 777, 855], "sql": [0, 38, 64, 68, 117, 118, 204, 242, 296, 492, 579, 679, 726, 746, 758, 817, 855, 1056, 1120, 1221], "These": [1, 40, 117, 151, 262, 296, 407, 745, 746, 955, 969], "allow": [1, 13, 39, 40, 58, 59, 60, 70, 89, 94, 105, 117, 129, 132, 133, 134, 135, 145, 147, 153, 202, 205, 206, 233, 234, 236, 257, 258, 263, 274, 296, 389, 396, 399, 487, 508, 510, 555, 576, 633, 634, 635, 746, 792, 793, 797, 798, 802, 827, 834, 855, 858, 951, 958, 961, 976, 1051, 1070, 1092, 1112, 1115, 1175, 1176, 1177, 1203, 1221, 1229], "you": [1, 15, 19, 40, 45, 60, 69, 79, 86, 87, 104, 106, 107, 108, 110, 115, 116, 117, 118, 120, 121, 124, 125, 127, 129, 133, 135, 151, 171, 185, 186, 188, 189, 201, 202, 208, 219, 223, 232, 233, 234, 235, 254, 257, 262, 282, 296, 385, 386, 389, 392, 396, 399, 407, 418, 424, 442, 473, 499, 508, 510, 555, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 594, 607, 618, 681, 690, 695, 699, 711, 719, 722, 737, 746, 768, 773, 784, 785, 787, 788, 789, 796, 811, 819, 843, 855, 858, 947, 948, 954, 955, 958, 961, 969, 983, 1000, 1037, 1070, 1092, 1098, 1136, 1149, 1160, 1177, 1211, 1221, 1229], "regist": [1, 64, 66, 67, 68, 69, 80, 81, 82, 83, 146, 148, 746, 1228], "custom": [1, 32, 39, 40, 80, 81, 82, 83, 146, 147, 148, 154, 208, 277, 282, 296, 310, 396, 399, 499, 506, 508, 510, 563, 564, 668, 709, 710, 711, 746, 797, 798, 838, 843, 855, 865, 958, 961, 1063, 1070, 1099, 1100, 1221, 1229], "dedic": [1, 105, 202, 234, 296], "namespac": [1, 295, 745, 758, 854, 1229], "underli": [1, 70, 89, 97, 104, 106, 107, 108, 110, 117, 124, 125, 127, 133, 142, 145, 147, 170, 171, 202, 203, 234, 252, 296, 330, 365, 366, 370, 374, 376, 377, 378, 380, 382, 384, 387, 390, 391, 392, 394, 408, 409, 410, 411, 555, 574, 593, 597, 746, 776, 855, 858, 883, 893, 923, 924, 928, 932, 934, 935, 939, 941, 944, 946, 949, 952, 953, 954, 956, 970, 971, 972, 973, 983, 1092, 1110, 1123, 1135, 1139, 1197, 1202, 1221], "polar": [1, 296, 745, 746, 752, 758, 855, 858, 1221, 1228], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 142, 143, 235, 258, 296, 733, 742, 746, 752, 758, 855, 1201, 1202, 1221, 1228], "without": [1, 86, 111, 119, 122, 128, 130, 131, 135, 265, 266, 296, 310, 357, 393, 438, 565, 566, 567, 568, 569, 571, 572, 573, 594, 618, 725, 746, 768, 829, 855, 891, 894, 914, 955, 996, 1088, 1136, 1160, 1202, 1221], "requir": [1, 39, 40, 45, 60, 79, 105, 109, 117, 138, 139, 140, 141, 156, 161, 233, 258, 261, 296, 327, 415, 416, 417, 500, 510, 581, 633, 634, 635, 657, 722, 746, 762, 821, 826, 855, 881, 978, 979, 980, 1064, 1122, 1175, 1176, 1177, 1202, 1203, 1206, 1221], "subclass": [1, 296], "mixin": 1, "expr": [1, 79, 80, 81, 82, 83, 170, 172, 204, 205, 219, 223, 233, 238, 239, 271, 272, 296, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 738, 739, 741, 742, 746, 747, 748, 751, 752, 753, 754, 755, 776, 778, 792, 793, 808, 813, 814, 815, 818, 832, 833, 855, 914, 924, 951, 969, 985, 990, 1027, 1028, 1033, 1034, 1037, 1042, 1057, 1060, 1121, 1135, 1141, 1168, 1193, 1221], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 58, 59, 60, 69, 70, 79, 86, 87, 88, 89, 96, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 145, 151, 153, 156, 161, 166, 169, 172, 176, 177, 183, 184, 185, 186, 187, 188, 189, 202, 204, 205, 206, 208, 214, 215, 221, 223, 232, 233, 234, 235, 238, 239, 240, 242, 246, 253, 258, 261, 266, 267, 271, 272, 275, 296, 306, 308, 340, 348, 350, 351, 393, 407, 412, 414, 415, 416, 417, 442, 444, 447, 448, 451, 453, 454, 455, 458, 463, 492, 499, 508, 509, 538, 542, 550, 553, 556, 557, 558, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 583, 586, 588, 589, 603, 604, 605, 606, 613, 614, 615, 637, 642, 648, 664, 665, 667, 673, 675, 676, 677, 678, 679, 684, 688, 690, 691, 693, 694, 713, 717, 725, 728, 730, 733, 734, 736, 738, 739, 741, 745, 746, 747, 748, 751, 752, 753, 754, 755, 758, 762, 767, 768, 773, 777, 778, 783, 784, 785, 786, 787, 788, 789, 792, 793, 796, 798, 802, 803, 807, 809, 811, 813, 814, 816, 817, 821, 826, 829, 832, 833, 834, 836, 855, 858, 862, 863, 891, 899, 908, 909, 955, 969, 975, 977, 978, 979, 980, 993, 1000, 1004, 1008, 1009, 1013, 1014, 1015, 1016, 1023, 1027, 1056, 1063, 1088, 1090, 1094, 1095, 1106, 1120, 1125, 1128, 1145, 1146, 1147, 1155, 1156, 1157, 1177, 1179, 1184, 1191, 1203, 1211, 1213, 1215, 1217, 1221, 1222, 1225, 1226, 1227, 1229], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 39, 40, 46, 58, 66, 79, 85, 104, 107, 109, 110, 115, 116, 119, 120, 121, 123, 126, 127, 129, 132, 133, 142, 143, 147, 151, 157, 163, 166, 173, 191, 197, 199, 201, 202, 203, 204, 206, 207, 212, 214, 218, 219, 226, 233, 234, 235, 239, 245, 249, 250, 255, 257, 263, 265, 266, 267, 272, 296, 307, 309, 328, 346, 357, 362, 363, 364, 418, 423, 429, 436, 439, 441, 444, 448, 454, 455, 457, 461, 472, 473, 479, 495, 499, 507, 508, 526, 529, 530, 531, 532, 533, 534, 540, 548, 553, 557, 559, 564, 581, 587, 589, 595, 596, 602, 603, 604, 605, 606, 611, 616, 617, 621, 627, 628, 629, 630, 647, 665, 681, 682, 683, 684, 687, 688, 690, 697, 699, 704, 721, 728, 729, 730, 736, 746, 752, 758, 764, 767, 768, 773, 775, 777, 779, 792, 797, 798, 802, 807, 814, 819, 820, 827, 829, 833, 834, 855, 858, 914, 916, 919, 920, 922, 995, 1002, 1020, 1025, 1036, 1037, 1043, 1059, 1063, 1090, 1094, 1100, 1129, 1137, 1138, 1144, 1145, 1146, 1147, 1148, 1153, 1158, 1159, 1163, 1169, 1170, 1171, 1172, 1192, 1221, 1228, 1229], "support": [1, 39, 40, 45, 87, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 120, 124, 125, 126, 127, 130, 131, 134, 142, 147, 151, 202, 203, 204, 205, 209, 211, 216, 234, 235, 245, 246, 248, 254, 258, 296, 493, 542, 557, 587, 589, 618, 622, 742, 746, 752, 792, 793, 820, 821, 855, 858, 1057, 1094, 1129, 1160, 1164, 1203, 1221, 1228], "target": [1, 38, 39, 40, 84, 120, 296, 601, 633, 634, 635, 858, 1143, 1175, 1176, 1177], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 43, 45, 49, 51, 58, 59, 60, 64, 65, 69, 70, 79, 85, 86, 87, 89, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 151, 153, 154, 155, 156, 159, 161, 166, 167, 169, 171, 175, 176, 177, 178, 183, 184, 185, 186, 187, 188, 189, 190, 194, 195, 197, 199, 200, 201, 202, 204, 205, 206, 208, 209, 211, 213, 214, 215, 216, 218, 219, 221, 224, 225, 226, 229, 230, 232, 233, 234, 235, 236, 238, 239, 242, 243, 245, 247, 248, 251, 252, 254, 257, 258, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 277, 282, 295, 296, 306, 309, 310, 311, 320, 327, 334, 336, 337, 340, 352, 353, 354, 355, 356, 357, 358, 364, 365, 377, 385, 386, 389, 392, 393, 396, 399, 407, 410, 414, 420, 436, 438, 440, 441, 442, 445, 447, 449, 452, 457, 469, 473, 474, 479, 482, 487, 488, 489, 490, 491, 492, 494, 497, 499, 500, 503, 504, 506, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 529, 531, 532, 533, 534, 535, 536, 538, 542, 548, 550, 553, 554, 555, 556, 557, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 576, 578, 579, 580, 581, 582, 587, 588, 589, 594, 595, 601, 605, 609, 610, 611, 612, 613, 614, 615, 618, 620, 621, 627, 628, 629, 630, 631, 632, 636, 642, 644, 647, 650, 651, 655, 657, 658, 659, 660, 664, 668, 669, 676, 679, 681, 685, 687, 688, 698, 699, 701, 703, 704, 707, 709, 711, 714, 715, 718, 725, 727, 731, 735, 736, 742, 746, 758, 759, 761, 762, 763, 766, 767, 768, 773, 775, 777, 783, 784, 785, 786, 787, 788, 790, 792, 793, 797, 798, 802, 803, 807, 809, 811, 813, 814, 815, 817, 818, 819, 820, 821, 825, 826, 827, 829, 832, 833, 834, 835, 838, 843, 854, 855, 858, 864, 865, 874, 881, 887, 890, 892, 893, 894, 899, 902, 910, 911, 912, 913, 914, 915, 922, 923, 924, 935, 947, 948, 951, 954, 955, 958, 961, 969, 972, 977, 982, 983, 991, 992, 994, 996, 1001, 1005, 1007, 1008, 1010, 1011, 1017, 1019, 1021, 1022, 1033, 1037, 1038, 1043, 1046, 1051, 1052, 1053, 1054, 1055, 1056, 1058, 1061, 1064, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1079, 1080, 1083, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1098, 1099, 1101, 1102, 1104, 1107, 1108, 1109, 1112, 1113, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1129, 1130, 1132, 1136, 1137, 1143, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160, 1162, 1163, 1169, 1170, 1171, 1172, 1177, 1178, 1184, 1185, 1190, 1191, 1193, 1194, 1197, 1199, 1201, 1202, 1203, 1205, 1206, 1208, 1209, 1210, 1211, 1221, 1228, 1229], "featur": [1, 45, 49, 51, 84, 296], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 51, 58, 59, 60, 64, 69, 70, 79, 84, 85, 86, 87, 89, 91, 93, 94, 96, 100, 102, 104, 105, 106, 107, 108, 109, 110, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 147, 149, 150, 151, 155, 156, 159, 163, 166, 168, 169, 171, 174, 178, 184, 185, 186, 187, 188, 189, 190, 191, 194, 195, 196, 198, 200, 202, 203, 204, 205, 206, 207, 208, 211, 214, 215, 219, 221, 222, 223, 230, 232, 233, 234, 235, 236, 239, 242, 245, 246, 247, 248, 250, 252, 257, 258, 261, 262, 263, 265, 266, 267, 268, 272, 274, 282, 295, 296, 303, 306, 308, 309, 310, 311, 321, 357, 358, 362, 363, 364, 366, 376, 389, 393, 396, 407, 415, 416, 417, 420, 424, 436, 438, 440, 442, 458, 464, 472, 473, 476, 477, 487, 492, 493, 497, 499, 503, 508, 510, 514, 517, 518, 519, 542, 550, 553, 555, 556, 557, 558, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 576, 577, 578, 579, 582, 583, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 601, 602, 603, 606, 607, 611, 613, 614, 615, 616, 618, 621, 622, 625, 627, 628, 629, 630, 633, 634, 635, 637, 639, 642, 660, 661, 664, 666, 669, 674, 676, 678, 679, 680, 681, 682, 685, 686, 690, 691, 693, 694, 699, 703, 704, 708, 711, 714, 715, 718, 722, 723, 724, 725, 727, 731, 733, 734, 735, 736, 742, 746, 761, 762, 766, 767, 768, 773, 775, 777, 780, 783, 784, 785, 786, 787, 788, 791, 792, 793, 795, 797, 798, 802, 803, 807, 811, 814, 815, 817, 819, 820, 821, 822, 826, 827, 829, 830, 833, 838, 843, 855, 858, 862, 863, 864, 865, 891, 894, 899, 902, 914, 915, 916, 919, 920, 922, 924, 934, 951, 955, 958, 969, 976, 977, 978, 979, 980, 982, 983, 987, 993, 994, 995, 996, 1001, 1003, 1010, 1017, 1018, 1019, 1021, 1022, 1023, 1025, 1028, 1036, 1037, 1040, 1041, 1051, 1056, 1057, 1061, 1063, 1070, 1088, 1090, 1092, 1094, 1095, 1098, 1100, 1107, 1109, 1112, 1113, 1114, 1115, 1116, 1118, 1120, 1124, 1125, 1128, 1129, 1132, 1134, 1135, 1136, 1137, 1138, 1143, 1144, 1145, 1148, 1149, 1153, 1155, 1156, 1157, 1158, 1160, 1163, 1164, 1167, 1169, 1170, 1171, 1172, 1175, 1176, 1177, 1179, 1181, 1184, 1192, 1197, 1202, 1203, 1209, 1210, 1211, 1221, 1228, 1229], "primarili": 1, "intend": [1, 138, 139, 140, 141, 642, 1184], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 58, 60, 64, 65, 66, 67, 69, 70, 71, 79, 86, 87, 88, 89, 105, 107, 108, 110, 112, 115, 116, 117, 118, 119, 120, 121, 123, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 154, 155, 157, 164, 166, 172, 173, 174, 177, 184, 185, 186, 187, 188, 189, 197, 199, 201, 202, 203, 205, 208, 209, 211, 214, 216, 218, 219, 221, 222, 223, 232, 233, 234, 235, 236, 238, 239, 243, 246, 247, 248, 254, 255, 256, 257, 258, 262, 263, 265, 266, 267, 268, 271, 272, 275, 282, 296, 304, 306, 308, 310, 311, 321, 330, 331, 337, 341, 342, 357, 362, 363, 371, 375, 379, 381, 383, 388, 392, 393, 395, 396, 399, 407, 410, 412, 415, 416, 417, 418, 423, 424, 438, 441, 442, 458, 473, 487, 499, 508, 509, 510, 513, 542, 550, 553, 555, 558, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 576, 578, 580, 581, 586, 588, 589, 591, 593, 594, 597, 598, 599, 601, 602, 604, 605, 607, 608, 616, 618, 622, 624, 626, 629, 630, 631, 632, 633, 634, 635, 639, 642, 661, 664, 665, 666, 667, 669, 677, 678, 680, 681, 683, 684, 687, 688, 690, 691, 692, 693, 694, 695, 699, 701, 708, 711, 712, 713, 716, 717, 719, 722, 723, 724, 725, 727, 728, 729, 730, 733, 734, 735, 736, 737, 742, 745, 746, 757, 758, 761, 764, 767, 768, 772, 773, 777, 778, 779, 780, 783, 784, 785, 787, 788, 789, 793, 795, 796, 802, 811, 813, 814, 818, 821, 822, 827, 829, 830, 832, 833, 836, 843, 855, 858, 862, 863, 865, 883, 884, 892, 894, 900, 901, 914, 915, 919, 920, 929, 933, 940, 942, 945, 950, 954, 955, 957, 958, 961, 969, 972, 975, 978, 979, 980, 985, 986, 990, 993, 996, 999, 1000, 1001, 1007, 1010, 1017, 1019, 1021, 1023, 1037, 1051, 1063, 1069, 1070, 1088, 1090, 1092, 1095, 1098, 1100, 1112, 1113, 1116, 1118, 1121, 1122, 1128, 1132, 1135, 1136, 1139, 1140, 1143, 1144, 1146, 1147, 1149, 1150, 1158, 1160, 1164, 1166, 1175, 1176, 1177, 1181, 1184, 1193, 1198, 1200, 1201, 1202, 1203, 1210, 1211, 1221, 1228, 1229], "librari": [1, 97, 117, 120, 508, 746, 1229], "author": 1, "domain": [1, 602, 1144], "specif": [1, 35, 39, 40, 104, 106, 108, 110, 115, 118, 119, 120, 124, 125, 126, 130, 144, 145, 157, 202, 296, 396, 399, 633, 634, 635, 639, 764, 855, 858, 958, 961, 1175, 1176, 1177, 1181, 1221, 1229], "capabl": [1, 40, 296], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 70, 79, 80, 81, 82, 83, 107, 115, 116, 117, 118, 119, 120, 129, 130, 131, 138, 139, 146, 148, 156, 157, 166, 171, 172, 184, 185, 186, 187, 188, 189, 195, 205, 232, 257, 261, 263, 267, 296, 306, 389, 393, 396, 407, 421, 442, 444, 448, 451, 453, 454, 455, 499, 510, 519, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 615, 637, 690, 691, 693, 694, 695, 733, 734, 736, 746, 762, 764, 773, 775, 784, 785, 787, 788, 793, 811, 815, 826, 827, 855, 951, 955, 958, 969, 983, 984, 1000, 1004, 1009, 1013, 1014, 1015, 1016, 1063, 1098, 1116, 1157, 1179, 1202, 1221, 1229], "mai": [1, 39, 49, 51, 60, 86, 87, 104, 106, 107, 108, 110, 115, 117, 119, 121, 124, 125, 130, 131, 132, 133, 135, 138, 140, 163, 169, 171, 185, 205, 208, 232, 243, 258, 265, 266, 267, 296, 310, 357, 364, 365, 377, 389, 393, 407, 418, 438, 476, 497, 499, 508, 510, 518, 562, 565, 566, 567, 568, 569, 571, 572, 573, 580, 607, 681, 682, 685, 686, 690, 691, 693, 694, 699, 721, 733, 734, 746, 767, 768, 777, 784, 793, 797, 798, 811, 818, 829, 835, 838, 843, 855, 893, 894, 914, 916, 922, 923, 935, 951, 955, 969, 977, 983, 996, 1040, 1070, 1088, 1121, 1149, 1177, 1202, 1221, 1229], "exist": [1, 38, 39, 40, 79, 119, 130, 145, 262, 266, 271, 272, 296, 305, 329, 332, 333, 366, 509, 746, 809, 829, 832, 833, 855, 858, 924, 1069, 1221], "belong": [1, 185, 296, 784, 855], "core": [1, 258, 296, 1229], "cannot": [1, 115, 116, 120, 121, 126, 149, 208, 235, 236, 282, 296, 330, 418, 487, 510, 576, 597, 624, 645, 711, 746, 819, 843, 855, 883, 1051, 1070, 1112, 1139, 1166, 1221], "overrid": [1, 40, 104, 106, 107, 108, 109, 110, 115, 117, 118, 120, 124, 125, 126, 142, 143, 147, 149, 296, 509, 746, 855, 1069, 1221], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 58, 59, 60, 64, 65, 66, 67, 68, 69, 79, 80, 81, 82, 83, 84, 104, 105, 106, 107, 108, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 145, 146, 147, 148, 151, 156, 157, 160, 163, 164, 165, 166, 167, 169, 170, 174, 175, 176, 177, 180, 181, 183, 184, 185, 186, 188, 189, 191, 193, 197, 199, 200, 202, 204, 205, 209, 211, 213, 214, 215, 216, 219, 221, 223, 225, 227, 228, 230, 231, 232, 233, 234, 236, 237, 240, 243, 245, 246, 247, 248, 250, 253, 254, 255, 256, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 303, 304, 305, 329, 331, 332, 333, 336, 358, 361, 367, 389, 392, 393, 396, 399, 407, 418, 420, 424, 426, 430, 431, 434, 440, 442, 467, 468, 477, 478, 479, 493, 496, 499, 507, 510, 518, 520, 521, 523, 530, 531, 532, 533, 534, 539, 542, 546, 548, 550, 556, 557, 559, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 581, 588, 589, 643, 644, 645, 647, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 677, 679, 681, 682, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 742, 746, 753, 762, 764, 767, 768, 769, 771, 772, 773, 775, 776, 777, 780, 783, 784, 785, 787, 788, 790, 792, 793, 802, 803, 807, 809, 810, 811, 812, 815, 816, 818, 819, 820, 821, 826, 827, 828, 829, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 861, 888, 890, 915, 916, 925, 951, 954, 955, 958, 961, 969, 982, 986, 1032, 1033, 1034, 1043, 1063, 1079, 1080, 1088, 1093, 1094, 1113, 1116, 1117, 1185, 1188, 1198, 1199, 1200, 1209, 1221, 1225, 1228, 1229], "dt": [1, 79, 120, 126, 232, 296, 562, 695, 746, 755, 811, 855, 858, 1227], "attempt": [1, 257, 296], "do": [1, 40, 58, 59, 60, 79, 85, 86, 87, 115, 129, 138, 139, 140, 141, 171, 185, 186, 188, 189, 201, 205, 223, 232, 252, 262, 265, 296, 357, 473, 508, 542, 562, 628, 629, 630, 719, 722, 737, 746, 767, 768, 775, 784, 785, 787, 788, 793, 797, 798, 807, 811, 819, 855, 858, 914, 983, 1037, 1170, 1171, 1172, 1211, 1221], "so": [1, 117, 118, 129, 149, 183, 185, 186, 188, 189, 223, 232, 296, 321, 442, 477, 499, 510, 562, 618, 628, 629, 630, 746, 784, 785, 787, 788, 811, 855, 1041, 1160, 1170, 1171, 1172], "rais": [1, 20, 21, 25, 39, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 120, 126, 129, 138, 140, 153, 223, 233, 296, 330, 392, 393, 407, 476, 497, 518, 550, 593, 597, 615, 633, 634, 635, 637, 639, 692, 708, 746, 883, 954, 955, 969, 1040, 1061, 1088, 1135, 1139, 1157, 1175, 1176, 1177, 1179, 1181, 1202, 1211, 1221], "an": [1, 35, 37, 38, 39, 40, 49, 51, 58, 59, 80, 82, 83, 85, 86, 89, 94, 95, 97, 104, 115, 116, 117, 118, 119, 120, 122, 126, 127, 129, 131, 132, 143, 145, 147, 157, 158, 159, 169, 172, 177, 185, 186, 188, 189, 201, 202, 203, 205, 208, 219, 223, 229, 230, 232, 233, 252, 257, 262, 265, 266, 271, 282, 296, 305, 326, 330, 335, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 366, 367, 389, 392, 396, 410, 421, 423, 424, 430, 431, 434, 457, 469, 470, 473, 476, 477, 497, 498, 499, 507, 508, 510, 519, 529, 530, 549, 550, 558, 561, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 593, 597, 602, 604, 633, 634, 635, 637, 639, 650, 656, 664, 670, 674, 690, 691, 693, 694, 696, 698, 701, 705, 706, 707, 708, 719, 721, 722, 725, 728, 733, 734, 736, 737, 742, 746, 758, 764, 765, 766, 767, 768, 775, 777, 780, 784, 785, 787, 788, 793, 798, 807, 811, 819, 829, 832, 834, 843, 855, 858, 880, 883, 888, 898, 900, 901, 902, 906, 907, 908, 909, 910, 911, 912, 913, 914, 924, 958, 972, 977, 984, 1010, 1022, 1033, 1034, 1037, 1040, 1041, 1061, 1062, 1070, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1113, 1116, 1135, 1139, 1144, 1146, 1175, 1176, 1177, 1179, 1181, 1202, 1211, 1221, 1228], "attributeerror": 1, "howev": [1, 107, 117, 169, 208, 257, 296, 977, 1221], "can": [1, 19, 32, 40, 45, 48, 69, 70, 71, 79, 88, 89, 95, 105, 107, 115, 116, 117, 120, 121, 126, 127, 129, 132, 134, 135, 143, 144, 145, 147, 149, 151, 156, 158, 166, 167, 177, 184, 185, 186, 187, 188, 189, 197, 199, 201, 208, 219, 223, 232, 235, 238, 246, 257, 261, 262, 265, 271, 282, 296, 306, 310, 348, 351, 357, 385, 386, 389, 392, 407, 421, 442, 457, 473, 499, 508, 510, 518, 526, 529, 531, 532, 533, 534, 542, 548, 550, 555, 562, 565, 566, 567, 568, 569, 571, 572, 573, 578, 581, 583, 586, 589, 594, 606, 618, 628, 629, 630, 633, 647, 673, 699, 701, 711, 736, 742, 745, 746, 757, 762, 767, 773, 775, 777, 784, 785, 787, 788, 811, 813, 815, 821, 826, 832, 835, 855, 858, 865, 894, 914, 915, 947, 948, 951, 954, 955, 969, 984, 1000, 1037, 1063, 1070, 1075, 1088, 1092, 1094, 1113, 1116, 1118, 1122, 1125, 1128, 1136, 1137, 1138, 1145, 1148, 1160, 1170, 1171, 1172, 1175, 1177, 1202, 1221, 1228], "other": [1, 25, 40, 45, 69, 86, 115, 116, 117, 129, 138, 139, 140, 141, 166, 168, 171, 178, 204, 205, 214, 215, 233, 235, 238, 239, 266, 269, 271, 272, 294, 296, 303, 307, 309, 321, 340, 361, 413, 414, 428, 433, 435, 442, 447, 460, 467, 488, 489, 490, 491, 505, 514, 517, 525, 527, 537, 538, 541, 557, 589, 646, 654, 656, 663, 665, 667, 675, 676, 677, 684, 688, 690, 713, 717, 725, 728, 730, 746, 758, 768, 773, 792, 793, 802, 803, 813, 814, 829, 832, 833, 834, 855, 858, 864, 899, 918, 976, 983, 1008, 1031, 1052, 1053, 1054, 1055, 1094, 1115, 1204, 1212, 1220, 1221], "onli": [1, 15, 18, 25, 35, 37, 40, 58, 64, 66, 70, 79, 84, 87, 89, 115, 116, 119, 121, 123, 127, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 145, 147, 151, 154, 166, 171, 185, 188, 190, 202, 204, 205, 208, 209, 211, 216, 223, 232, 234, 235, 248, 254, 256, 257, 266, 267, 282, 296, 304, 306, 308, 310, 321, 339, 340, 389, 397, 418, 427, 436, 457, 510, 529, 531, 532, 533, 534, 542, 548, 555, 565, 566, 567, 568, 569, 571, 572, 573, 594, 618, 647, 658, 690, 691, 711, 746, 767, 773, 784, 785, 787, 788, 789, 792, 793, 796, 811, 829, 843, 855, 862, 863, 864, 896, 899, 915, 951, 983, 989, 994, 1010, 1070, 1088, 1092, 1136, 1160, 1197, 1200, 1221, 1228, 1229], "gener": [1, 117, 118, 136, 142, 143, 144, 145, 147, 153, 161, 223, 236, 255, 257, 262, 296, 487, 576, 582, 670, 690, 693, 705, 706, 722, 733, 734, 746, 855, 1051, 1112, 1124, 1198, 1221, 1229], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80, 81, 82, 83, 87, 88, 89, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 742, 746, 759, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 887, 888, 890, 891, 893, 894, 895, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 909, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 989, 990, 991, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1024, 1027, 1028, 1035, 1036, 1037, 1038, 1042, 1043, 1045, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1062, 1063, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1118, 1120, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1155, 1156, 1158, 1159, 1160, 1161, 1164, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1221, 1228, 1229], "register_expr_namespac": [1, 80, 82, 83], "greet": 1, "def": [1, 70, 80, 81, 82, 83, 143, 144, 145, 147, 151, 222, 262, 296, 303, 546, 602, 630, 663, 710, 746, 768, 806, 855, 858, 1144, 1229], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 142, 1228], "self": [1, 65, 66, 67, 69, 80, 81, 82, 83, 85, 86, 158, 159, 163, 171, 191, 193, 194, 195, 207, 209, 211, 213, 214, 216, 220, 221, 223, 225, 226, 228, 229, 230, 236, 244, 245, 247, 248, 250, 255, 262, 264, 267, 268, 269, 273, 274, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 328, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 524, 525, 526, 527, 528, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 742, 746, 761, 762, 763, 764, 766, 767, 768, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809, 810, 813, 814, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 855, 864, 865, 888, 902, 983, 987, 997, 1068, 1069, 1070, 1081, 1085, 1086, 1091, 1094, 1113, 1116, 1118, 1130, 1208, 1212, 1221], "_expr": [1, 81], "hello": [1, 25, 65, 68, 628, 629, 630, 1043, 1170, 1171, 1172], "return": [1, 10, 11, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 64, 68, 70, 79, 80, 81, 82, 83, 84, 85, 86, 96, 98, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 144, 154, 156, 158, 161, 162, 165, 167, 169, 170, 171, 172, 173, 176, 177, 179, 180, 183, 184, 185, 187, 188, 191, 193, 200, 201, 202, 203, 204, 206, 207, 208, 210, 212, 217, 218, 219, 221, 222, 223, 232, 233, 234, 235, 236, 249, 250, 251, 257, 258, 261, 262, 263, 267, 271, 272, 278, 280, 282, 285, 290, 296, 306, 308, 312, 313, 314, 315, 316, 317, 320, 321, 326, 329, 331, 332, 333, 334, 343, 344, 345, 346, 358, 359, 364, 368, 369, 370, 372, 374, 376, 377, 378, 380, 382, 384, 385, 386, 387, 389, 390, 391, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 411, 420, 431, 432, 434, 437, 438, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 454, 455, 461, 462, 465, 466, 468, 474, 476, 477, 478, 479, 481, 482, 487, 496, 497, 498, 504, 509, 519, 521, 526, 546, 550, 552, 556, 557, 558, 560, 576, 577, 583, 584, 585, 592, 595, 596, 598, 600, 601, 602, 603, 606, 607, 608, 609, 610, 612, 613, 614, 619, 620, 622, 623, 624, 625, 637, 642, 649, 651, 652, 653, 655, 656, 658, 659, 660, 663, 664, 668, 670, 671, 672, 673, 674, 679, 689, 690, 691, 692, 693, 694, 695, 698, 701, 703, 705, 706, 707, 708, 709, 710, 711, 719, 722, 725, 728, 731, 732, 733, 734, 736, 737, 746, 762, 765, 767, 768, 770, 774, 775, 777, 782, 784, 785, 787, 788, 789, 792, 795, 796, 798, 806, 807, 811, 815, 819, 824, 825, 826, 827, 832, 833, 839, 841, 846, 851, 855, 862, 863, 864, 872, 873, 875, 876, 880, 882, 884, 887, 891, 894, 898, 915, 916, 922, 926, 927, 928, 930, 932, 934, 935, 936, 937, 938, 939, 941, 943, 944, 946, 947, 948, 949, 951, 952, 953, 955, 956, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 976, 977, 982, 983, 991, 993, 995, 996, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1022, 1024, 1025, 1029, 1030, 1032, 1038, 1040, 1041, 1042, 1043, 1045, 1046, 1051, 1060, 1061, 1062, 1068, 1069, 1070, 1075, 1082, 1088, 1094, 1095, 1096, 1097, 1098, 1112, 1114, 1115, 1125, 1134, 1135, 1137, 1138, 1140, 1142, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1161, 1162, 1164, 1165, 1166, 1167, 1179, 1184, 1192, 1194, 1205, 1207, 1208, 1209, 1212, 1221, 1228, 1229], "lit": [1, 305, 329, 442, 457, 529, 681, 685, 699, 719, 722, 737, 746, 986, 1221], "alia": [1, 17, 79, 81, 83, 185, 207, 223, 232, 264, 271, 296, 303, 307, 329, 331, 332, 333, 334, 347, 348, 349, 350, 351, 358, 360, 364, 365, 366, 367, 370, 372, 373, 374, 377, 378, 382, 384, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 404, 406, 407, 408, 409, 410, 411, 413, 414, 426, 428, 433, 435, 440, 442, 446, 450, 457, 460, 462, 505, 510, 514, 515, 516, 517, 519, 522, 525, 527, 529, 537, 538, 541, 543, 547, 550, 553, 555, 575, 577, 593, 594, 596, 599, 601, 602, 607, 608, 618, 619, 622, 623, 624, 625, 626, 631, 632, 643, 644, 645, 646, 654, 655, 656, 662, 663, 670, 671, 672, 675, 676, 677, 695, 696, 699, 700, 710, 711, 721, 728, 736, 746, 784, 790, 796, 811, 828, 832, 855, 915, 923, 925, 931, 951, 954, 958, 960, 1025, 1037, 1088, 1093, 1143, 1144, 1166, 1167, 1221], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 65, 68, 594, 618, 628, 629, 630, 640, 1043, 1136, 1160, 1170, 1171, 1172, 1182], "select": [1, 13, 38, 64, 65, 66, 79, 80, 81, 82, 114, 115, 116, 117, 118, 119, 121, 123, 127, 129, 135, 144, 200, 201, 205, 208, 219, 222, 233, 239, 245, 259, 264, 267, 296, 302, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 334, 336, 338, 339, 343, 344, 345, 346, 357, 359, 360, 361, 362, 363, 365, 366, 367, 376, 377, 378, 385, 386, 389, 392, 400, 401, 402, 403, 404, 405, 406, 407, 410, 411, 412, 415, 416, 417, 418, 419, 420, 421, 425, 427, 429, 432, 436, 438, 439, 440, 441, 443, 444, 448, 456, 457, 458, 459, 461, 473, 474, 499, 501, 502, 503, 504, 508, 510, 511, 512, 513, 524, 526, 528, 529, 535, 536, 539, 540, 541, 544, 545, 549, 551, 552, 553, 554, 555, 556, 558, 559, 560, 564, 570, 574, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 600, 601, 602, 603, 633, 643, 645, 648, 652, 653, 655, 657, 658, 659, 660, 661, 664, 666, 669, 671, 672, 673, 674, 676, 678, 679, 680, 683, 695, 697, 698, 699, 700, 701, 703, 707, 712, 714, 715, 716, 718, 721, 722, 726, 727, 728, 729, 731, 735, 742, 746, 769, 793, 806, 814, 815, 820, 828, 834, 855, 858, 879, 881, 954, 990, 1027, 1028, 1037, 1113, 1116, 1129, 1148, 1175, 1193, 1221, 1228], "shape": [1, 2, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 61, 64, 65, 66, 68, 70, 71, 79, 80, 81, 82, 83, 87, 88, 89, 101, 104, 105, 106, 107, 108, 109, 110, 111, 129, 135, 145, 147, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 172, 173, 174, 177, 179, 180, 182, 184, 185, 190, 191, 193, 195, 196, 197, 199, 200, 201, 204, 205, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 236, 238, 242, 245, 246, 247, 248, 249, 250, 253, 255, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 742, 746, 761, 762, 764, 765, 767, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 791, 792, 793, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 813, 815, 817, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 861, 864, 866, 867, 868, 869, 870, 871, 874, 875, 876, 877, 878, 879, 880, 881, 887, 888, 890, 893, 895, 896, 898, 899, 902, 903, 904, 905, 906, 907, 908, 909, 914, 915, 916, 917, 919, 920, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 938, 939, 941, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 978, 979, 980, 983, 984, 985, 986, 987, 989, 990, 991, 994, 995, 996, 999, 1000, 1002, 1004, 1006, 1008, 1009, 1012, 1013, 1014, 1015, 1016, 1020, 1022, 1027, 1028, 1035, 1036, 1037, 1038, 1042, 1043, 1045, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1062, 1063, 1068, 1070, 1075, 1082, 1084, 1085, 1086, 1088, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1120, 1124, 1125, 1126, 1127, 1129, 1130, 1131, 1134, 1135, 1136, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1155, 1156, 1158, 1159, 1160, 1161, 1164, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1190, 1192, 1195, 1196, 1198, 1199, 1200, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1221, 1228], "3": [1, 2, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 66, 67, 69, 79, 80, 81, 82, 83, 87, 89, 104, 105, 106, 107, 108, 109, 110, 111, 118, 120, 126, 129, 135, 137, 138, 139, 140, 141, 144, 145, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 174, 177, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 303, 304, 305, 306, 308, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 346, 347, 348, 349, 350, 351, 357, 358, 360, 361, 362, 363, 365, 366, 367, 373, 374, 376, 377, 382, 384, 389, 391, 392, 393, 394, 396, 398, 399, 400, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 456, 457, 458, 460, 461, 462, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 504, 505, 507, 510, 525, 526, 527, 529, 530, 531, 532, 533, 534, 537, 539, 540, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 586, 588, 589, 590, 593, 594, 595, 598, 599, 601, 602, 603, 604, 607, 608, 611, 616, 618, 619, 621, 622, 623, 624, 625, 626, 627, 634, 639, 643, 644, 645, 646, 647, 649, 655, 658, 659, 660, 662, 663, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 719, 721, 722, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 742, 746, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 861, 864, 866, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 887, 888, 890, 893, 895, 896, 897, 902, 903, 904, 905, 906, 907, 908, 909, 914, 915, 916, 917, 918, 919, 920, 923, 924, 925, 928, 931, 932, 934, 936, 937, 938, 943, 944, 946, 952, 954, 955, 956, 958, 960, 961, 962, 964, 965, 967, 969, 971, 972, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 989, 990, 991, 994, 995, 996, 999, 1000, 1002, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1023, 1024, 1033, 1035, 1036, 1037, 1038, 1042, 1045, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1062, 1063, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1118, 1120, 1124, 1126, 1127, 1128, 1129, 1130, 1132, 1136, 1137, 1140, 1141, 1143, 1144, 1145, 1146, 1149, 1150, 1153, 1158, 1160, 1161, 1163, 1164, 1168, 1169, 1176, 1181, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1221, 1228, 1229], "1": [1, 2, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 60, 61, 64, 65, 66, 67, 68, 69, 71, 79, 80, 81, 82, 83, 87, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 119, 120, 121, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 145, 147, 153, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 461, 462, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 599, 600, 601, 602, 603, 604, 606, 607, 608, 616, 617, 624, 625, 626, 628, 629, 630, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 669, 670, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 742, 746, 761, 762, 764, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 796, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 818, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 861, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 887, 888, 893, 895, 896, 897, 899, 902, 903, 904, 906, 907, 908, 909, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 931, 932, 934, 935, 936, 937, 938, 939, 941, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 978, 979, 980, 983, 984, 985, 986, 987, 989, 990, 991, 994, 995, 996, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1022, 1024, 1027, 1028, 1035, 1036, 1037, 1038, 1041, 1042, 1045, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1062, 1063, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1084, 1085, 1086, 1088, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1116, 1118, 1120, 1121, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1143, 1145, 1146, 1148, 1149, 1150, 1158, 1166, 1167, 1184, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1221, 1228, 1229], "2": [1, 2, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 66, 67, 69, 71, 79, 80, 81, 82, 83, 87, 104, 105, 106, 107, 108, 109, 110, 111, 118, 129, 135, 136, 137, 138, 139, 140, 141, 144, 145, 147, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 191, 192, 193, 195, 197, 198, 199, 200, 201, 202, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 302, 303, 304, 305, 307, 309, 311, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 335, 338, 339, 340, 345, 346, 347, 348, 349, 350, 351, 357, 358, 360, 361, 364, 366, 367, 370, 372, 374, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 586, 587, 588, 589, 590, 592, 594, 596, 598, 599, 601, 603, 604, 606, 607, 608, 613, 614, 616, 617, 618, 619, 622, 624, 625, 626, 628, 629, 630, 631, 632, 633, 635, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 649, 652, 654, 655, 656, 657, 658, 659, 660, 662, 663, 664, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 710, 711, 712, 714, 715, 716, 718, 721, 725, 726, 727, 728, 729, 731, 734, 735, 736, 742, 746, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 790, 792, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 861, 864, 867, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 887, 893, 895, 896, 897, 898, 902, 903, 905, 907, 908, 909, 914, 915, 916, 917, 918, 922, 924, 926, 927, 930, 932, 936, 937, 938, 943, 944, 946, 947, 948, 953, 954, 955, 959, 969, 971, 972, 973, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 989, 990, 991, 994, 995, 996, 999, 1000, 1002, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1024, 1035, 1036, 1037, 1038, 1042, 1043, 1045, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1062, 1063, 1065, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1084, 1085, 1086, 1088, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1118, 1120, 1124, 1126, 1128, 1129, 1130, 1131, 1132, 1134, 1138, 1143, 1145, 1146, 1148, 1150, 1158, 1159, 1166, 1167, 1170, 1171, 1172, 1175, 1177, 1178, 1179, 1180, 1182, 1183, 1190, 1191, 1192, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1221, 1228, 1229], "column_0": [1, 208, 262, 296], "register_dataframe_namespac": [1, 81, 82, 83], "split": [1, 40, 80, 203, 296, 624, 625, 1166, 1167], "splitfram": [1, 80], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 61, 64, 65, 80, 81, 104, 105, 106, 107, 108, 109, 110, 111, 116, 117, 118, 129, 143, 145, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 173, 174, 177, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 636, 637, 638, 640, 641, 642, 643, 645, 646, 647, 648, 649, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 691, 695, 696, 697, 698, 699, 700, 701, 703, 706, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 742, 746, 784, 811, 815, 828, 829, 841, 843, 851, 855, 858, 879, 881, 954, 1027, 1028, 1037, 1148, 1159, 1166, 1167, 1199, 1221, 1229], "_df": [1, 80], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 51, 64, 68, 71, 79, 80, 82, 85, 86, 104, 106, 107, 108, 110, 111, 113, 114, 115, 116, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 143, 144, 145, 147, 160, 164, 167, 169, 170, 174, 182, 184, 185, 193, 202, 218, 221, 233, 234, 235, 238, 246, 253, 254, 262, 263, 264, 265, 271, 275, 276, 296, 304, 326, 327, 358, 420, 426, 431, 439, 447, 506, 508, 510, 519, 520, 542, 550, 556, 558, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 588, 589, 602, 623, 643, 645, 650, 654, 673, 676, 691, 694, 696, 704, 706, 708, 711, 726, 728, 734, 746, 769, 774, 776, 780, 783, 784, 813, 821, 827, 828, 832, 834, 836, 837, 855, 858, 880, 881, 897, 915, 977, 982, 987, 990, 992, 996, 997, 1008, 1088, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1114, 1136, 1144, 1160, 1165, 1193, 1201, 1204, 1221, 1229], "with_row_count": [1, 296, 565, 566, 568, 571, 572, 573, 746, 855, 1113, 1221], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 58, 65, 66, 67, 68, 69, 71, 80, 81, 82, 83, 87, 93, 104, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 140, 141, 142, 143, 145, 146, 147, 148, 156, 157, 160, 164, 165, 166, 170, 174, 175, 176, 180, 181, 183, 184, 187, 200, 201, 202, 204, 205, 208, 210, 212, 214, 215, 217, 221, 223, 227, 233, 234, 235, 237, 238, 239, 246, 249, 253, 255, 257, 260, 261, 262, 263, 264, 265, 266, 271, 272, 273, 274, 275, 296, 305, 310, 329, 331, 332, 333, 358, 418, 442, 451, 453, 454, 455, 457, 499, 507, 510, 518, 520, 522, 542, 548, 550, 559, 589, 602, 603, 643, 645, 647, 664, 665, 666, 667, 669, 671, 672, 673, 675, 676, 677, 678, 679, 680, 683, 684, 687, 688, 697, 698, 703, 704, 707, 712, 713, 714, 716, 717, 718, 720, 723, 724, 725, 727, 728, 729, 730, 731, 735, 736, 742, 746, 762, 764, 769, 772, 773, 776, 780, 783, 786, 792, 793, 802, 803, 809, 812, 813, 814, 815, 821, 826, 827, 828, 829, 832, 833, 834, 835, 836, 855, 858, 861, 898, 915, 1063, 1088, 1093, 1143, 1144, 1145, 1158, 1185, 1188, 1198, 1199, 1203, 1221, 1228, 1229], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 58, 66, 67, 80, 81, 82, 83, 113, 115, 116, 129, 154, 158, 171, 179, 185, 191, 202, 203, 207, 208, 234, 235, 236, 242, 243, 247, 250, 251, 254, 256, 268, 280, 290, 296, 334, 357, 360, 365, 366, 373, 398, 410, 421, 432, 437, 462, 471, 478, 487, 488, 492, 496, 499, 543, 546, 556, 571, 573, 576, 579, 580, 586, 591, 607, 608, 616, 624, 625, 628, 629, 635, 649, 651, 655, 656, 661, 663, 678, 680, 690, 691, 692, 693, 694, 695, 701, 703, 719, 722, 723, 724, 727, 731, 735, 737, 746, 765, 767, 782, 784, 789, 796, 817, 818, 822, 824, 825, 830, 841, 851, 855, 858, 887, 898, 914, 917, 923, 924, 931, 960, 972, 983, 984, 991, 995, 1025, 1035, 1042, 1051, 1052, 1056, 1060, 1063, 1084, 1107, 1109, 1112, 1120, 1121, 1128, 1132, 1149, 1150, 1158, 1166, 1167, 1177, 1192, 1194, 1200, 1205, 1210, 1221, 1228, 1229], "filter": [1, 80, 119, 129, 130, 135, 166, 197, 198, 199, 204, 223, 282, 296, 518, 520, 599, 626, 662, 699, 736, 746, 773, 777, 790, 792, 843, 855, 858, 1116, 1221], "col": [1, 17, 37, 40, 58, 79, 80, 81, 82, 108, 110, 129, 143, 145, 174, 184, 185, 198, 200, 206, 208, 219, 222, 223, 232, 233, 238, 246, 264, 265, 271, 275, 296, 302, 303, 304, 305, 306, 307, 308, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 344, 345, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 438, 440, 441, 442, 443, 446, 447, 450, 451, 453, 456, 457, 458, 459, 460, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 527, 528, 529, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 582, 583, 584, 585, 586, 588, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 636, 637, 638, 640, 641, 642, 643, 644, 645, 646, 648, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 674, 675, 676, 677, 679, 683, 695, 698, 699, 700, 701, 702, 703, 704, 707, 712, 714, 715, 716, 718, 720, 721, 727, 729, 731, 735, 736, 746, 766, 780, 783, 784, 790, 795, 806, 811, 813, 821, 828, 832, 834, 836, 855, 858, 879, 881, 951, 954, 1027, 1028, 1037, 1095, 1113, 1116, 1148, 1175, 1221, 1229], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 60, 61, 64, 69, 79, 80, 81, 83, 87, 89, 105, 115, 116, 117, 118, 120, 121, 123, 126, 127, 129, 132, 133, 134, 135, 137, 142, 143, 144, 145, 147, 153, 154, 157, 158, 159, 161, 162, 163, 164, 167, 168, 172, 173, 175, 177, 178, 179, 182, 183, 184, 185, 186, 187, 188, 189, 190, 194, 195, 196, 200, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 223, 224, 225, 229, 230, 234, 235, 236, 237, 238, 243, 245, 246, 247, 248, 249, 251, 255, 256, 257, 258, 259, 262, 265, 267, 268, 271, 273, 275, 277, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 296, 302, 304, 305, 307, 310, 312, 313, 314, 315, 316, 317, 320, 321, 322, 335, 338, 339, 341, 342, 343, 344, 345, 347, 352, 353, 354, 355, 356, 357, 358, 359, 362, 363, 371, 374, 375, 378, 379, 381, 382, 383, 388, 392, 394, 395, 402, 403, 405, 406, 407, 413, 414, 415, 416, 417, 419, 421, 422, 423, 424, 427, 428, 432, 433, 435, 436, 438, 441, 444, 445, 448, 449, 451, 452, 453, 454, 455, 457, 458, 460, 465, 466, 469, 470, 473, 476, 477, 482, 484, 497, 499, 501, 502, 503, 505, 506, 507, 508, 509, 511, 512, 513, 519, 524, 525, 527, 529, 535, 536, 537, 538, 540, 541, 543, 546, 547, 548, 550, 551, 552, 553, 557, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 580, 581, 583, 584, 585, 586, 590, 591, 595, 596, 601, 602, 605, 609, 610, 611, 612, 615, 620, 621, 627, 633, 635, 646, 647, 648, 650, 651, 652, 653, 654, 656, 661, 662, 664, 668, 670, 671, 672, 673, 674, 675, 676, 678, 680, 681, 685, 687, 688, 690, 692, 696, 699, 705, 706, 709, 711, 714, 715, 719, 720, 721, 726, 732, 733, 734, 735, 736, 737, 742, 746, 764, 765, 766, 770, 772, 774, 778, 779, 782, 783, 784, 785, 786, 787, 788, 791, 792, 795, 797, 798, 801, 805, 807, 808, 812, 813, 818, 819, 821, 822, 825, 830, 832, 834, 835, 836, 838, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 858, 865, 866, 867, 868, 869, 870, 871, 872, 874, 876, 888, 893, 895, 896, 898, 900, 901, 903, 904, 905, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 929, 932, 933, 937, 938, 939, 940, 941, 942, 944, 945, 949, 950, 954, 955, 956, 957, 964, 965, 967, 968, 969, 975, 978, 979, 980, 985, 989, 991, 994, 996, 999, 1001, 1004, 1005, 1007, 1009, 1010, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1021, 1022, 1023, 1033, 1037, 1041, 1046, 1061, 1063, 1068, 1069, 1072, 1073, 1084, 1088, 1089, 1090, 1094, 1098, 1099, 1100, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1115, 1117, 1121, 1125, 1126, 1127, 1131, 1132, 1137, 1138, 1143, 1144, 1147, 1148, 1151, 1152, 1153, 1154, 1157, 1162, 1163, 1169, 1175, 1177, 1193, 1194, 1195, 1196, 1198, 1203, 1204, 1208, 1210, 1211, 1221, 1229], "drop": [1, 107, 165, 166, 208, 263, 271, 296, 360, 362, 363, 471, 472, 550, 746, 773, 827, 832, 855, 917, 919, 920, 1035, 1036, 1088, 1221], "aaa": [1, 40, 296, 593, 643, 645, 1135], "bbb": [1, 40, 296, 643, 645, 858], "ccc": [1, 40, 296, 643, 645], "ddd": [1, 40, 296, 643, 645], "eee": [1, 40, 296, 858], "fff": 1, "column": [1, 15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 70, 71, 79, 80, 87, 89, 91, 93, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 145, 156, 157, 161, 162, 164, 165, 166, 167, 170, 174, 175, 176, 180, 181, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 200, 201, 202, 204, 205, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 232, 233, 234, 235, 237, 238, 239, 240, 246, 247, 248, 249, 253, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 271, 272, 273, 275, 296, 305, 306, 308, 320, 326, 340, 346, 358, 366, 368, 369, 370, 374, 376, 377, 378, 380, 382, 384, 387, 390, 391, 394, 396, 397, 399, 408, 409, 411, 418, 420, 424, 426, 438, 442, 457, 461, 467, 474, 476, 494, 497, 498, 499, 509, 510, 516, 518, 520, 529, 531, 532, 533, 534, 542, 548, 550, 554, 556, 558, 562, 565, 566, 567, 568, 569, 571, 572, 573, 581, 588, 589, 592, 600, 624, 625, 633, 634, 635, 636, 637, 639, 644, 647, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 746, 762, 764, 770, 772, 773, 774, 776, 780, 783, 784, 785, 786, 787, 788, 792, 793, 798, 799, 800, 801, 802, 804, 805, 806, 808, 809, 811, 812, 813, 814, 815, 816, 821, 822, 823, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 843, 855, 858, 862, 863, 880, 891, 893, 899, 915, 926, 927, 928, 932, 934, 935, 939, 941, 944, 946, 949, 952, 953, 956, 958, 959, 961, 970, 971, 973, 982, 993, 996, 1031, 1038, 1040, 1058, 1062, 1088, 1095, 1122, 1134, 1142, 1166, 1167, 1175, 1176, 1177, 1178, 1179, 1181, 1190, 1198, 1199, 1221, 1229], "txt": [1, 17, 129], "utf8": [1, 25, 71, 107, 115, 116, 129, 142, 144, 147, 157, 167, 169, 170, 177, 237, 256, 257, 296, 331, 396, 399, 479, 592, 598, 600, 601, 602, 603, 606, 622, 623, 624, 625, 633, 634, 635, 636, 637, 639, 642, 677, 764, 774, 776, 812, 855, 858, 958, 961, 1021, 1043, 1134, 1140, 1142, 1143, 1144, 1145, 1148, 1164, 1165, 1166, 1167, 1175, 1176, 1177, 1178, 1179, 1181, 1184, 1221], "register_lazyframe_namespac": [1, 80, 81, 83], "dtypeoper": [1, 82], "ldf": [1, 82, 836, 837, 840, 842, 844, 845, 846, 847, 848, 849, 850], "_ldf": [1, 82], "upcast_integer_typ": [1, 82], "with_column": [1, 17, 82, 185, 222, 232, 265, 272, 296, 303, 305, 321, 331, 335, 340, 347, 348, 349, 350, 351, 358, 360, 364, 370, 372, 373, 374, 382, 384, 389, 390, 391, 392, 393, 394, 396, 398, 399, 408, 409, 413, 414, 422, 423, 428, 433, 435, 436, 441, 442, 446, 447, 450, 451, 453, 454, 455, 457, 460, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 505, 507, 510, 525, 527, 529, 530, 531, 532, 533, 534, 537, 538, 542, 543, 546, 547, 548, 550, 553, 557, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 575, 579, 593, 594, 596, 598, 599, 601, 602, 603, 604, 606, 607, 608, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 636, 637, 638, 640, 641, 642, 644, 646, 647, 654, 656, 663, 665, 667, 675, 677, 681, 682, 684, 691, 696, 706, 710, 713, 717, 726, 730, 734, 736, 742, 746, 784, 790, 806, 811, 833, 855, 858, 915, 954, 1037, 1088, 1221], "tp": [1, 82], "cast": [1, 39, 81, 82, 104, 138, 139, 140, 141, 177, 185, 186, 188, 189, 222, 232, 258, 271, 296, 309, 350, 351, 365, 396, 399, 541, 546, 555, 562, 604, 605, 606, 642, 648, 654, 677, 726, 746, 784, 785, 787, 788, 806, 811, 832, 855, 858, 894, 908, 909, 923, 958, 961, 1092, 1146, 1147, 1148, 1184, 1191, 1199, 1204, 1221], "int64": [1, 2, 39, 40, 43, 71, 81, 82, 87, 115, 167, 177, 185, 186, 188, 189, 206, 222, 232, 237, 252, 258, 296, 323, 324, 325, 327, 350, 351, 400, 401, 402, 403, 404, 405, 406, 418, 546, 555, 562, 604, 637, 648, 654, 670, 697, 705, 706, 708, 722, 728, 746, 766, 774, 784, 785, 787, 788, 790, 795, 806, 811, 812, 815, 855, 877, 878, 879, 881, 908, 909, 962, 963, 964, 965, 966, 967, 968, 976, 1092, 1115, 1179, 1191, 1202, 1203, 1204, 1221], "int8": [1, 71, 82, 177, 296, 326, 350, 351, 370, 374, 382, 384, 391, 394, 408, 409, 498, 648, 719, 722, 737, 746, 880, 908, 909, 917, 928, 932, 944, 946, 953, 956, 970, 971, 1062, 1096, 1191, 1208, 1221], "int16": [1, 82, 350, 351, 390, 648, 746, 858, 908, 909, 952, 1191, 1200, 1221], "int32": [1, 82, 87, 104, 107, 120, 144, 145, 185, 186, 188, 189, 203, 232, 296, 335, 377, 378, 380, 387, 411, 562, 654, 722, 746, 784, 785, 787, 788, 811, 855, 858, 935, 939, 941, 949, 973, 1068, 1204, 1221], "b": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 71, 82, 87, 104, 105, 106, 107, 108, 109, 110, 111, 120, 153, 155, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 177, 179, 181, 182, 183, 184, 185, 190, 191, 193, 195, 197, 199, 200, 201, 202, 203, 204, 206, 209, 211, 213, 214, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 230, 231, 233, 234, 235, 236, 237, 238, 242, 245, 246, 247, 248, 250, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 296, 303, 305, 306, 308, 309, 322, 328, 329, 331, 332, 333, 335, 346, 358, 361, 418, 420, 422, 423, 424, 426, 429, 436, 439, 441, 442, 444, 448, 451, 453, 454, 455, 457, 461, 467, 473, 479, 488, 489, 490, 491, 507, 510, 515, 526, 529, 530, 531, 532, 539, 540, 542, 546, 548, 550, 553, 557, 559, 561, 581, 587, 589, 600, 604, 616, 644, 647, 658, 662, 664, 665, 666, 667, 669, 673, 675, 677, 678, 679, 680, 681, 682, 683, 684, 696, 697, 698, 699, 700, 703, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 723, 724, 727, 728, 729, 730, 731, 735, 746, 761, 762, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 792, 794, 795, 796, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 861, 864, 891, 893, 894, 915, 916, 918, 975, 976, 977, 983, 986, 1000, 1008, 1021, 1037, 1052, 1053, 1055, 1088, 1093, 1142, 1146, 1158, 1190, 1203, 1207, 1221, 1228], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 61, 64, 66, 67, 69, 79, 80, 81, 82, 83, 87, 104, 105, 106, 107, 108, 109, 110, 111, 120, 129, 147, 153, 155, 156, 157, 158, 159, 162, 163, 166, 170, 171, 172, 173, 177, 179, 180, 182, 183, 184, 185, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 208, 210, 211, 212, 214, 215, 217, 218, 219, 221, 222, 223, 224, 228, 232, 234, 235, 241, 242, 246, 249, 250, 252, 253, 254, 255, 260, 261, 262, 264, 265, 266, 267, 269, 270, 271, 273, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 302, 303, 304, 305, 307, 309, 322, 323, 324, 325, 326, 328, 334, 335, 338, 339, 340, 346, 347, 348, 349, 350, 351, 357, 359, 361, 366, 370, 390, 391, 392, 393, 396, 399, 401, 404, 406, 407, 409, 413, 414, 419, 420, 422, 423, 426, 427, 428, 429, 431, 432, 433, 434, 435, 437, 438, 439, 440, 441, 442, 454, 455, 457, 460, 461, 462, 470, 471, 472, 473, 474, 476, 478, 487, 488, 489, 490, 491, 492, 493, 496, 498, 502, 505, 507, 510, 525, 527, 529, 530, 531, 532, 533, 534, 537, 538, 541, 542, 544, 545, 546, 547, 548, 551, 553, 557, 558, 559, 561, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 577, 579, 583, 587, 588, 589, 590, 593, 596, 602, 607, 608, 613, 614, 616, 622, 623, 624, 625, 631, 632, 633, 637, 642, 643, 645, 646, 647, 649, 654, 655, 656, 663, 665, 667, 669, 671, 672, 673, 674, 675, 677, 678, 680, 681, 682, 683, 684, 690, 691, 693, 694, 696, 698, 699, 703, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 742, 746, 761, 762, 764, 765, 766, 767, 768, 770, 773, 775, 776, 777, 778, 779, 781, 782, 783, 784, 789, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 806, 807, 808, 811, 817, 819, 820, 821, 822, 823, 824, 826, 828, 829, 830, 831, 832, 835, 836, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 864, 867, 874, 877, 878, 879, 880, 887, 896, 897, 899, 914, 916, 918, 932, 939, 941, 944, 946, 947, 948, 949, 953, 954, 955, 958, 961, 963, 966, 968, 969, 970, 971, 976, 983, 985, 986, 990, 991, 995, 996, 999, 1000, 1002, 1008, 1013, 1014, 1015, 1016, 1020, 1035, 1036, 1037, 1038, 1042, 1051, 1052, 1053, 1055, 1056, 1057, 1060, 1062, 1076, 1084, 1085, 1086, 1090, 1094, 1095, 1098, 1103, 1105, 1106, 1107, 1108, 1109, 1112, 1120, 1125, 1129, 1130, 1135, 1138, 1144, 1149, 1150, 1155, 1156, 1164, 1166, 1167, 1173, 1174, 1175, 1179, 1184, 1190, 1192, 1200, 1203, 1204, 1205, 1212, 1221, 1229], "c": [1, 15, 36, 37, 39, 41, 42, 45, 66, 67, 69, 80, 82, 87, 105, 107, 109, 111, 120, 129, 143, 153, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 170, 174, 177, 181, 182, 183, 184, 185, 191, 193, 195, 203, 204, 206, 209, 211, 213, 214, 216, 218, 219, 220, 221, 223, 224, 225, 227, 230, 231, 233, 236, 237, 238, 245, 246, 247, 248, 250, 252, 255, 256, 257, 258, 259, 261, 262, 265, 266, 268, 269, 271, 275, 279, 280, 281, 283, 284, 286, 289, 290, 296, 303, 305, 306, 308, 310, 328, 358, 442, 457, 467, 479, 507, 510, 529, 530, 542, 546, 550, 581, 624, 633, 658, 665, 667, 669, 675, 677, 678, 680, 681, 682, 684, 698, 699, 700, 703, 707, 710, 712, 713, 714, 715, 716, 717, 718, 727, 729, 730, 731, 735, 742, 746, 762, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777, 780, 783, 784, 792, 795, 802, 805, 807, 809, 810, 812, 813, 819, 820, 821, 826, 829, 832, 834, 836, 840, 841, 842, 844, 845, 847, 850, 851, 855, 858, 893, 915, 916, 1000, 1021, 1088, 1166, 1175, 1207, 1221], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 67, 69, 79, 80, 82, 83, 87, 104, 107, 108, 109, 110, 111, 113, 115, 116, 129, 137, 138, 140, 145, 157, 158, 159, 163, 170, 171, 172, 173, 177, 179, 180, 182, 183, 184, 185, 191, 192, 195, 196, 198, 200, 201, 202, 204, 205, 206, 207, 208, 210, 211, 212, 214, 217, 218, 219, 221, 223, 224, 225, 228, 232, 235, 241, 242, 246, 249, 250, 252, 253, 254, 255, 257, 260, 265, 266, 267, 270, 271, 273, 275, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 296, 303, 304, 307, 334, 335, 339, 340, 357, 358, 359, 360, 361, 366, 367, 392, 394, 396, 399, 400, 406, 414, 417, 418, 421, 423, 427, 428, 432, 433, 435, 437, 439, 442, 446, 450, 451, 453, 454, 455, 457, 460, 462, 470, 473, 474, 476, 478, 481, 484, 487, 488, 489, 490, 491, 492, 495, 496, 525, 527, 529, 538, 541, 542, 543, 544, 545, 546, 550, 551, 553, 557, 558, 559, 561, 562, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 577, 583, 589, 596, 606, 607, 608, 637, 646, 649, 655, 656, 669, 674, 675, 676, 678, 680, 681, 682, 683, 684, 690, 695, 696, 697, 698, 699, 703, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 721, 727, 729, 730, 731, 735, 742, 746, 764, 765, 766, 767, 768, 775, 776, 777, 778, 779, 781, 782, 783, 784, 789, 791, 792, 793, 794, 795, 796, 800, 801, 802, 807, 811, 817, 819, 820, 821, 822, 823, 824, 829, 831, 832, 835, 836, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 864, 867, 871, 874, 887, 897, 899, 906, 914, 915, 916, 917, 918, 924, 925, 926, 927, 928, 954, 956, 958, 959, 961, 962, 968, 970, 971, 976, 980, 983, 984, 995, 996, 999, 1000, 1006, 1012, 1037, 1038, 1042, 1045, 1051, 1052, 1053, 1055, 1056, 1060, 1068, 1076, 1084, 1085, 1086, 1088, 1089, 1090, 1094, 1095, 1098, 1100, 1101, 1102, 1104, 1105, 1108, 1112, 1125, 1131, 1138, 1148, 1149, 1179, 1192, 1205, 1208, 1212, 1221, 1229], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 67, 69, 70, 80, 82, 87, 88, 89, 104, 107, 108, 109, 110, 137, 157, 160, 164, 165, 166, 167, 168, 170, 171, 174, 179, 180, 181, 182, 183, 185, 191, 193, 195, 196, 198, 200, 201, 202, 204, 208, 209, 210, 211, 212, 213, 214, 216, 217, 220, 223, 224, 225, 227, 228, 230, 232, 233, 234, 235, 236, 237, 238, 242, 245, 246, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 262, 264, 265, 267, 268, 269, 271, 273, 280, 289, 290, 296, 303, 307, 328, 335, 350, 351, 361, 366, 370, 384, 389, 390, 391, 408, 409, 412, 414, 422, 423, 429, 432, 437, 439, 441, 462, 463, 464, 474, 488, 489, 490, 491, 510, 538, 541, 549, 552, 553, 554, 558, 560, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 589, 596, 600, 607, 608, 637, 646, 649, 663, 681, 682, 683, 696, 699, 710, 711, 729, 742, 746, 764, 767, 768, 769, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 784, 789, 791, 792, 794, 796, 798, 802, 805, 807, 809, 811, 812, 813, 815, 817, 819, 820, 821, 824, 828, 831, 832, 835, 841, 850, 851, 855, 858, 897, 903, 905, 908, 909, 918, 951, 971, 976, 996, 1027, 1028, 1038, 1052, 1053, 1055, 1076, 1090, 1095, 1097, 1103, 1105, 1107, 1109, 1138, 1142, 1149, 1179, 1191, 1221, 1228, 1229], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 80, 82, 87, 157, 160, 161, 163, 164, 165, 167, 168, 170, 174, 179, 181, 185, 191, 193, 196, 204, 209, 211, 213, 215, 216, 220, 223, 225, 227, 230, 232, 233, 235, 236, 237, 238, 242, 245, 247, 248, 249, 250, 256, 257, 258, 259, 265, 267, 268, 269, 296, 303, 307, 325, 351, 366, 370, 390, 392, 393, 407, 409, 419, 432, 437, 441, 462, 488, 489, 490, 491, 541, 553, 558, 562, 572, 589, 636, 649, 681, 682, 693, 699, 710, 711, 729, 746, 764, 769, 772, 774, 776, 780, 782, 784, 789, 791, 792, 796, 803, 805, 808, 809, 811, 812, 813, 817, 824, 855, 858, 871, 879, 924, 928, 935, 954, 955, 969, 971, 1022, 1052, 1053, 1055, 1094, 1095, 1108, 1178, 1221, 1229], "float32": [1, 15, 37, 58, 82, 157, 177, 256, 257, 296, 708, 764, 855, 858, 1003, 1068, 1221], "lazi": [1, 64, 65, 66, 67, 69, 82, 87, 129, 145, 205, 222, 223, 296, 510, 701, 719, 722, 737, 746, 792, 793, 834, 836, 837, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 858, 1228, 1229], "i16": [1, 82, 370, 390, 409, 581, 746, 858, 952, 1200, 1221, 1229], "i32": [1, 82, 104, 107, 111, 144, 145, 238, 296, 335, 377, 378, 411, 560, 581, 736, 746, 813, 855, 935, 939, 941, 949, 973, 1068, 1097, 1221, 1229], "f32": [1, 82, 157, 256, 296, 581, 746, 764, 855, 858, 1068, 1221], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 61, 64, 66, 80, 81, 82, 83, 87, 104, 105, 106, 107, 108, 109, 110, 111, 117, 129, 156, 158, 159, 160, 164, 166, 167, 170, 171, 173, 174, 179, 180, 182, 183, 184, 185, 191, 193, 195, 197, 199, 201, 204, 205, 208, 209, 214, 215, 216, 221, 222, 223, 224, 227, 228, 230, 231, 232, 236, 238, 242, 245, 246, 248, 250, 253, 259, 261, 262, 263, 264, 265, 266, 267, 269, 271, 273, 274, 275, 276, 279, 280, 281, 282, 283, 286, 289, 290, 296, 303, 305, 309, 323, 324, 325, 327, 328, 334, 340, 347, 348, 349, 350, 351, 358, 360, 361, 373, 398, 400, 401, 402, 403, 404, 405, 406, 418, 420, 421, 423, 424, 425, 426, 428, 429, 431, 432, 434, 437, 439, 440, 441, 442, 446, 447, 450, 451, 453, 454, 455, 457, 459, 462, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 499, 500, 504, 507, 508, 510, 525, 526, 527, 529, 530, 531, 532, 533, 534, 542, 543, 546, 547, 548, 549, 550, 553, 554, 555, 557, 558, 559, 560, 561, 562, 576, 578, 579, 581, 582, 583, 587, 588, 589, 616, 617, 637, 642, 643, 645, 646, 647, 648, 649, 655, 656, 657, 659, 662, 670, 675, 677, 681, 682, 683, 684, 695, 696, 697, 698, 699, 703, 705, 706, 707, 708, 710, 711, 712, 713, 716, 717, 721, 725, 726, 729, 730, 731, 736, 742, 746, 762, 765, 767, 768, 771, 772, 773, 776, 777, 779, 780, 781, 782, 783, 784, 789, 792, 793, 794, 796, 798, 799, 802, 803, 804, 806, 807, 809, 810, 811, 813, 815, 817, 820, 821, 823, 824, 826, 827, 828, 829, 832, 835, 836, 837, 840, 841, 842, 843, 844, 847, 850, 851, 855, 858, 861, 864, 877, 878, 879, 881, 887, 899, 902, 906, 907, 908, 909, 915, 916, 931, 960, 962, 963, 964, 965, 966, 967, 968, 983, 984, 986, 987, 990, 991, 995, 1008, 1035, 1036, 1037, 1038, 1042, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1063, 1070, 1075, 1088, 1093, 1094, 1095, 1097, 1101, 1104, 1108, 1112, 1113, 1116, 1120, 1124, 1125, 1129, 1130, 1179, 1190, 1192, 1199, 1205, 1206, 1212, 1221, 1228, 1229], "register_series_namespac": [1, 80, 81, 82], "math": [1, 15, 83, 359, 671, 672, 746, 903, 905, 1126, 1195, 1221], "mathshortcut": [1, 83], "": [1, 2, 16, 37, 39, 40, 45, 58, 64, 67, 71, 83, 104, 105, 111, 115, 116, 117, 118, 120, 126, 130, 131, 134, 135, 147, 156, 157, 166, 169, 179, 184, 185, 187, 188, 195, 201, 204, 205, 214, 221, 223, 228, 230, 235, 238, 239, 246, 255, 261, 263, 264, 265, 266, 271, 272, 296, 373, 396, 399, 418, 458, 479, 508, 510, 519, 526, 535, 536, 542, 543, 555, 560, 589, 593, 601, 602, 603, 616, 622, 623, 625, 633, 634, 635, 639, 640, 643, 645, 664, 665, 666, 667, 673, 678, 683, 684, 687, 688, 697, 700, 701, 710, 711, 712, 713, 716, 717, 725, 726, 728, 729, 730, 736, 742, 746, 762, 764, 772, 773, 783, 784, 786, 787, 793, 802, 813, 814, 821, 826, 827, 828, 829, 832, 833, 838, 843, 855, 858, 861, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 880, 887, 888, 890, 891, 893, 894, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 909, 914, 915, 916, 917, 918, 919, 920, 922, 924, 928, 930, 931, 934, 936, 937, 941, 943, 947, 948, 952, 955, 956, 958, 961, 969, 971, 972, 973, 977, 978, 979, 980, 984, 985, 986, 987, 989, 990, 991, 994, 995, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1035, 1036, 1038, 1042, 1043, 1045, 1051, 1056, 1057, 1058, 1060, 1062, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1118, 1120, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1135, 1136, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1149, 1150, 1155, 1156, 1158, 1160, 1161, 1164, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1188, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1221], "_": [1, 79, 83, 223, 255, 296, 479, 594, 602, 607, 608, 618, 623, 624, 893, 1136, 1144, 1149, 1150, 1160, 1166, 1198, 1221], "squar": [1, 83, 282, 458, 590, 746, 843, 1023, 1131, 1221], "cube": [1, 83, 338, 547, 746, 895, 1221], "s2": [1, 70, 88, 89, 140, 141, 177, 296, 897, 918, 976, 1008, 1022, 1063, 1076, 1203, 1212, 1221], "renam": [1, 107, 115, 116, 154, 175, 178, 186, 187, 188, 189, 194, 229, 238, 239, 251, 271, 272, 275, 277, 296, 305, 310, 352, 353, 354, 355, 356, 445, 449, 452, 457, 469, 482, 497, 506, 507, 509, 522, 530, 531, 532, 548, 563, 595, 605, 609, 610, 611, 612, 615, 620, 621, 627, 645, 647, 650, 651, 668, 687, 688, 709, 725, 728, 746, 785, 786, 787, 788, 797, 813, 814, 825, 832, 833, 836, 838, 855, 861, 865, 910, 911, 912, 913, 915, 1005, 1011, 1033, 1046, 1061, 1069, 1088, 1099, 1115, 1117, 1137, 1147, 1151, 1152, 1153, 1154, 1157, 1162, 1163, 1169, 1188, 1193, 1194, 1199, 1221], "n2": 1, "in_plac": [1, 193, 244, 269, 296, 1091, 1123, 1130, 1221], "true": [1, 6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 66, 68, 85, 86, 87, 104, 105, 109, 111, 113, 115, 116, 117, 119, 120, 121, 123, 126, 127, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 145, 146, 147, 151, 153, 156, 157, 158, 159, 163, 168, 173, 177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 195, 197, 198, 199, 202, 205, 206, 211, 212, 218, 219, 221, 223, 224, 232, 233, 234, 235, 236, 238, 246, 249, 253, 255, 257, 258, 261, 262, 263, 264, 265, 266, 267, 271, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 296, 304, 305, 306, 307, 308, 309, 310, 321, 329, 330, 332, 333, 335, 347, 348, 349, 350, 351, 358, 365, 367, 370, 373, 376, 378, 385, 386, 389, 390, 392, 393, 394, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 412, 413, 414, 415, 416, 417, 431, 433, 434, 435, 438, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 458, 460, 463, 464, 468, 476, 494, 497, 499, 505, 508, 510, 514, 515, 516, 517, 518, 519, 521, 522, 537, 538, 539, 541, 544, 545, 550, 555, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 581, 586, 588, 589, 592, 593, 594, 596, 597, 599, 604, 606, 615, 623, 624, 626, 633, 634, 635, 637, 639, 643, 645, 657, 660, 663, 664, 665, 666, 667, 668, 670, 673, 674, 678, 690, 691, 692, 693, 694, 699, 705, 706, 711, 719, 722, 728, 733, 734, 736, 737, 746, 762, 764, 765, 766, 767, 768, 775, 777, 779, 783, 784, 785, 786, 787, 788, 792, 793, 795, 797, 798, 802, 807, 811, 813, 815, 819, 821, 826, 827, 828, 829, 832, 837, 840, 842, 844, 845, 846, 847, 848, 849, 850, 855, 858, 862, 863, 865, 875, 883, 888, 891, 894, 897, 898, 915, 922, 923, 925, 928, 930, 931, 932, 934, 938, 939, 941, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 975, 976, 978, 979, 980, 987, 993, 996, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1023, 1027, 1028, 1040, 1058, 1061, 1070, 1076, 1082, 1085, 1086, 1088, 1092, 1106, 1115, 1128, 1130, 1134, 1135, 1136, 1138, 1139, 1141, 1146, 1148, 1157, 1165, 1166, 1168, 1175, 1176, 1177, 1179, 1181, 1202, 1203, 1209, 1211, 1212, 1221, 1228, 1229], "s3": [1, 39, 119, 130, 131, 134, 135, 296, 1063, 1221], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 57, 58, 64, 69, 76, 78, 79, 80, 82, 83, 87, 137, 143, 157, 160, 161, 163, 164, 165, 166, 167, 168, 170, 174, 179, 181, 183, 191, 193, 201, 204, 208, 209, 211, 213, 216, 225, 227, 230, 233, 235, 236, 237, 238, 242, 245, 247, 248, 250, 256, 257, 258, 259, 265, 268, 269, 271, 296, 307, 309, 322, 348, 351, 357, 366, 432, 438, 441, 471, 473, 482, 488, 489, 490, 491, 527, 541, 547, 558, 559, 564, 581, 587, 589, 609, 612, 613, 614, 633, 663, 669, 678, 680, 682, 684, 696, 698, 703, 707, 710, 711, 712, 713, 714, 715, 716, 717, 718, 727, 730, 731, 735, 746, 764, 769, 772, 773, 774, 776, 780, 782, 789, 792, 796, 798, 807, 809, 812, 813, 817, 824, 832, 855, 858, 905, 914, 935, 996, 1022, 1035, 1037, 1046, 1052, 1053, 1055, 1084, 1095, 1098, 1100, 1103, 1105, 1107, 1109, 1151, 1154, 1155, 1156, 1175, 1221, 1229], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 64, 69, 79, 87, 137, 161, 163, 177, 186, 191, 196, 208, 232, 234, 235, 238, 249, 250, 265, 269, 271, 289, 296, 303, 307, 309, 322, 348, 351, 359, 366, 432, 441, 447, 457, 471, 486, 494, 529, 541, 552, 558, 562, 564, 570, 572, 583, 587, 602, 636, 644, 676, 681, 682, 734, 746, 785, 789, 791, 796, 811, 813, 824, 832, 850, 855, 858, 916, 928, 939, 941, 949, 955, 969, 970, 1008, 1022, 1035, 1058, 1095, 1100, 1106, 1108, 1110, 1125, 1144, 1178, 1221], "27": [1, 83, 289, 351, 384, 391, 408, 746, 850, 1221, 1229], "16": [1, 40, 54, 73, 81, 137, 178, 185, 232, 271, 296, 348, 351, 441, 509, 527, 547, 562, 637, 681, 695, 696, 699, 746, 784, 811, 819, 832, 855, 858, 955, 969, 1069, 1084, 1115, 1126, 1179, 1195, 1221], "64": [1, 53, 56, 75, 81, 83, 136, 153, 345, 527, 547, 746, 1084, 1221], "25": [1, 32, 40, 83, 111, 145, 163, 185, 205, 232, 267, 271, 296, 360, 370, 372, 390, 393, 407, 409, 550, 562, 565, 566, 567, 568, 569, 571, 572, 573, 656, 690, 691, 693, 694, 695, 701, 711, 733, 734, 746, 784, 793, 800, 811, 830, 832, 855, 858, 916, 917, 930, 955, 969, 975, 996, 1084, 1088, 1221], "125": [1, 40, 83, 296, 303, 746, 1084, 1221], "inner": [2, 61, 144, 204, 266, 296, 326, 361, 479, 498, 556, 654, 746, 792, 815, 829, 855, 880, 918, 1043, 1062, 1204, 1221], "polarsdatatyp": [2, 61, 115, 116, 129, 142, 143, 144, 145, 147, 154, 157, 208, 296, 310, 335, 418, 506, 508, 509, 510, 557, 604, 605, 668, 697, 708, 709, 710, 711, 719, 722, 737, 742, 746, 764, 855, 858, 865, 888, 1069, 1070, 1094, 1146, 1147, 1221], "pythondatatyp": [2, 61], "width": [2, 31, 40, 115, 116, 129, 296, 498, 855, 1062], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 58, 60, 66, 69, 81, 107, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 126, 127, 129, 130, 132, 133, 134, 135, 136, 143, 144, 145, 146, 147, 148, 149, 154, 156, 158, 163, 169, 172, 173, 175, 179, 181, 183, 190, 191, 192, 194, 195, 200, 202, 203, 205, 207, 208, 209, 211, 216, 218, 219, 229, 230, 233, 236, 241, 242, 243, 245, 247, 248, 250, 251, 256, 259, 261, 265, 268, 270, 273, 280, 290, 296, 303, 328, 334, 357, 360, 415, 416, 417, 421, 422, 423, 429, 431, 432, 434, 436, 437, 438, 462, 468, 471, 476, 477, 478, 487, 492, 493, 496, 497, 498, 499, 541, 543, 546, 547, 550, 553, 556, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 580, 582, 587, 591, 601, 604, 605, 610, 613, 614, 615, 616, 620, 622, 624, 625, 636, 637, 642, 649, 650, 651, 655, 661, 663, 670, 678, 680, 689, 692, 695, 701, 703, 705, 706, 719, 722, 723, 724, 727, 728, 731, 732, 735, 737, 746, 762, 765, 777, 778, 779, 782, 789, 793, 796, 807, 817, 818, 820, 822, 824, 825, 826, 830, 831, 835, 841, 851, 855, 872, 873, 887, 888, 897, 898, 914, 917, 977, 978, 979, 980, 984, 985, 986, 990, 991, 994, 995, 996, 1022, 1024, 1025, 1032, 1033, 1034, 1035, 1040, 1041, 1042, 1051, 1056, 1057, 1060, 1061, 1062, 1063, 1072, 1076, 1077, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1090, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1120, 1121, 1124, 1129, 1132, 1143, 1146, 1147, 1152, 1155, 1156, 1157, 1158, 1162, 1164, 1166, 1167, 1178, 1179, 1184, 1191, 1192, 1193, 1194, 1200, 1205, 1210, 1221, 1228, 1229], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 746, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1221, 1228], "fix": [2, 15, 51, 120, 143, 145, 410, 565, 566, 567, 568, 569, 571, 572, 573, 695, 746, 972], "length": [2, 61, 87, 115, 116, 129, 143, 183, 185, 186, 188, 189, 232, 245, 296, 357, 393, 407, 493, 499, 519, 557, 560, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 587, 607, 608, 610, 612, 613, 614, 620, 622, 642, 719, 722, 723, 724, 737, 746, 784, 785, 787, 788, 807, 811, 820, 855, 897, 914, 924, 955, 969, 1057, 1063, 1081, 1094, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1129, 1149, 1150, 1152, 1154, 1155, 1156, 1162, 1164, 1184, 1221], "paramet": [2, 5, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 58, 59, 60, 61, 64, 65, 66, 67, 69, 71, 79, 80, 81, 82, 83, 85, 86, 87, 89, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 154, 156, 157, 158, 161, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 200, 202, 203, 204, 205, 207, 208, 209, 211, 212, 214, 215, 216, 218, 219, 221, 222, 223, 225, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 245, 246, 247, 248, 249, 250, 251, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 275, 277, 280, 282, 288, 290, 296, 303, 305, 306, 307, 308, 309, 310, 320, 327, 328, 329, 330, 331, 332, 333, 334, 335, 337, 340, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 361, 365, 366, 367, 373, 389, 392, 393, 394, 396, 398, 399, 407, 410, 412, 413, 414, 415, 416, 417, 418, 421, 423, 424, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 441, 442, 447, 458, 460, 462, 467, 468, 469, 470, 471, 473, 476, 477, 478, 479, 487, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 505, 506, 507, 508, 509, 510, 521, 525, 527, 530, 531, 532, 537, 538, 541, 542, 543, 546, 547, 548, 550, 551, 553, 555, 556, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 582, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 639, 642, 643, 645, 646, 647, 649, 650, 651, 655, 656, 657, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 746, 762, 764, 765, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 783, 784, 785, 786, 787, 788, 789, 792, 793, 796, 797, 798, 802, 803, 806, 807, 808, 809, 811, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 838, 841, 843, 849, 851, 855, 858, 861, 862, 863, 864, 865, 874, 881, 882, 883, 884, 885, 886, 887, 888, 892, 898, 899, 900, 901, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 923, 924, 925, 931, 951, 954, 955, 956, 958, 960, 961, 969, 972, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 990, 991, 994, 995, 996, 999, 1000, 1010, 1018, 1019, 1023, 1025, 1031, 1032, 1033, 1034, 1035, 1037, 1040, 1041, 1042, 1043, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1060, 1061, 1062, 1063, 1064, 1069, 1070, 1084, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1121, 1124, 1128, 1129, 1130, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1184, 1185, 1188, 1192, 1193, 1194, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1209, 1210, 1211, 1212, 1221, 1228], "The": [2, 25, 38, 39, 40, 45, 60, 61, 64, 68, 70, 71, 79, 84, 85, 89, 104, 106, 107, 108, 110, 113, 115, 116, 117, 118, 120, 124, 125, 127, 129, 133, 134, 135, 138, 139, 140, 141, 149, 163, 165, 166, 167, 170, 171, 174, 183, 184, 185, 188, 190, 196, 202, 205, 208, 215, 221, 232, 233, 234, 235, 238, 239, 257, 264, 267, 271, 272, 275, 282, 296, 305, 328, 329, 330, 331, 358, 362, 363, 370, 384, 389, 390, 393, 396, 407, 408, 418, 421, 424, 429, 436, 472, 476, 497, 508, 509, 510, 542, 550, 553, 556, 557, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 583, 586, 592, 597, 598, 601, 604, 605, 611, 613, 614, 621, 627, 628, 629, 630, 631, 632, 633, 697, 701, 711, 723, 724, 725, 728, 736, 738, 739, 741, 742, 746, 747, 748, 751, 753, 754, 755, 773, 776, 780, 784, 787, 789, 791, 793, 796, 798, 803, 807, 811, 813, 814, 815, 828, 832, 833, 836, 843, 855, 861, 864, 882, 883, 884, 898, 915, 916, 919, 920, 928, 946, 951, 952, 955, 958, 969, 970, 983, 984, 987, 994, 1036, 1040, 1069, 1070, 1088, 1090, 1094, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1125, 1128, 1134, 1139, 1140, 1146, 1147, 1153, 1155, 1156, 1163, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1213, 1215, 1217, 1221, 1222, 1225, 1226, 1227, 1229], "datatyp": [2, 37, 43, 58, 61, 77, 104, 106, 107, 108, 110, 112, 120, 122, 124, 125, 128, 133, 147, 167, 170, 177, 237, 296, 335, 418, 581, 654, 697, 708, 746, 758, 774, 776, 812, 815, 855, 865, 888, 916, 1010, 1017, 1019, 1021, 1070, 1122, 1204, 1221], "valu": [2, 5, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 58, 61, 62, 64, 68, 70, 77, 79, 87, 89, 107, 109, 115, 116, 117, 118, 120, 129, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 153, 155, 156, 163, 166, 168, 171, 172, 173, 174, 178, 183, 185, 188, 190, 191, 196, 200, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 219, 221, 223, 224, 225, 227, 232, 233, 234, 235, 236, 242, 243, 246, 247, 248, 249, 250, 253, 254, 258, 261, 262, 265, 266, 267, 268, 278, 279, 281, 283, 284, 286, 287, 296, 302, 303, 304, 306, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 351, 357, 358, 360, 362, 363, 366, 370, 384, 390, 408, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 456, 459, 460, 461, 463, 464, 465, 466, 469, 470, 471, 472, 475, 477, 478, 480, 481, 483, 484, 485, 487, 492, 495, 496, 499, 500, 502, 504, 505, 508, 509, 510, 511, 512, 513, 524, 525, 526, 527, 528, 535, 536, 537, 538, 540, 542, 543, 546, 547, 550, 551, 553, 556, 557, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 578, 579, 580, 583, 584, 585, 586, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 601, 604, 605, 606, 613, 614, 616, 617, 619, 622, 624, 625, 626, 642, 644, 646, 648, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 663, 664, 666, 669, 675, 677, 679, 681, 682, 683, 684, 685, 686, 687, 688, 698, 699, 704, 707, 708, 712, 713, 714, 715, 716, 717, 718, 721, 722, 723, 724, 729, 730, 736, 746, 761, 762, 773, 778, 779, 780, 784, 787, 790, 791, 792, 793, 799, 800, 801, 802, 804, 805, 808, 809, 811, 815, 817, 818, 821, 822, 823, 826, 829, 830, 839, 840, 842, 844, 845, 847, 848, 855, 858, 860, 862, 863, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 881, 883, 884, 885, 886, 892, 896, 899, 900, 901, 903, 904, 905, 914, 915, 916, 917, 919, 920, 924, 928, 946, 952, 970, 976, 977, 978, 979, 980, 983, 984, 985, 986, 989, 990, 991, 993, 994, 995, 996, 997, 999, 1000, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1024, 1025, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1039, 1041, 1042, 1044, 1045, 1047, 1048, 1049, 1051, 1056, 1060, 1064, 1069, 1071, 1072, 1074, 1075, 1077, 1079, 1080, 1081, 1083, 1084, 1087, 1088, 1089, 1090, 1094, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1121, 1125, 1126, 1127, 1128, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1155, 1156, 1158, 1159, 1161, 1164, 1166, 1167, 1168, 1184, 1191, 1192, 1193, 1194, 1195, 1196, 1202, 1203, 1204, 1207, 1209, 1211, 1212, 1221, 1229], "within": [2, 61, 138, 139, 140, 141, 184, 185, 186, 187, 188, 189, 190, 205, 232, 267, 296, 436, 553, 562, 589, 746, 784, 785, 787, 788, 793, 811, 855, 994, 1221, 1228], "each": [2, 37, 40, 58, 61, 79, 116, 117, 133, 138, 139, 140, 141, 143, 162, 183, 184, 185, 186, 187, 188, 189, 203, 205, 208, 221, 232, 236, 258, 264, 266, 267, 274, 275, 278, 280, 282, 290, 296, 358, 393, 407, 445, 446, 449, 450, 478, 481, 482, 487, 496, 503, 510, 550, 553, 561, 567, 569, 571, 573, 576, 582, 589, 602, 607, 608, 609, 612, 624, 625, 670, 673, 677, 705, 706, 728, 736, 746, 767, 770, 784, 785, 787, 788, 793, 807, 811, 828, 829, 836, 838, 839, 841, 843, 851, 855, 897, 915, 955, 969, 1005, 1006, 1011, 1012, 1042, 1045, 1046, 1051, 1060, 1088, 1090, 1098, 1112, 1124, 1144, 1149, 1150, 1151, 1154, 1166, 1167, 1190, 1221, 1229], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 79, 80, 81, 82, 83, 87, 88, 89, 104, 105, 106, 107, 108, 109, 110, 111, 113, 116, 117, 118, 119, 120, 126, 129, 130, 131, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 179, 180, 181, 182, 183, 184, 185, 190, 191, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 230, 231, 232, 233, 234, 235, 236, 237, 238, 241, 242, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 335, 336, 338, 339, 340, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 613, 614, 616, 617, 618, 619, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 690, 691, 693, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 721, 722, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 742, 746, 758, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 834, 835, 836, 837, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 861, 862, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 887, 888, 890, 891, 893, 894, 896, 897, 898, 899, 902, 903, 904, 905, 906, 907, 908, 909, 914, 915, 916, 917, 918, 919, 920, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 983, 984, 985, 986, 987, 989, 990, 991, 994, 995, 996, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1024, 1027, 1028, 1035, 1036, 1037, 1038, 1042, 1043, 1045, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1060, 1062, 1063, 1068, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1082, 1084, 1085, 1086, 1088, 1089, 1090, 1093, 1094, 1095, 1096, 1097, 1098, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1116, 1118, 1120, 1124, 1125, 1126, 1127, 1129, 1130, 1132, 1134, 1135, 1136, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1155, 1156, 1158, 1159, 1160, 1161, 1164, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1190, 1191, 1192, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1212, 1221, 1228], "dtype": [2, 15, 40, 48, 70, 71, 82, 88, 89, 104, 106, 108, 110, 111, 115, 116, 117, 118, 124, 125, 126, 129, 142, 143, 144, 145, 147, 153, 157, 185, 186, 188, 189, 205, 232, 256, 257, 258, 265, 296, 310, 335, 336, 350, 351, 410, 418, 431, 467, 476, 497, 504, 506, 508, 509, 510, 555, 556, 562, 565, 566, 567, 568, 569, 571, 572, 573, 581, 604, 605, 633, 648, 650, 654, 659, 668, 670, 697, 701, 705, 706, 708, 709, 710, 711, 719, 722, 728, 737, 746, 764, 784, 785, 787, 788, 793, 811, 855, 858, 877, 878, 880, 888, 890, 891, 893, 898, 908, 909, 916, 917, 972, 976, 977, 1001, 1003, 1007, 1010, 1017, 1019, 1021, 1031, 1040, 1062, 1068, 1069, 1096, 1115, 1122, 1146, 1147, 1175, 1191, 1200, 1202, 1203, 1204, 1208, 1221, 1229], "method": [2, 3, 4, 5, 9, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 68, 70, 71, 72, 73, 74, 75, 76, 77, 78, 86, 87, 105, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 135, 142, 151, 154, 166, 171, 175, 178, 184, 186, 187, 188, 189, 194, 196, 202, 208, 209, 211, 216, 219, 225, 229, 233, 234, 235, 242, 248, 251, 263, 271, 277, 282, 288, 296, 303, 306, 307, 310, 340, 352, 353, 354, 355, 356, 396, 399, 413, 414, 421, 428, 433, 435, 441, 445, 449, 452, 457, 460, 469, 482, 492, 497, 505, 506, 507, 509, 510, 525, 527, 529, 531, 532, 533, 534, 537, 538, 541, 547, 548, 551, 553, 563, 565, 566, 567, 568, 569, 571, 572, 573, 579, 595, 605, 609, 610, 611, 612, 615, 620, 621, 627, 629, 630, 631, 632, 636, 642, 646, 647, 650, 651, 656, 658, 663, 678, 711, 720, 738, 739, 741, 742, 746, 747, 748, 751, 752, 753, 754, 755, 758, 768, 771, 773, 785, 786, 787, 788, 791, 797, 808, 817, 825, 827, 832, 838, 843, 849, 855, 864, 865, 899, 910, 911, 912, 913, 958, 961, 983, 984, 999, 1005, 1011, 1033, 1046, 1056, 1061, 1069, 1070, 1089, 1090, 1099, 1105, 1115, 1117, 1120, 1137, 1147, 1151, 1152, 1153, 1154, 1157, 1162, 1163, 1169, 1178, 1184, 1187, 1193, 1194, 1204, 1211, 1213, 1215, 1217, 1221, 1222, 1225, 1226, 1227], "attribut": [2, 5, 48, 49, 50, 51, 61, 71, 142, 296, 738, 739, 741, 742, 747, 748, 751, 753, 754, 755, 855, 1213, 1215, 1217, 1222, 1225, 1226, 1227], "arg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 72, 73, 74, 75, 76, 77, 78, 174, 222, 258, 296, 546, 673, 700, 746, 780, 806, 855, 1070, 1202, 1203, 1221], "kwarg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 62, 63, 67, 70, 72, 73, 74, 75, 76, 77, 78, 117, 161, 174, 222, 258, 296, 546, 746, 780, 806, 855, 1203, 1221, 1228], "order": [5, 15, 40, 58, 59, 60, 64, 66, 79, 85, 107, 117, 136, 138, 139, 156, 166, 174, 184, 185, 186, 187, 188, 189, 204, 221, 222, 223, 232, 236, 240, 246, 257, 261, 263, 267, 296, 320, 327, 337, 362, 363, 424, 472, 487, 494, 500, 553, 562, 566, 567, 568, 569, 571, 573, 576, 577, 578, 588, 589, 619, 629, 630, 631, 632, 645, 657, 658, 660, 673, 736, 746, 757, 762, 773, 780, 783, 784, 785, 786, 787, 788, 792, 802, 811, 816, 821, 826, 827, 855, 874, 881, 892, 894, 919, 920, 987, 1018, 1036, 1051, 1058, 1064, 1090, 1096, 1112, 1114, 1118, 1130, 1161, 1188, 1206, 1207, 1209, 1221, 1229], "categoricalord": [5, 337, 892], "none": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 58, 59, 60, 62, 64, 66, 67, 69, 79, 86, 89, 104, 106, 107, 108, 109, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 154, 158, 162, 163, 166, 172, 173, 183, 185, 186, 188, 189, 190, 196, 200, 204, 205, 206, 208, 209, 211, 214, 216, 219, 220, 223, 232, 233, 236, 242, 243, 245, 246, 248, 253, 255, 258, 262, 263, 264, 265, 266, 267, 278, 296, 306, 308, 309, 310, 322, 328, 340, 346, 348, 351, 358, 362, 363, 389, 392, 393, 407, 414, 415, 416, 417, 418, 421, 422, 423, 429, 436, 438, 441, 442, 451, 453, 454, 455, 461, 463, 464, 472, 477, 481, 487, 488, 489, 490, 491, 493, 499, 506, 508, 509, 510, 518, 521, 523, 538, 539, 540, 543, 547, 550, 553, 554, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 576, 579, 580, 581, 582, 583, 587, 588, 592, 593, 596, 598, 599, 602, 604, 605, 606, 607, 608, 611, 613, 614, 615, 621, 622, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 637, 639, 642, 643, 644, 645, 654, 664, 665, 666, 667, 668, 675, 677, 679, 684, 690, 691, 692, 693, 694, 695, 697, 698, 707, 708, 709, 710, 711, 713, 717, 722, 723, 724, 728, 730, 732, 733, 734, 736, 746, 765, 766, 768, 770, 773, 778, 779, 784, 785, 787, 788, 791, 792, 793, 795, 797, 798, 802, 805, 811, 815, 817, 818, 819, 820, 821, 827, 828, 829, 834, 838, 839, 843, 855, 858, 862, 863, 865, 872, 873, 898, 899, 915, 916, 918, 919, 920, 936, 937, 938, 943, 954, 955, 969, 974, 975, 978, 979, 980, 984, 985, 986, 988, 994, 996, 998, 999, 1000, 1010, 1015, 1016, 1019, 1022, 1023, 1024, 1027, 1028, 1036, 1041, 1045, 1051, 1052, 1053, 1055, 1057, 1063, 1069, 1070, 1071, 1072, 1073, 1074, 1078, 1088, 1089, 1090, 1094, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1112, 1113, 1116, 1117, 1119, 1120, 1121, 1124, 1125, 1128, 1129, 1132, 1134, 1135, 1138, 1140, 1141, 1144, 1146, 1147, 1148, 1149, 1150, 1153, 1155, 1156, 1157, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1175, 1176, 1177, 1179, 1181, 1184, 1199, 1200, 1201, 1203, 1204, 1210, 1221, 1228], "physic": [5, 70, 89, 115, 116, 205, 296, 337, 654, 746, 763, 792, 793, 855, 892, 893, 1204, 1221], "A": [5, 18, 37, 40, 51, 58, 64, 67, 85, 86, 111, 115, 116, 117, 118, 129, 131, 136, 149, 177, 185, 204, 205, 210, 212, 217, 223, 249, 253, 265, 266, 267, 271, 272, 296, 302, 362, 363, 366, 413, 414, 421, 433, 435, 444, 448, 451, 453, 460, 499, 505, 508, 519, 537, 538, 559, 564, 565, 566, 567, 568, 569, 571, 572, 573, 593, 594, 595, 596, 601, 602, 603, 606, 616, 617, 618, 642, 676, 695, 696, 700, 746, 784, 792, 793, 809, 829, 832, 833, 855, 858, 919, 920, 924, 984, 1100, 1101, 1102, 1104, 1107, 1108, 1109, 1135, 1136, 1137, 1138, 1143, 1144, 1145, 1148, 1158, 1159, 1160, 1184, 1221, 1228], "encod": [5, 51, 78, 115, 116, 129, 255, 296, 330, 430, 597, 644, 746, 883, 1139], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 51, 58, 59, 60, 79, 80, 105, 107, 110, 115, 116, 117, 120, 121, 123, 126, 127, 129, 132, 133, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 151, 153, 160, 166, 176, 184, 185, 186, 187, 188, 189, 190, 202, 205, 209, 211, 212, 214, 216, 232, 236, 238, 245, 248, 249, 255, 257, 262, 263, 265, 271, 296, 306, 308, 310, 340, 358, 410, 436, 447, 476, 487, 488, 489, 490, 491, 493, 497, 499, 508, 509, 510, 546, 550, 557, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 576, 582, 586, 587, 592, 611, 621, 622, 627, 628, 629, 630, 631, 632, 633, 634, 635, 639, 660, 664, 666, 670, 674, 690, 691, 693, 694, 698, 705, 706, 707, 719, 722, 723, 724, 728, 733, 734, 736, 737, 746, 758, 767, 773, 775, 783, 784, 785, 786, 787, 788, 792, 793, 797, 798, 802, 811, 813, 815, 820, 827, 832, 838, 843, 855, 862, 863, 894, 899, 915, 972, 994, 1008, 1040, 1051, 1052, 1053, 1054, 1055, 1057, 1061, 1063, 1069, 1070, 1088, 1094, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1112, 1113, 1117, 1124, 1128, 1129, 1134, 1153, 1163, 1164, 1169, 1170, 1171, 1172, 1175, 1176, 1177, 1181, 1202, 1209, 1221, 1229], "string": [5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 51, 58, 64, 70, 78, 88, 89, 111, 115, 116, 117, 118, 129, 138, 139, 140, 141, 142, 143, 144, 147, 150, 156, 177, 183, 184, 185, 187, 205, 221, 223, 232, 235, 238, 239, 246, 256, 261, 262, 265, 267, 271, 272, 275, 296, 303, 332, 337, 389, 393, 396, 399, 407, 418, 420, 426, 430, 442, 479, 521, 542, 546, 557, 562, 565, 566, 567, 568, 569, 571, 572, 573, 589, 592, 593, 594, 596, 598, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 637, 642, 644, 665, 667, 673, 675, 676, 677, 684, 688, 690, 691, 693, 694, 700, 713, 717, 725, 728, 730, 733, 734, 736, 746, 762, 775, 783, 784, 786, 793, 811, 813, 814, 815, 821, 826, 832, 833, 836, 855, 858, 885, 891, 892, 951, 955, 958, 961, 969, 982, 1000, 1043, 1094, 1133, 1134, 1135, 1136, 1138, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1182, 1183, 1184, 1200, 1221, 1229], "lexic": [5, 337, 858, 892, 894], "appear": [5, 40, 107, 296, 658, 746, 1207, 1221], "default": [5, 9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 60, 79, 86, 87, 104, 106, 107, 108, 109, 110, 111, 115, 116, 118, 120, 124, 125, 126, 127, 129, 138, 140, 142, 143, 144, 145, 146, 147, 151, 163, 166, 169, 184, 185, 186, 187, 188, 189, 190, 202, 204, 205, 212, 214, 221, 223, 232, 233, 234, 235, 236, 242, 247, 249, 255, 263, 265, 266, 268, 273, 296, 305, 306, 308, 337, 358, 392, 393, 407, 412, 414, 415, 416, 417, 436, 476, 487, 492, 493, 497, 499, 501, 509, 518, 535, 536, 538, 543, 550, 553, 557, 562, 565, 566, 567, 568, 569, 571, 572, 573, 576, 579, 582, 591, 592, 601, 611, 615, 621, 622, 627, 628, 629, 630, 633, 634, 635, 637, 639, 660, 661, 664, 666, 670, 674, 678, 680, 690, 691, 692, 693, 694, 698, 701, 705, 706, 707, 708, 719, 722, 727, 728, 733, 734, 735, 737, 746, 767, 768, 773, 775, 783, 784, 785, 786, 787, 788, 792, 793, 802, 811, 815, 817, 822, 827, 830, 855, 862, 863, 892, 899, 915, 916, 954, 955, 969, 975, 977, 978, 979, 980, 994, 1040, 1051, 1056, 1057, 1061, 1063, 1069, 1079, 1080, 1084, 1088, 1090, 1094, 1112, 1120, 1124, 1132, 1134, 1135, 1143, 1153, 1157, 1163, 1164, 1169, 1170, 1171, 1172, 1175, 1176, 1177, 1179, 1181, 1209, 1210, 1221, 1229], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 430, 746, 771, 855], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 473, 602, 1037, 1144], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 43, 45, 58, 59, 60, 79, 85, 86, 87, 88, 89, 104, 105, 109, 111, 115, 116, 120, 121, 123, 125, 126, 127, 129, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 153, 156, 157, 158, 159, 163, 168, 173, 174, 176, 177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 193, 195, 197, 198, 199, 204, 205, 212, 221, 223, 232, 235, 236, 240, 244, 246, 249, 253, 255, 257, 258, 261, 262, 263, 264, 266, 267, 269, 271, 279, 281, 283, 286, 296, 305, 306, 307, 308, 309, 310, 320, 327, 329, 330, 332, 333, 335, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 376, 392, 394, 407, 412, 413, 414, 415, 416, 417, 433, 435, 438, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 458, 460, 463, 464, 468, 473, 476, 487, 494, 497, 500, 505, 506, 508, 510, 514, 515, 516, 517, 518, 521, 537, 538, 539, 541, 544, 545, 550, 553, 555, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 578, 581, 586, 588, 589, 592, 593, 594, 596, 597, 599, 615, 616, 617, 618, 623, 624, 626, 633, 634, 635, 637, 639, 645, 657, 660, 663, 664, 665, 666, 667, 668, 670, 673, 674, 678, 681, 685, 690, 691, 692, 693, 694, 705, 706, 708, 711, 719, 722, 728, 733, 734, 736, 737, 746, 762, 764, 765, 767, 768, 775, 777, 779, 780, 783, 784, 785, 786, 787, 788, 792, 793, 797, 798, 802, 807, 811, 816, 819, 821, 826, 827, 828, 829, 832, 840, 842, 844, 847, 855, 858, 862, 863, 865, 874, 881, 883, 888, 891, 894, 898, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 934, 954, 956, 969, 975, 976, 978, 979, 980, 987, 993, 996, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1027, 1028, 1032, 1033, 1034, 1037, 1040, 1051, 1058, 1061, 1064, 1070, 1082, 1085, 1086, 1088, 1090, 1091, 1092, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1113, 1115, 1116, 1117, 1118, 1123, 1128, 1130, 1134, 1135, 1136, 1138, 1139, 1141, 1157, 1158, 1159, 1160, 1165, 1166, 1168, 1175, 1176, 1177, 1179, 1181, 1201, 1202, 1203, 1206, 1209, 1211, 1221, 1228], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 58, 257, 296, 574, 636, 746, 855, 1110, 1178, 1221], "temporari": 6, "remov": [6, 9, 90, 115, 116, 129, 153, 164, 209, 211, 216, 248, 255, 296, 310, 407, 418, 507, 510, 530, 611, 621, 627, 628, 629, 630, 631, 632, 697, 746, 772, 855, 915, 955, 969, 1088, 1153, 1163, 1169, 1170, 1171, 1172, 1173, 1174, 1177, 1211, 1221], "onc": [6, 67, 115, 116, 120, 149, 208, 234, 236, 275, 296, 487, 510, 576, 631, 632, 746, 763, 836, 855, 1051, 1070, 1112, 1173, 1174, 1221], "stabil": [6, 190, 296, 436, 746, 994, 1221], "current": [6, 7, 8, 10, 11, 35, 66, 105, 111, 117, 118, 127, 134, 158, 159, 204, 205, 296, 372, 393, 499, 543, 746, 758, 765, 766, 767, 792, 793, 855, 858, 898, 902, 922, 930, 955, 1084, 1221, 1228], "consid": [6, 86, 88, 89, 115, 116, 129, 135, 138, 139, 140, 141, 166, 168, 178, 201, 208, 214, 234, 263, 265, 266, 296, 310, 340, 357, 393, 438, 508, 510, 565, 566, 567, 568, 569, 571, 572, 573, 681, 699, 742, 746, 768, 773, 789, 796, 802, 827, 829, 843, 855, 891, 894, 899, 914, 955, 976, 996, 1010, 1070, 1088, 1113, 1115, 1116, 1221], "beta": 6, "cfg": [7, 9, 22, 151], "previous": [7, 8], "save": [7, 8, 11, 185, 205, 232, 267, 296, 364, 372, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 695, 733, 734, 742, 746, 758, 784, 793, 811, 855, 930, 951, 955, 969], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 79, 115, 117, 119, 120, 121, 123, 127, 130, 131, 132, 134, 135, 137, 142, 143, 144, 145, 146, 147, 148, 185, 200, 205, 214, 253, 257, 262, 266, 296, 458, 563, 565, 566, 567, 568, 569, 571, 572, 573, 586, 594, 618, 622, 660, 708, 728, 736, 746, 758, 784, 792, 793, 802, 815, 829, 855, 858, 1019, 1023, 1099, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1128, 1136, 1160, 1164, 1199, 1209, 1221], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 39, 40, 58, 64, 65, 66, 71, 79, 87, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 157, 163, 164, 169, 171, 176, 183, 185, 188, 202, 203, 204, 205, 206, 214, 223, 227, 232, 233, 235, 236, 238, 239, 255, 262, 263, 265, 266, 267, 296, 347, 358, 359, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 414, 418, 430, 441, 458, 487, 499, 510, 535, 536, 538, 543, 546, 550, 552, 562, 564, 565, 566, 568, 571, 572, 573, 576, 589, 601, 602, 604, 605, 615, 629, 630, 631, 632, 633, 634, 635, 639, 658, 671, 672, 675, 689, 690, 691, 692, 693, 695, 722, 732, 733, 734, 742, 745, 746, 764, 771, 772, 777, 784, 787, 792, 793, 802, 809, 811, 813, 814, 827, 829, 834, 855, 858, 915, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 977, 983, 1019, 1023, 1051, 1063, 1079, 1080, 1081, 1084, 1088, 1100, 1112, 1143, 1144, 1146, 1147, 1157, 1173, 1174, 1175, 1176, 1177, 1181, 1212, 1221, 1228, 1229], "json": [7, 8, 10, 11, 43, 44, 124, 125, 131, 133, 296, 430, 523, 604, 605, 606, 644, 746, 758, 771, 815, 855, 1146, 1147, 1148], "produc": [7, 8, 144, 145, 147, 204, 296, 469, 470, 518, 710, 792, 797, 798, 855, 1033, 1034], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 58, 59, 60, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 171, 296, 523, 771, 815, 855, 983, 1221], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 296, 523, 578, 606, 746, 771, 815, 819, 855, 1118, 1148, 1221, 1229], "load": [8, 10, 11, 107, 109, 117, 119, 120, 126, 130, 131, 146, 148, 296, 746, 758, 789, 796, 855, 1229], "reset": [9, 151], "state": [9, 85, 86, 97, 681, 685, 758, 767, 768, 775, 777, 807, 819, 855], "note": [9, 15, 25, 39, 40, 64, 68, 69, 70, 79, 86, 88, 89, 104, 105, 106, 108, 110, 111, 115, 117, 118, 119, 120, 124, 125, 127, 130, 131, 135, 138, 140, 143, 145, 147, 149, 151, 153, 156, 161, 163, 172, 185, 186, 188, 189, 190, 200, 201, 202, 204, 205, 208, 219, 222, 223, 232, 233, 234, 235, 242, 254, 257, 261, 262, 266, 267, 271, 296, 340, 350, 351, 362, 363, 385, 386, 389, 393, 407, 436, 442, 451, 453, 457, 473, 476, 492, 497, 499, 510, 529, 531, 532, 533, 534, 548, 557, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 586, 593, 601, 602, 603, 607, 608, 616, 628, 629, 630, 633, 642, 647, 648, 656, 679, 681, 690, 691, 693, 694, 695, 699, 708, 719, 721, 722, 733, 734, 736, 737, 742, 746, 757, 762, 768, 777, 778, 784, 785, 787, 788, 789, 793, 796, 809, 811, 817, 819, 821, 826, 829, 832, 855, 899, 908, 909, 916, 919, 920, 947, 948, 951, 969, 993, 994, 1037, 1040, 1056, 1061, 1070, 1094, 1106, 1113, 1116, 1120, 1123, 1128, 1135, 1143, 1144, 1145, 1149, 1150, 1158, 1170, 1171, 1172, 1175, 1184, 1191, 1202, 1221, 1228], "oper": [9, 39, 40, 70, 87, 89, 94, 95, 104, 106, 107, 108, 109, 110, 115, 117, 127, 154, 159, 171, 174, 177, 184, 187, 194, 195, 206, 208, 215, 219, 221, 222, 226, 230, 232, 235, 236, 242, 252, 257, 258, 262, 265, 274, 275, 296, 303, 304, 307, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 413, 414, 428, 433, 435, 457, 460, 487, 488, 489, 490, 491, 492, 499, 505, 522, 525, 527, 529, 531, 532, 537, 538, 541, 547, 548, 555, 562, 576, 579, 646, 647, 656, 663, 664, 666, 676, 677, 696, 746, 758, 766, 777, 783, 786, 789, 792, 796, 802, 803, 811, 817, 836, 855, 902, 906, 907, 908, 909, 910, 911, 912, 913, 914, 983, 1051, 1052, 1053, 1054, 1055, 1056, 1092, 1112, 1120, 1197, 1201, 1202, 1203, 1211, 1221], "environ": [9, 35, 127, 134, 146, 149], "ani": [9, 37, 39, 40, 45, 48, 58, 84, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 119, 120, 121, 123, 124, 125, 127, 129, 130, 131, 132, 134, 142, 144, 145, 147, 151, 154, 161, 166, 171, 173, 174, 177, 200, 202, 203, 208, 212, 221, 222, 233, 234, 235, 249, 253, 254, 257, 258, 263, 265, 266, 296, 303, 306, 307, 310, 335, 394, 413, 414, 423, 428, 431, 433, 435, 447, 460, 467, 473, 505, 506, 508, 509, 510, 522, 525, 527, 531, 532, 537, 538, 541, 542, 546, 548, 557, 558, 563, 564, 577, 592, 594, 615, 629, 630, 631, 632, 633, 634, 635, 637, 639, 646, 647, 650, 656, 663, 664, 667, 668, 678, 708, 711, 736, 746, 773, 779, 780, 806, 827, 829, 855, 858, 862, 865, 956, 983, 986, 990, 1008, 1022, 1031, 1037, 1069, 1070, 1094, 1095, 1099, 1100, 1113, 1114, 1117, 1134, 1136, 1157, 1175, 1176, 1177, 1179, 1181, 1193, 1201, 1202, 1203, 1221, 1228, 1229], "local": [9, 39, 117, 119, 130, 131, 134, 147, 296, 407, 544, 545, 746, 891, 893, 926, 927, 959, 969, 1085, 1086, 1221], "non": [9, 37, 39, 40, 49, 58, 79, 109, 136, 162, 186, 189, 203, 214, 232, 238, 239, 242, 262, 266, 271, 272, 296, 340, 346, 442, 499, 509, 543, 557, 562, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 595, 596, 602, 607, 642, 665, 667, 675, 676, 677, 679, 684, 688, 695, 713, 717, 723, 724, 725, 728, 730, 746, 770, 785, 788, 802, 811, 813, 814, 817, 829, 832, 833, 855, 899, 916, 1000, 1063, 1084, 1094, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1120, 1137, 1138, 1144, 1149, 1184, 1202, 1221], "env": [9, 148], "back": [9, 79, 171, 258, 296, 542, 640, 746, 815, 855, 983, 1182, 1203, 1221], "contain": [10, 37, 38, 39, 40, 58, 79, 84, 105, 106, 109, 111, 117, 119, 130, 131, 138, 139, 144, 156, 166, 185, 188, 203, 219, 223, 261, 266, 278, 296, 306, 308, 310, 332, 333, 447, 509, 510, 592, 599, 601, 603, 606, 625, 626, 642, 664, 666, 679, 711, 746, 762, 773, 784, 787, 807, 826, 829, 839, 855, 858, 862, 863, 915, 1069, 1076, 1088, 1134, 1141, 1143, 1145, 1148, 1167, 1168, 1184, 1197, 1221], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 296, 815, 855], "leav": [11, 214, 296, 499, 802, 855], "directli": [11, 35, 66, 86, 117, 145, 147, 151, 235, 296, 415, 416, 417, 557, 722, 746, 768, 855, 978, 979, 980, 1094, 1221, 1229], "json_fil": 11, "ascii": [12, 25, 594, 607, 608, 610, 618, 620, 642, 1136, 1149, 1150, 1152, 1160, 1162, 1184], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 58, 115, 116, 129, 296, 389, 600, 602, 607, 608, 610, 611, 612, 613, 614, 620, 621, 623, 624, 627, 628, 629, 630, 631, 632, 642, 807, 855, 858, 951, 1142, 1144, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1162, 1163, 1165, 1166, 1169, 1170, 1171, 1172, 1184], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 183, 296], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 65, 66, 67, 69, 104, 111, 115, 116, 119, 120, 129, 130, 131, 204, 223, 252, 258, 265, 266, 296, 792, 829, 855, 1203, 1221, 1228], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 43, 45, 58, 59, 60, 64, 79, 85, 86, 105, 109, 111, 115, 116, 117, 120, 121, 123, 125, 126, 127, 129, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 153, 156, 157, 158, 159, 163, 168, 177, 182, 183, 184, 185, 186, 187, 188, 189, 193, 195, 197, 198, 199, 202, 204, 205, 206, 211, 212, 218, 219, 221, 223, 224, 232, 233, 234, 235, 236, 240, 244, 246, 249, 253, 255, 257, 258, 261, 262, 263, 266, 267, 269, 271, 279, 281, 283, 284, 286, 289, 296, 306, 307, 308, 310, 320, 327, 329, 332, 333, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 376, 392, 394, 407, 412, 413, 414, 415, 416, 417, 435, 438, 442, 443, 444, 446, 447, 448, 450, 451, 453, 454, 455, 456, 458, 460, 463, 464, 468, 473, 476, 487, 494, 497, 500, 505, 506, 508, 510, 514, 517, 519, 521, 537, 538, 539, 541, 544, 545, 550, 553, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 578, 581, 586, 588, 589, 592, 593, 594, 596, 599, 604, 615, 616, 617, 618, 623, 624, 626, 633, 634, 635, 637, 657, 660, 663, 664, 665, 666, 667, 670, 673, 674, 678, 681, 685, 690, 691, 692, 693, 694, 705, 706, 708, 719, 722, 728, 733, 734, 736, 737, 746, 762, 764, 765, 766, 767, 768, 775, 777, 783, 784, 785, 786, 787, 788, 792, 793, 795, 797, 798, 807, 811, 816, 819, 821, 826, 827, 829, 832, 840, 842, 844, 845, 847, 850, 855, 858, 862, 863, 874, 881, 888, 891, 894, 897, 898, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 934, 954, 956, 969, 975, 976, 978, 979, 980, 987, 993, 1000, 1001, 1002, 1004, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1023, 1027, 1028, 1037, 1040, 1051, 1058, 1061, 1064, 1076, 1082, 1085, 1086, 1088, 1090, 1091, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1115, 1118, 1123, 1128, 1130, 1134, 1135, 1136, 1138, 1141, 1146, 1157, 1158, 1159, 1160, 1165, 1166, 1168, 1175, 1176, 1177, 1179, 1202, 1203, 1206, 1209, 1211, 1212, 1221, 1228], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 111], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 58, 114, 115, 116, 117, 129, 135, 170, 183, 202, 214, 234, 235, 254, 294, 296, 393, 396, 399, 521, 633, 634, 635, 639, 695, 776, 802, 815, 855, 958, 961, 1175, 1176, 1177, 1181, 1220], "style": [12, 25, 40, 117, 127, 223, 296], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 303, 602, 616, 629, 746, 858, 1144, 1158], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 303, 596, 602, 746, 1138, 1144, 1199, 1221], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 61, 64, 79, 81, 83, 87, 105, 107, 135, 145, 158, 159, 161, 163, 164, 167, 172, 173, 177, 182, 183, 184, 185, 195, 196, 204, 205, 210, 211, 212, 213, 217, 223, 224, 225, 245, 246, 247, 249, 268, 271, 275, 279, 281, 283, 284, 285, 286, 288, 289, 296, 302, 305, 312, 313, 314, 315, 316, 317, 335, 338, 339, 343, 344, 345, 357, 358, 359, 362, 363, 394, 412, 413, 414, 415, 416, 417, 418, 419, 422, 423, 427, 428, 433, 435, 441, 451, 453, 454, 455, 457, 458, 460, 473, 484, 501, 502, 503, 505, 511, 512, 513, 524, 527, 529, 535, 536, 537, 538, 543, 547, 550, 551, 552, 553, 557, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 584, 585, 586, 590, 591, 652, 653, 656, 661, 671, 672, 675, 676, 678, 680, 696, 697, 711, 714, 715, 726, 727, 735, 742, 746, 765, 772, 778, 779, 783, 784, 791, 792, 793, 800, 801, 808, 821, 822, 830, 832, 834, 836, 840, 842, 844, 845, 846, 847, 849, 850, 855, 858, 866, 867, 868, 869, 870, 871, 895, 896, 903, 904, 905, 914, 915, 916, 919, 920, 956, 978, 979, 980, 985, 989, 996, 999, 1037, 1084, 1088, 1090, 1094, 1100, 1102, 1103, 1105, 1106, 1107, 1109, 1110, 1111, 1126, 1127, 1131, 1195, 1196, 1208, 1221, 1229], "multi": [13, 40, 115, 116, 296, 418, 601, 746, 1143], "automat": [13, 66, 69, 104, 106, 107, 108, 110, 111, 115, 116, 117, 118, 120, 124, 125, 129, 133, 145, 147, 149, 238, 271, 296, 509, 557, 628, 629, 630, 746, 813, 832, 855, 1069, 1094, 1170, 1171, 1172, 1221, 1228], "turn": [13, 58, 59, 60, 85, 86, 115, 116, 129, 640, 767, 768, 775, 777, 797, 798, 807, 855, 1182], "struct": [13, 111, 219, 238, 260, 264, 271, 296, 358, 438, 499, 550, 560, 561, 603, 604, 624, 625, 660, 681, 682, 684, 685, 686, 710, 746, 813, 828, 832, 843, 855, 915, 1063, 1088, 1097, 1145, 1146, 1164, 1166, 1167, 1221], "v": [13, 14, 45, 66, 67, 169, 296, 577, 746, 1114, 1221], "v2": [13, 121, 132], "out": [13, 19, 58, 59, 60, 111, 137, 232, 235, 296, 330, 476, 477, 497, 593, 597, 736, 811, 855, 883, 1040, 1041, 1061, 1135, 1139], "separ": [14, 15, 29, 32, 37, 58, 113, 115, 116, 129, 221, 223, 255, 262, 264, 296, 310, 474, 479, 510, 600, 677, 681, 682, 685, 686, 746, 828, 855, 1038, 1043, 1142, 1190, 1198, 1221], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 60, 64, 116, 184, 185, 186, 187, 188, 189, 203, 219, 221, 223, 232, 235, 265, 267, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296, 304, 357, 420, 426, 431, 434, 473, 508, 510, 518, 520, 542, 553, 561, 562, 588, 589, 593, 601, 602, 603, 616, 660, 711, 746, 783, 784, 785, 786, 787, 788, 811, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855, 858, 914, 1037, 1098, 1135, 1143, 1144, 1145, 1158, 1209, 1221], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 858], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 115, 116, 138, 139, 140, 141, 185, 186, 188, 189, 204, 205, 232, 266, 296, 358, 415, 416, 417, 442, 488, 489, 490, 491, 550, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 586, 620, 675, 690, 691, 693, 694, 733, 734, 746, 784, 785, 787, 788, 792, 793, 811, 829, 855, 915, 978, 979, 980, 1000, 1052, 1053, 1054, 1055, 1088, 1114, 1128, 1162, 1221], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 58, 296, 855], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 116, 137, 138, 140, 167, 183, 184, 203, 206, 256, 274, 296, 440, 521, 746, 767, 790, 855, 1008, 1200, 1221, 1229], "876": 14, "543": 14, "010": [14, 637, 1179], "101": [14, 32, 366, 637, 1179, 1229], "000": [14, 15, 32, 40, 296, 1229], "123": [14, 596, 602, 617, 642, 736, 858, 1138, 1144, 1159, 1184, 1199, 1221], "456": [14, 15, 366, 858, 924, 1199, 1221], "780": 14, "precis": [15, 16, 37, 40, 48, 49, 58, 117, 202, 234, 235, 254, 296, 365, 636, 855, 858, 923, 1178], "control": [15, 16, 40, 69, 86, 87, 143, 296, 557, 746, 768, 775, 855, 1094, 1221], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 58, 60, 70, 79, 89, 98, 104, 106, 108, 110, 113, 115, 116, 118, 120, 124, 125, 126, 127, 129, 133, 134, 136, 143, 145, 146, 148, 149, 156, 158, 162, 169, 170, 172, 173, 183, 191, 202, 203, 206, 207, 218, 219, 236, 242, 243, 247, 250, 261, 265, 268, 278, 280, 290, 296, 321, 328, 334, 346, 357, 358, 360, 374, 377, 382, 384, 394, 408, 409, 411, 415, 416, 417, 421, 423, 429, 437, 451, 453, 461, 462, 471, 478, 481, 482, 487, 492, 496, 499, 546, 550, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 575, 576, 579, 580, 582, 591, 607, 608, 609, 612, 616, 624, 625, 636, 649, 655, 661, 678, 679, 680, 695, 703, 723, 724, 727, 731, 735, 746, 762, 765, 770, 776, 777, 778, 779, 789, 796, 807, 817, 818, 822, 824, 826, 830, 839, 841, 851, 855, 887, 898, 914, 915, 917, 932, 935, 944, 946, 956, 970, 971, 973, 977, 978, 979, 980, 984, 986, 995, 1007, 1024, 1025, 1035, 1042, 1045, 1046, 1051, 1056, 1060, 1063, 1076, 1077, 1088, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1120, 1121, 1124, 1132, 1149, 1150, 1151, 1154, 1158, 1166, 1167, 1178, 1192, 1205, 1210, 1221, 1229], "place": [15, 16, 37, 58, 156, 165, 171, 193, 194, 195, 223, 228, 230, 235, 243, 246, 261, 269, 296, 320, 479, 580, 588, 746, 762, 818, 821, 826, 855, 864, 874, 983, 1043, 1091, 1121, 1130, 1221], "float": [15, 16, 37, 40, 52, 53, 58, 120, 135, 138, 139, 140, 141, 142, 145, 147, 153, 163, 169, 172, 205, 225, 236, 243, 288, 296, 339, 358, 362, 363, 394, 412, 413, 414, 415, 416, 417, 422, 427, 433, 435, 441, 444, 448, 451, 453, 454, 455, 460, 468, 487, 501, 505, 511, 524, 535, 536, 537, 538, 547, 550, 551, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 574, 576, 656, 720, 722, 746, 778, 793, 808, 818, 819, 849, 855, 858, 888, 896, 915, 916, 918, 919, 920, 956, 975, 977, 978, 979, 980, 985, 989, 996, 1007, 1023, 1032, 1033, 1034, 1051, 1065, 1072, 1073, 1079, 1080, 1087, 1088, 1089, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1110, 1112, 1113, 1114, 1116, 1117, 1128, 1132, 1191, 1202, 1210, 1221, 1229], "point": [15, 16, 40, 52, 53, 145, 147, 172, 185, 188, 206, 296, 339, 358, 362, 394, 422, 427, 451, 453, 487, 510, 574, 576, 746, 778, 784, 787, 797, 798, 809, 855, 896, 915, 919, 956, 985, 989, 1007, 1051, 1088, 1110, 1112, 1202, 1221], "standard": [15, 40, 247, 257, 296, 377, 416, 571, 586, 591, 606, 727, 742, 746, 822, 855, 935, 979, 1128, 1132, 1148, 1221, 1229], "behaviour": [15, 79, 87, 166, 296, 593, 601, 602, 616, 656, 746, 773, 855, 1135, 1143, 1144, 1158], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 58, 60, 69, 70, 71, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 115, 116, 117, 120, 121, 123, 126, 127, 129, 130, 132, 133, 135, 138, 139, 140, 141, 145, 147, 154, 156, 167, 169, 171, 173, 177, 185, 186, 188, 189, 204, 208, 222, 232, 233, 235, 238, 239, 242, 246, 255, 257, 261, 263, 266, 272, 296, 340, 415, 416, 417, 423, 492, 499, 509, 519, 546, 557, 561, 562, 579, 588, 589, 594, 607, 608, 618, 628, 629, 630, 633, 673, 681, 685, 699, 746, 762, 779, 784, 785, 787, 788, 792, 797, 798, 811, 813, 814, 817, 821, 826, 827, 829, 833, 855, 899, 977, 978, 979, 980, 983, 986, 1056, 1069, 1094, 1098, 1113, 1116, 1120, 1136, 1149, 1150, 1160, 1170, 1171, 1172, 1175, 1198, 1221], "larger": [15, 58, 59, 60, 678, 767, 855], "should": [15, 38, 40, 58, 59, 60, 87, 104, 106, 108, 110, 119, 124, 125, 127, 129, 133, 135, 142, 143, 147, 156, 164, 202, 205, 208, 233, 234, 235, 254, 255, 261, 264, 282, 296, 304, 337, 357, 410, 418, 451, 453, 473, 510, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 577, 586, 660, 695, 697, 708, 711, 723, 724, 736, 746, 762, 772, 777, 792, 793, 798, 815, 819, 821, 826, 828, 855, 858, 892, 914, 972, 1037, 1070, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1114, 1128, 1209, 1221], "ensur": [15, 40, 118, 144, 145, 147, 184, 187, 221, 233, 296, 442, 508, 746, 783, 786, 797, 798, 855, 858, 1202, 1221], "awar": [15, 202, 234, 235, 254, 296, 594, 618, 777, 855, 1136, 1160, 1177], "both": [15, 30, 37, 58, 70, 88, 89, 185, 186, 188, 189, 204, 205, 215, 232, 233, 266, 296, 309, 340, 358, 418, 442, 550, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 742, 746, 757, 784, 785, 787, 788, 792, 793, 803, 811, 829, 855, 899, 1000, 1010, 1221], "limit": [15, 16, 60, 117, 118, 129, 173, 296, 328, 341, 342, 423, 429, 746, 779, 789, 855, 900, 901, 986, 1221], "represent": [15, 43, 44, 256, 296, 337, 370, 374, 377, 378, 380, 382, 384, 387, 390, 391, 394, 408, 409, 411, 654, 746, 775, 795, 855, 892, 893, 928, 932, 934, 935, 939, 941, 944, 946, 949, 952, 953, 956, 970, 971, 973, 1200, 1204, 1221], "look": [15, 185, 296, 329, 499, 508, 746, 784, 855, 882], "appli": [15, 25, 37, 40, 58, 64, 87, 129, 142, 145, 147, 177, 208, 222, 282, 296, 368, 369, 370, 374, 376, 377, 378, 380, 382, 384, 387, 390, 391, 394, 397, 408, 409, 411, 416, 417, 506, 508, 510, 546, 563, 565, 566, 568, 572, 616, 633, 634, 635, 639, 681, 682, 685, 686, 699, 709, 710, 711, 721, 736, 746, 789, 796, 797, 798, 806, 843, 855, 899, 926, 927, 928, 932, 934, 935, 939, 941, 944, 946, 949, 952, 953, 956, 959, 970, 971, 973, 979, 980, 1070, 1099, 1101, 1102, 1104, 1108, 1158, 1175, 1176, 1177, 1181, 1221], "float64": [15, 37, 40, 58, 107, 115, 145, 167, 169, 177, 237, 258, 271, 296, 312, 313, 314, 315, 316, 317, 335, 343, 344, 345, 359, 394, 418, 451, 453, 552, 584, 585, 652, 653, 697, 719, 722, 737, 746, 774, 812, 832, 855, 858, 956, 1203, 1208, 1221], "doe": [15, 37, 39, 58, 79, 87, 98, 104, 106, 107, 108, 110, 111, 115, 116, 117, 119, 120, 124, 125, 129, 130, 133, 135, 159, 171, 190, 203, 204, 233, 234, 235, 263, 271, 296, 410, 436, 499, 509, 629, 630, 658, 742, 746, 766, 777, 792, 798, 827, 832, 855, 902, 972, 983, 993, 994, 1069, 1123, 1211, 1221], "cover": 15, "nativ": [15, 115, 117, 120, 121, 123, 127, 143, 202, 208, 234, 235, 254, 282, 296, 510, 711, 746, 752, 843, 1070, 1221, 1229], "level": [15, 40, 45, 60, 129, 132, 133, 134, 145, 177, 208, 219, 296, 424, 746, 789, 796, 855], "larg": [15, 16, 19, 79, 117], "maximum": [15, 31, 37, 58, 115, 116, 129, 135, 143, 144, 145, 147, 183, 185, 209, 210, 296, 465, 511, 535, 544, 553, 712, 713, 746, 784, 799, 855, 936, 1029, 1071, 1079, 1085, 1090, 1221], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 79, 104, 105, 108, 109, 129, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 157, 163, 164, 166, 183, 185, 203, 205, 214, 221, 223, 255, 257, 258, 265, 267, 296, 359, 364, 365, 366, 367, 370, 372, 373, 374, 376, 377, 378, 382, 384, 385, 386, 389, 390, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 564, 565, 566, 568, 571, 572, 573, 671, 672, 690, 691, 693, 695, 733, 734, 742, 746, 758, 764, 768, 771, 772, 773, 784, 793, 798, 802, 815, 855, 903, 905, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 1004, 1009, 1013, 1014, 1019, 1100, 1126, 1195, 1221, 1229], "pi": [15, 359, 746, 903, 905, 1126, 1195, 1221], "e": [15, 36, 37, 39, 41, 42, 45, 58, 105, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128, 132, 135, 183, 191, 201, 250, 252, 257, 265, 296, 303, 310, 412, 418, 442, 501, 510, 515, 516, 518, 519, 520, 521, 522, 581, 586, 629, 630, 697, 711, 736, 746, 771, 795, 809, 855, 858, 975, 976, 1000, 1115, 1128, 1202, 1221, 1229], "const": 15, "15": [15, 40, 137, 144, 185, 195, 208, 232, 296, 357, 360, 374, 382, 386, 393, 407, 546, 562, 572, 605, 682, 733, 746, 784, 811, 855, 914, 917, 955, 969, 1147, 1221], "141592653589793": 15, "718281828459045": [15, 412, 501, 746, 975, 1065, 1221], "align": [15, 20, 21, 40, 79, 87, 296], "numer": [15, 21, 37, 40, 58, 157, 164, 205, 214, 223, 265, 296, 303, 340, 428, 442, 503, 525, 527, 547, 556, 581, 603, 642, 646, 656, 746, 758, 764, 772, 793, 802, 855, 858, 899, 916, 976, 1000, 1017, 1115, 1122, 1145, 1184, 1202, 1221, 1229], "cleanli": [15, 183, 296], "line": [15, 25, 40, 115, 116, 120, 129, 183, 197, 199, 296, 601, 1143], "up": [15, 40, 71, 115, 116, 118, 129, 202, 205, 234, 235, 254, 296, 310, 339, 510, 746, 792, 793, 798, 855, 858, 896, 1221], "xx": [15, 80, 82, 144, 147, 858], "yy": [15, 80, 82, 144, 147, 858], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 60, 105, 137, 145, 232, 296, 305, 385, 386, 389, 393, 407, 441, 543, 553, 562, 564, 572, 587, 663, 729, 734, 746, 767, 768, 789, 796, 807, 811, 824, 855, 858, 951, 955, 969, 1070, 1100, 1221], "111": 15, "100": [15, 22, 32, 40, 107, 110, 115, 116, 124, 129, 133, 242, 296, 557, 579, 594, 604, 605, 618, 636, 746, 817, 855, 1094, 1101, 1102, 1104, 1120, 1136, 1146, 1147, 1160, 1178, 1221, 1229], "988": 15, "44": [15, 215, 296, 361, 746, 803, 855], "444": 15, "23": [15, 137, 185, 232, 296, 366, 370, 374, 382, 390, 393, 409, 562, 565, 566, 568, 571, 572, 573, 692, 695, 732, 733, 734, 746, 784, 811, 855, 858, 924, 932, 1229], "789": [15, 858], "fmt": [16, 440, 700, 746, 790, 855], "floatfmt": 16, "mix": [16, 916, 1177, 1221], "how": [16, 39, 40, 79, 87, 107, 110, 118, 127, 134, 166, 204, 223, 265, 266, 296, 337, 360, 392, 393, 407, 441, 469, 470, 471, 542, 556, 570, 604, 605, 633, 635, 692, 736, 746, 773, 792, 829, 855, 892, 917, 954, 955, 969, 1033, 1034, 1035, 1106, 1146, 1147, 1175, 1177, 1221], "full": [16, 48, 79, 84, 87, 115, 116, 119, 129, 130, 131, 135, 185, 186, 188, 189, 232, 296, 562, 633, 634, 635, 639, 746, 784, 785, 787, 788, 797, 798, 811, 855, 858, 1175, 1176, 1177, 1181, 1229], "scientif": 16, "notat": [16, 40, 296], "small": [16, 118, 144, 206, 296, 393, 777, 855, 1229], "2304980958725870923": 16, "1e6": 16, "1e": [16, 138, 139, 140, 141], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 405, 967], "00000001": [16, 663, 746], "plai": [17, 677], "sam": 17, "As": [17, 70, 88, 89, 104, 106, 107, 108, 110, 120, 124, 125, 133, 296, 499, 736, 855], "time": [17, 39, 48, 50, 64, 69, 84, 85, 86, 127, 129, 171, 185, 186, 188, 189, 205, 232, 267, 296, 334, 364, 365, 366, 367, 368, 372, 373, 389, 392, 393, 396, 398, 399, 407, 410, 467, 468, 499, 562, 565, 566, 567, 568, 569, 571, 572, 573, 582, 633, 635, 639, 654, 655, 676, 677, 690, 691, 692, 693, 694, 695, 701, 733, 734, 746, 767, 768, 784, 785, 787, 788, 793, 807, 811, 855, 858, 887, 922, 923, 924, 925, 930, 931, 951, 954, 955, 958, 960, 961, 969, 972, 983, 1031, 1033, 1034, 1124, 1175, 1177, 1181, 1204, 1205, 1221, 1229], "goe": 17, "By": [17, 19, 35, 79, 115, 116, 129, 185, 204, 205, 232, 242, 247, 266, 267, 268, 296, 389, 393, 407, 492, 562, 565, 566, 567, 568, 569, 571, 572, 573, 579, 591, 661, 678, 680, 690, 691, 693, 694, 695, 708, 727, 733, 734, 735, 746, 767, 784, 792, 793, 811, 817, 822, 830, 855, 951, 955, 969, 1056, 1120, 1132, 1202, 1210, 1221], "begin": [17, 40, 296, 415, 416, 417, 601, 746, 978, 979, 980, 1143, 1221], "beauti": 17, "friendship": 17, "len_byt": [17, 608, 609, 1150, 1151], "len": [17, 40, 143, 145, 203, 296, 346, 347, 482, 510, 746, 1046, 1221], "u32": [17, 64, 117, 155, 157, 162, 220, 273, 278, 287, 289, 296, 304, 311, 318, 319, 320, 321, 322, 346, 347, 438, 461, 465, 466, 470, 481, 528, 540, 553, 561, 565, 566, 568, 571, 572, 573, 577, 596, 607, 608, 654, 658, 664, 669, 673, 674, 679, 718, 746, 761, 764, 770, 805, 835, 839, 848, 850, 855, 874, 875, 876, 888, 893, 996, 1045, 1090, 1098, 1138, 1149, 1150, 1204, 1207, 1209, 1221], "37": 17, "beaut": 17, "48": [17, 232, 296, 562, 746, 811, 855], "fmt_str_length": 17, "50": [17, 32, 40, 163, 171, 183, 296, 340, 393, 407, 746, 899, 916, 969, 1221], "element": [18, 19, 30, 144, 147, 156, 162, 200, 223, 233, 247, 261, 268, 296, 310, 312, 313, 314, 315, 316, 317, 334, 338, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 362, 363, 419, 420, 424, 436, 447, 461, 469, 470, 472, 473, 474, 481, 482, 488, 489, 490, 491, 502, 503, 510, 542, 543, 553, 556, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 583, 584, 585, 590, 591, 624, 625, 636, 652, 653, 655, 661, 678, 680, 723, 724, 727, 735, 746, 762, 770, 821, 822, 826, 830, 855, 865, 866, 867, 868, 869, 870, 871, 887, 895, 898, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 919, 920, 981, 982, 987, 995, 1008, 1022, 1024, 1025, 1033, 1034, 1036, 1037, 1038, 1045, 1046, 1052, 1053, 1054, 1055, 1066, 1067, 1070, 1084, 1090, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1114, 1125, 1126, 1127, 1131, 1132, 1166, 1167, 1178, 1192, 1195, 1196, 1200, 1205, 1206, 1210, 1221], "empti": [18, 36, 37, 58, 95, 107, 115, 116, 120, 126, 129, 158, 159, 185, 198, 214, 296, 708, 725, 765, 766, 784, 802, 855, 858, 898, 902, 1003, 1221], "alwai": [18, 37, 39, 58, 64, 115, 144, 184, 187, 208, 282, 296, 518, 633, 690, 736, 798, 855, 1070, 1175, 1221, 1228, 1229], "neg": [18, 49, 136, 185, 186, 188, 189, 191, 207, 232, 242, 243, 245, 250, 296, 492, 493, 546, 562, 579, 580, 587, 622, 746, 784, 785, 787, 788, 811, 817, 818, 820, 835, 855, 995, 1025, 1056, 1057, 1120, 1121, 1129, 1164, 1192, 1221], "result": [18, 37, 43, 44, 45, 58, 59, 60, 79, 87, 108, 110, 117, 118, 119, 120, 129, 132, 134, 135, 147, 171, 185, 188, 190, 204, 219, 223, 232, 235, 242, 243, 258, 267, 275, 296, 393, 396, 399, 407, 415, 416, 417, 421, 436, 458, 498, 499, 508, 510, 542, 550, 557, 558, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 578, 579, 580, 623, 624, 635, 656, 681, 682, 685, 686, 690, 691, 692, 693, 694, 695, 710, 719, 722, 723, 724, 737, 746, 763, 767, 784, 785, 787, 788, 792, 797, 798, 807, 811, 815, 817, 818, 836, 855, 864, 915, 955, 958, 961, 969, 978, 979, 980, 983, 994, 1023, 1062, 1070, 1088, 1094, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1118, 1120, 1121, 1165, 1166, 1177, 1202, 1221, 1228, 1229], "being": [18, 86, 115, 116, 117, 129, 135, 157, 170, 255, 265, 266, 296, 310, 357, 393, 438, 565, 566, 567, 568, 569, 571, 572, 573, 696, 746, 764, 768, 776, 777, 829, 855, 894, 914, 955, 996, 1088, 1221, 1229], "content": [18, 582, 746, 1124, 1221], "final": [18, 40, 79, 134, 296, 415, 416, 417, 746, 777, 855, 978, 979, 980, 1221], "item": [18, 87, 116, 183, 233, 236, 296, 360, 420, 468, 471, 477, 479, 487, 576, 625, 746, 917, 982, 1032, 1035, 1041, 1043, 1051, 1112, 1167, 1221], "num": [18, 40, 260, 296, 442, 746, 1000, 1221], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 60, 64, 79, 87, 111, 118, 129, 137, 145, 147, 159, 171, 182, 183, 185, 191, 193, 195, 196, 201, 218, 222, 223, 224, 228, 230, 232, 238, 250, 271, 275, 279, 281, 283, 284, 285, 286, 287, 288, 289, 296, 305, 309, 318, 319, 320, 322, 340, 348, 351, 360, 364, 366, 372, 385, 386, 392, 393, 407, 410, 436, 437, 441, 447, 457, 462, 471, 478, 493, 496, 502, 518, 520, 529, 543, 546, 557, 562, 587, 637, 649, 663, 675, 681, 690, 693, 696, 699, 701, 703, 708, 710, 731, 734, 746, 767, 768, 784, 789, 791, 796, 806, 807, 811, 813, 823, 824, 832, 836, 840, 842, 844, 845, 846, 847, 848, 849, 850, 855, 858, 899, 917, 922, 924, 930, 954, 969, 972, 975, 995, 1008, 1025, 1035, 1042, 1057, 1060, 1066, 1070, 1084, 1094, 1113, 1116, 1179, 1192, 1221, 1229], "size": [19, 45, 60, 115, 116, 117, 143, 144, 145, 147, 149, 169, 265, 296, 558, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 670, 705, 706, 723, 724, 746, 767, 855, 977, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1221, 1229], "overwrit": [19, 38, 39, 104, 106, 107, 108, 110, 115, 116, 124, 125, 129, 133, 153, 266, 296, 305, 746, 777, 855], "chunk": [19, 60, 113, 115, 116, 127, 129, 132, 133, 134, 145, 147, 171, 203, 218, 296, 309, 554, 746, 855, 864, 897, 983, 992, 1076, 1091, 1197, 1221], "stream": [19, 41, 42, 58, 59, 60, 85, 86, 123, 156, 184, 187, 204, 261, 263, 296, 508, 746, 762, 767, 768, 775, 777, 783, 786, 792, 797, 798, 802, 807, 819, 821, 826, 827, 855], "engin": [19, 38, 117, 118, 120, 149, 184, 187, 204, 208, 263, 282, 296, 508, 746, 783, 786, 792, 797, 798, 802, 827, 843, 855, 1070, 1221], "determin": [19, 37, 40, 58, 77, 79, 87, 107, 110, 115, 116, 117, 120, 126, 127, 129, 134, 136, 154, 164, 177, 185, 188, 202, 203, 208, 223, 232, 262, 267, 296, 337, 376, 392, 393, 407, 438, 499, 509, 518, 550, 556, 557, 565, 566, 567, 568, 569, 571, 572, 573, 586, 594, 604, 605, 633, 635, 636, 692, 719, 722, 737, 746, 784, 787, 811, 855, 892, 934, 954, 955, 969, 996, 1063, 1069, 1088, 1094, 1128, 1136, 1146, 1147, 1175, 1177, 1178, 1221], "schema": [19, 33, 36, 38, 39, 64, 80, 81, 82, 87, 99, 100, 102, 104, 106, 107, 108, 110, 115, 116, 117, 118, 122, 124, 125, 127, 128, 129, 133, 134, 143, 145, 154, 158, 159, 167, 169, 203, 208, 215, 219, 257, 296, 323, 324, 325, 326, 327, 498, 499, 518, 604, 605, 663, 728, 746, 765, 766, 774, 797, 798, 803, 815, 838, 843, 855, 858, 879, 902, 1146, 1147, 1221], "thread": [19, 37, 58, 86, 113, 115, 116, 118, 149, 296, 310, 473, 510, 746, 768, 855, 1037], "pool": [19, 86, 149, 768, 855], "For": [19, 39, 40, 115, 116, 118, 119, 120, 129, 130, 131, 166, 171, 204, 205, 232, 282, 296, 415, 416, 417, 499, 510, 519, 555, 586, 593, 601, 602, 603, 616, 681, 685, 695, 699, 700, 742, 746, 773, 793, 811, 843, 855, 978, 979, 980, 983, 1010, 1092, 1128, 1135, 1143, 1144, 1145, 1158, 1202, 1221], "some": [19, 35, 40, 70, 89, 107, 115, 116, 117, 120, 129, 153, 166, 296, 742, 773, 855, 1008, 1221, 1229], "dataset": [19, 45, 51, 115, 116, 127, 129, 135, 204, 296, 458, 746, 758, 792, 797, 798, 855, 1023, 1221], "esp": 19, "have": [19, 35, 39, 40, 48, 70, 79, 89, 105, 114, 115, 116, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 145, 147, 171, 202, 204, 226, 232, 234, 235, 254, 296, 357, 415, 416, 417, 510, 519, 553, 557, 562, 603, 746, 771, 792, 802, 811, 819, 835, 855, 858, 914, 916, 978, 979, 980, 983, 993, 1090, 1094, 1177, 1221, 1229], "too": [19, 561, 746, 777, 855], "optimist": 19, "lead": [19, 45, 111, 135, 185, 186, 188, 189, 212, 232, 242, 249, 296, 431, 434, 492, 508, 510, 562, 578, 579, 611, 627, 628, 630, 650, 678, 746, 784, 785, 787, 788, 797, 798, 811, 817, 838, 843, 855, 1056, 1070, 1118, 1120, 1153, 1169, 1170, 1172, 1221], "memori": [19, 60, 87, 104, 105, 108, 109, 110, 115, 116, 117, 120, 121, 127, 129, 132, 133, 134, 153, 171, 208, 235, 244, 282, 296, 542, 554, 581, 746, 767, 855, 983, 1070, 1091, 1122, 1123, 1221], "error": [19, 39, 86, 115, 116, 129, 157, 223, 233, 296, 305, 330, 335, 457, 476, 479, 497, 529, 593, 597, 601, 603, 604, 606, 633, 634, 635, 639, 746, 764, 768, 838, 843, 855, 883, 888, 1040, 1043, 1061, 1135, 1139, 1143, 1145, 1146, 1148, 1175, 1176, 1177, 1181, 1221], "row": [19, 25, 30, 37, 38, 40, 43, 45, 58, 60, 79, 80, 82, 87, 96, 98, 103, 107, 108, 110, 111, 115, 116, 117, 120, 121, 123, 124, 127, 129, 132, 133, 134, 135, 138, 139, 143, 145, 154, 156, 158, 166, 171, 174, 177, 179, 183, 184, 185, 187, 190, 191, 197, 199, 200, 202, 203, 204, 205, 206, 207, 208, 214, 219, 235, 236, 245, 250, 251, 254, 256, 261, 263, 265, 266, 273, 278, 280, 282, 290, 296, 321, 420, 432, 437, 462, 474, 499, 542, 543, 558, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 587, 589, 600, 604, 605, 649, 651, 670, 673, 679, 685, 686, 699, 703, 705, 706, 721, 723, 724, 731, 736, 746, 762, 765, 767, 773, 777, 780, 781, 782, 784, 789, 792, 793, 794, 796, 798, 802, 820, 824, 825, 826, 827, 829, 835, 839, 841, 843, 851, 855, 982, 983, 991, 995, 1038, 1084, 1095, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1129, 1142, 1146, 1147, 1192, 1194, 1221, 1229], "per": [19, 37, 40, 58, 143, 145, 156, 183, 219, 220, 239, 246, 261, 272, 285, 287, 288, 296, 310, 473, 476, 477, 497, 510, 589, 660, 673, 746, 762, 814, 821, 826, 833, 846, 848, 849, 855, 1037, 1040, 1041, 1061, 1209, 1221], "everi": [19, 37, 58, 115, 116, 129, 179, 185, 188, 251, 254, 267, 296, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 393, 407, 420, 432, 465, 466, 471, 474, 477, 478, 488, 493, 496, 600, 651, 681, 682, 685, 686, 746, 777, 782, 784, 787, 825, 855, 906, 907, 908, 909, 910, 911, 912, 913, 914, 955, 969, 982, 991, 993, 1029, 1030, 1035, 1038, 1041, 1042, 1052, 1057, 1060, 1142, 1194, 1221], "process": [19, 37, 58, 59, 60, 115, 116, 117, 129, 149, 296, 767, 855], "liter": [20, 21, 25, 39, 64, 86, 117, 120, 126, 145, 146, 147, 148, 183, 202, 209, 211, 216, 218, 221, 233, 234, 238, 239, 242, 248, 253, 266, 271, 272, 296, 305, 329, 340, 366, 413, 414, 421, 428, 433, 435, 442, 460, 505, 509, 525, 527, 537, 538, 547, 557, 593, 596, 616, 617, 646, 656, 665, 667, 670, 674, 675, 676, 677, 684, 688, 689, 690, 691, 692, 693, 694, 705, 706, 708, 713, 717, 719, 722, 725, 728, 730, 732, 733, 734, 737, 746, 767, 768, 779, 813, 814, 817, 829, 832, 833, 855, 858, 862, 863, 882, 899, 915, 924, 984, 1000, 1088, 1094, 1113, 1116, 1120, 1135, 1138, 1158, 1159, 1221, 1228], "left": [20, 21, 40, 66, 79, 138, 139, 140, 141, 185, 186, 188, 189, 204, 205, 232, 266, 296, 358, 415, 416, 417, 441, 442, 550, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 610, 654, 675, 681, 682, 685, 686, 690, 691, 693, 694, 699, 721, 733, 734, 736, 746, 784, 785, 787, 788, 792, 793, 811, 829, 855, 915, 978, 979, 980, 1000, 1088, 1114, 1152, 1204, 1221], "center": [20, 21, 40, 296, 415, 416, 417, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 746, 978, 979, 980, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1221], "cell": [20, 21, 40, 296], "valueerror": [20, 25], "recognis": [20, 21, 25, 142], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 40, 58, 79, 111, 120, 145, 157, 163, 183, 185, 186, 188, 189, 203, 205, 232, 267, 296, 364, 365, 366, 367, 368, 370, 372, 373, 374, 376, 377, 378, 380, 382, 384, 385, 386, 387, 389, 390, 391, 392, 393, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 468, 562, 565, 566, 567, 568, 569, 571, 572, 573, 633, 635, 654, 690, 691, 693, 694, 695, 701, 708, 733, 734, 746, 764, 784, 785, 787, 788, 793, 811, 855, 858, 921, 922, 923, 924, 925, 926, 928, 930, 931, 932, 934, 935, 936, 937, 938, 939, 941, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 1019, 1032, 1033, 1034, 1079, 1080, 1113, 1117, 1175, 1177, 1204, 1221], "date": [21, 40, 48, 79, 115, 116, 118, 120, 126, 129, 135, 145, 157, 163, 183, 185, 186, 188, 189, 203, 205, 232, 296, 365, 366, 367, 370, 373, 376, 377, 378, 384, 385, 386, 389, 390, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 468, 562, 565, 566, 567, 568, 569, 571, 572, 573, 633, 634, 654, 690, 691, 693, 694, 701, 708, 732, 746, 764, 784, 785, 787, 788, 793, 811, 855, 858, 923, 924, 925, 928, 931, 932, 934, 935, 936, 937, 938, 939, 943, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 973, 1019, 1032, 1033, 1034, 1079, 1080, 1113, 1117, 1175, 1176, 1204, 1221], "333": [21, 575, 746, 1111, 1221], "mno": [21, 25], "2023": [21, 40, 111, 137, 203, 296, 366, 695, 708, 858, 924], "29": [21, 145, 364, 385, 922, 947], "2001": [21, 365, 370, 373, 374, 376, 382, 384, 389, 390, 391, 393, 398, 407, 408, 409, 410, 565, 566, 568, 571, 572, 573, 633, 746, 858, 923, 928, 931, 932, 934, 936, 937, 938, 939, 941, 943, 944, 946, 949, 951, 952, 953, 955, 960, 969, 970, 971, 972, 973, 1175], "null": [21, 37, 39, 58, 66, 79, 87, 107, 115, 116, 125, 129, 135, 153, 156, 158, 162, 163, 166, 168, 173, 177, 178, 196, 204, 211, 212, 213, 220, 223, 225, 242, 243, 246, 247, 248, 249, 253, 258, 261, 264, 266, 268, 271, 278, 296, 306, 308, 309, 310, 320, 328, 330, 340, 346, 348, 351, 360, 362, 363, 389, 400, 401, 402, 403, 404, 405, 406, 414, 415, 416, 417, 418, 421, 422, 423, 429, 441, 451, 453, 454, 455, 461, 463, 464, 471, 472, 475, 476, 477, 480, 481, 488, 489, 490, 491, 492, 497, 499, 510, 538, 539, 540, 543, 554, 560, 561, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 579, 580, 581, 583, 588, 592, 593, 595, 596, 597, 598, 599, 601, 602, 603, 604, 606, 607, 608, 613, 614, 615, 622, 624, 625, 626, 637, 642, 643, 644, 645, 654, 664, 665, 666, 667, 675, 676, 677, 679, 684, 697, 708, 713, 717, 723, 724, 728, 730, 736, 746, 762, 765, 770, 773, 779, 791, 792, 805, 815, 817, 818, 821, 826, 828, 829, 832, 834, 839, 855, 862, 863, 865, 874, 883, 898, 899, 917, 919, 920, 962, 963, 964, 965, 966, 967, 968, 976, 978, 979, 980, 984, 986, 993, 999, 1015, 1016, 1024, 1027, 1028, 1035, 1036, 1040, 1045, 1053, 1055, 1056, 1061, 1063, 1070, 1083, 1084, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1115, 1120, 1121, 1125, 1134, 1135, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1155, 1156, 1157, 1164, 1166, 1167, 1168, 1179, 1184, 1200, 1202, 1203, 1204, 1211, 1221, 1228, 1229], "07": [21, 366, 392, 393, 407, 633, 690, 693, 701, 858, 924, 954, 1175], "05": [21, 135, 138, 139, 140, 141, 145, 157, 205, 267, 296, 366, 367, 392, 394, 396, 399, 400, 690, 693, 764, 793, 855, 858, 924, 925, 926, 927, 954, 955, 958, 959, 961, 962, 969], "visibl": [22, 169, 296, 977, 1221], "eg": [22, 30, 40, 87, 118, 151, 296, 393, 633, 635, 656, 746, 993, 1175, 1177, 1221], "low": [22, 117, 149, 550, 746, 1088, 1221], "rang": [22, 40, 117, 118, 163, 169, 185, 203, 296, 359, 370, 384, 390, 391, 393, 407, 408, 441, 670, 676, 689, 690, 691, 692, 693, 694, 705, 706, 732, 733, 734, 746, 784, 855, 916, 928, 946, 952, 953, 955, 969, 970, 977, 1084, 1221], "98": [22, 195, 296, 334, 431, 434, 588, 636, 655, 746, 1178], "99": [22, 40, 172, 173, 195, 198, 266, 296, 304, 334, 421, 423, 431, 434, 588, 655, 736, 746, 778, 779, 829, 855, 975, 984, 1221], "tbl_col": 22, "95": [22, 304, 746], "96": [22, 304, 746], "97": [22, 195, 296, 304, 746], "move": [23, 235, 296, 415, 416, 417, 565, 566, 568, 572, 746, 978, 979, 980, 1101, 1102, 1104, 1108, 1221], "inlin": [23, 235, 296, 593, 601, 602, 616, 1135, 1143, 1144, 1158], "parenthes": 23, "inform": [24, 28, 38, 84, 119, 127, 130, 131, 134, 138, 140, 161, 163, 296, 458, 586, 593, 601, 602, 616, 746, 807, 855, 893, 1023, 1128, 1135, 1143, 1144, 1158, 1221], "below": [24, 39, 119, 130, 131, 166, 185, 223, 296, 423, 690, 691, 693, 694, 733, 734, 736, 742, 746, 773, 784, 855], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 79, 111], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 601, 606, 1143, 1148], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 58, 84, 117, 119, 130, 131, 145, 156, 163, 169, 221, 235, 261, 262, 265, 266, 296, 358, 394, 438, 442, 550, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 623, 624, 628, 629, 681, 685, 723, 724, 746, 762, 826, 829, 855, 858, 915, 916, 956, 977, 996, 1000, 1088, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1165, 1166, 1170, 1211, 1221], "divid": [25, 358, 393, 407, 415, 416, 417, 458, 550, 746, 915, 955, 969, 978, 979, 980, 1023, 1088, 1221], "same": [25, 39, 40, 68, 70, 79, 85, 86, 87, 88, 89, 121, 129, 138, 139, 140, 141, 143, 151, 184, 204, 208, 223, 235, 246, 263, 271, 272, 275, 282, 296, 302, 309, 326, 362, 363, 431, 434, 498, 514, 517, 542, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 589, 607, 645, 746, 767, 768, 783, 792, 797, 798, 821, 827, 832, 833, 836, 855, 860, 865, 880, 915, 919, 920, 924, 1062, 1070, 1088, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1149, 1212, 1221], "dens": [25, 183, 296, 553, 746, 1090, 1221], "space": [25, 185, 296, 784, 855], "horizont": [25, 87, 177, 193, 209, 210, 211, 212, 216, 217, 248, 249, 265, 296, 665, 667, 676, 677, 681, 682, 684, 685, 686, 688, 696, 699, 713, 717, 721, 730], "markdown": 25, "compat": [25, 40, 45, 60, 296, 593, 595, 596, 601, 602, 603, 616, 617, 855, 858, 1135, 1137, 1138, 1143, 1144, 1145, 1158, 1159], "No": [25, 640, 1182], "round": [25, 40, 81, 111, 117, 296, 339, 345, 427, 575, 652, 746, 896, 989, 1111, 1221], "corner": [25, 40, 111, 296], "op": [25, 147, 296, 556, 746, 855, 1177, 1221], "one": [25, 37, 38, 40, 58, 69, 79, 96, 104, 106, 107, 108, 109, 110, 115, 116, 120, 124, 125, 126, 129, 146, 147, 148, 151, 173, 174, 183, 184, 185, 186, 188, 189, 202, 214, 223, 232, 233, 234, 240, 242, 257, 260, 276, 296, 304, 358, 423, 431, 434, 492, 499, 503, 562, 579, 588, 602, 618, 711, 726, 736, 742, 746, 779, 780, 783, 784, 785, 787, 788, 802, 811, 816, 817, 834, 837, 855, 864, 915, 986, 1019, 1056, 1063, 1067, 1088, 1120, 1144, 1160, 1185, 1221], "more": [25, 40, 43, 45, 60, 69, 79, 87, 88, 89, 103, 104, 105, 106, 107, 108, 109, 110, 117, 118, 119, 120, 124, 125, 126, 127, 130, 131, 138, 140, 145, 147, 151, 161, 163, 201, 202, 206, 208, 214, 219, 233, 234, 236, 257, 263, 282, 296, 307, 310, 327, 458, 487, 500, 503, 508, 510, 541, 576, 586, 602, 607, 633, 634, 635, 657, 726, 736, 746, 802, 827, 855, 858, 865, 881, 893, 916, 1019, 1023, 1051, 1064, 1070, 1112, 1128, 1144, 1149, 1175, 1176, 1177, 1206, 1221, 1229], "semigraph": 25, "box": [25, 208, 296], "draw": [25, 30, 144, 1229], "found": [25, 37, 40, 58, 66, 91, 100, 102, 107, 111, 167, 296, 577, 606, 631, 632, 633, 635, 746, 855, 1114, 1148, 1173, 1174, 1175, 1177, 1221, 1228], "unicod": 25, "block": [25, 86, 184, 187, 263, 296, 736, 768, 783, 786, 809, 827, 835, 843, 855, 1113, 1116, 1221], "http": [25, 40, 41, 42, 105, 117, 118, 153, 161, 296, 601, 603, 1143, 1145], "en": [25, 40, 296], "wikipedia": 25, "org": [25, 41, 42, 105, 117, 118, 153, 161, 296], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 296], "etc": [26, 39, 40, 115, 119, 121, 123, 130, 131, 132, 296, 746, 858, 1113, 1116, 1221], "between": [29, 87, 142, 143, 145, 147, 161, 225, 288, 296, 335, 360, 361, 442, 471, 479, 488, 489, 490, 491, 543, 550, 551, 569, 592, 671, 672, 678, 680, 720, 723, 724, 746, 808, 849, 855, 888, 893, 917, 918, 1000, 1035, 1043, 1052, 1053, 1054, 1055, 1084, 1088, 1089, 1105, 1134, 1221], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 60, 64, 149, 163, 173, 184, 210, 223, 232, 296, 341, 348, 353, 423, 499, 542, 553, 557, 562, 565, 578, 625, 713, 726, 746, 779, 783, 811, 855, 900, 906, 910, 916, 986, 1063, 1090, 1101, 1118, 1167, 1221], "tbl_row": 30, "also": [32, 37, 40, 58, 69, 70, 107, 117, 120, 126, 129, 143, 144, 145, 146, 147, 151, 167, 184, 185, 186, 188, 189, 215, 219, 232, 234, 238, 246, 266, 271, 296, 348, 351, 389, 392, 442, 510, 553, 557, 565, 566, 567, 568, 569, 571, 572, 573, 589, 628, 629, 681, 682, 685, 686, 690, 699, 701, 721, 736, 745, 746, 752, 783, 784, 785, 787, 788, 803, 811, 813, 821, 829, 832, 834, 855, 858, 954, 1000, 1090, 1094, 1137, 1138, 1170, 1221], "char": [32, 602, 1144], "omit": [32, 107, 111, 143, 145, 147, 151, 219, 235, 296, 733, 734, 858], "set_decimal_separ": 32, "x": [32, 66, 67, 71, 79, 87, 105, 111, 115, 116, 118, 129, 143, 145, 153, 169, 193, 197, 199, 204, 214, 223, 234, 235, 265, 296, 303, 305, 307, 359, 413, 414, 428, 433, 435, 436, 460, 467, 479, 503, 505, 507, 508, 510, 525, 527, 530, 531, 532, 533, 534, 537, 538, 541, 547, 548, 556, 557, 561, 583, 586, 624, 646, 647, 654, 656, 663, 665, 667, 671, 672, 681, 682, 684, 699, 708, 710, 713, 717, 721, 730, 736, 746, 792, 798, 802, 820, 855, 858, 893, 986, 1021, 1070, 1094, 1125, 1128, 1166, 1204, 1221, 1228], "1234567": 32, "987654": [32, 858], "10101": 32, "y": [32, 71, 79, 87, 105, 111, 143, 145, 153, 169, 197, 199, 204, 214, 223, 234, 235, 265, 296, 303, 305, 307, 396, 399, 413, 414, 433, 435, 460, 467, 479, 505, 507, 510, 530, 531, 532, 533, 534, 537, 538, 541, 548, 556, 557, 561, 633, 634, 635, 647, 656, 663, 665, 667, 671, 672, 684, 695, 708, 713, 717, 730, 746, 792, 802, 820, 855, 858, 893, 958, 961, 1094, 1175, 1176, 1177, 1221], "1234": [32, 575, 746, 1111, 1221], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 145, 185, 205, 267, 296, 364, 365, 367, 372, 374, 378, 382, 385, 386, 389, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 565, 566, 568, 571, 572, 573, 633, 635, 639, 693, 695, 733, 734, 746, 784, 793, 855, 858, 922, 923, 925, 926, 927, 930, 931, 932, 938, 939, 944, 947, 948, 949, 951, 954, 955, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 972, 1175, 1177, 1181], "321": [32, 1229], "strip": [33, 611, 621, 628, 629, 630, 631, 632, 1153, 1163, 1170, 1171, 1172], "trail": [33, 183, 296, 621, 627, 628, 629, 1163, 1169, 1170, 1171], "zero": [33, 40, 104, 105, 114, 115, 116, 121, 123, 127, 144, 153, 173, 202, 233, 252, 258, 296, 423, 499, 503, 577, 586, 642, 656, 746, 765, 779, 855, 898, 986, 1063, 1128, 1184, 1197, 1202, 1203, 1221], "enabl": [33, 34, 70, 88, 89, 138, 139, 140, 141, 150, 238, 271, 296, 306, 308, 557, 578, 594, 618, 660, 742, 746, 767, 813, 832, 855, 862, 863, 1094, 1118, 1136, 1160, 1209, 1221], "d": [33, 36, 37, 39, 40, 41, 42, 45, 107, 135, 183, 185, 190, 191, 195, 204, 250, 252, 265, 269, 279, 281, 283, 284, 285, 286, 287, 288, 289, 296, 303, 305, 373, 396, 399, 442, 546, 581, 596, 602, 624, 633, 634, 635, 675, 695, 701, 746, 784, 792, 840, 842, 844, 845, 846, 847, 848, 849, 850, 855, 893, 931, 958, 961, 1000, 1138, 1144, 1166, 1175, 1176, 1177, 1221], "01": [33, 79, 145, 157, 163, 183, 185, 232, 267, 296, 364, 365, 366, 367, 373, 374, 377, 378, 382, 384, 385, 386, 389, 391, 392, 393, 394, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 410, 411, 562, 565, 566, 568, 571, 572, 573, 633, 634, 635, 639, 690, 691, 693, 695, 746, 764, 784, 811, 855, 858, 923, 924, 925, 926, 927, 931, 932, 938, 939, 944, 947, 948, 949, 951, 954, 955, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 1175, 1176, 1177, 1181], "6789": 33, "scale": [33, 49, 169, 296, 510, 546, 636, 746, 977, 1178, 1221], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 107, 119, 120, 130, 131, 143, 164, 166, 170, 184, 187, 221, 238, 239, 240, 246, 264, 271, 272, 275, 296, 303, 372, 418, 421, 542, 589, 593, 601, 602, 616, 673, 675, 676, 677, 697, 725, 728, 746, 772, 776, 783, 786, 813, 814, 816, 821, 828, 832, 833, 836, 855, 922, 930, 984, 1135, 1143, 1144, 1158, 1221], "verbos": [34, 138, 140, 151, 602, 1144], "debug": [34, 767, 777, 797, 798, 855, 1229], "log": [34, 81, 334, 412, 503, 527, 547, 655, 746, 887, 975, 1205, 1221], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 67, 80, 82, 84, 104, 106, 107, 108, 109, 110, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 145, 176, 202, 221, 227, 233, 234, 235, 237, 253, 254, 262, 296, 509, 561, 746, 809, 812, 855, 1069, 1221], "show": [35, 40, 68, 163, 166, 183, 206, 220, 296, 438, 746, 773, 807, 819, 855, 996, 1221], "variabl": [35, 61, 66, 127, 134, 146, 149, 214, 255, 296, 802, 855, 1198, 1221, 1228], "chang": [35, 79, 86, 115, 116, 117, 135, 265, 266, 267, 296, 310, 357, 358, 360, 393, 438, 509, 510, 543, 550, 565, 566, 567, 568, 569, 571, 572, 573, 746, 768, 829, 855, 893, 894, 914, 915, 955, 996, 1069, 1084, 1088, 1123, 1221], "restrict": [35, 625, 1167], "dictionari": [35, 40, 71, 104, 106, 107, 108, 110, 115, 116, 117, 118, 122, 124, 125, 128, 129, 133, 202, 221, 233, 234, 235, 253, 254, 296, 509, 746, 855, 1069, 1221], "those": [35, 40, 115, 120, 235, 266, 296, 553, 601, 711, 746, 829, 855, 858, 1090, 1143, 1221], "been": [35, 40, 153, 154, 175, 178, 186, 187, 188, 189, 194, 229, 251, 277, 296, 310, 352, 353, 354, 355, 356, 445, 449, 452, 457, 469, 482, 497, 506, 507, 509, 510, 548, 553, 563, 565, 566, 567, 568, 569, 571, 572, 573, 595, 605, 609, 610, 611, 612, 615, 620, 621, 627, 647, 650, 651, 668, 687, 688, 709, 746, 785, 786, 787, 788, 797, 825, 838, 855, 865, 910, 911, 912, 913, 1005, 1011, 1033, 1046, 1061, 1069, 1090, 1099, 1115, 1117, 1137, 1147, 1151, 1152, 1153, 1154, 1157, 1162, 1163, 1169, 1193, 1194, 1221], "set_fmt_float": 35, "via": [35, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 132, 133, 134, 202, 234, 296, 310, 510, 603, 746, 771, 855, 1145], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 114, 115, 120, 121, 123, 126, 296], "bytesio": [36, 37, 40, 41, 42, 45, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128, 296, 771, 855], "compress": [36, 41, 42, 45, 59, 60, 296, 855], "avrocompress": [36, 296], "uncompress": [36, 41, 42, 45, 60, 121, 132, 296, 855], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 58, 59, 60, 116, 121, 151, 296, 340, 523, 746, 795, 819, 855, 899, 1221], "apach": [36, 41, 42, 45, 114, 117, 118, 131, 296, 758], "avro": [36, 114, 296, 758], "writeabl": [36, 37, 41, 42, 43, 44, 45, 296], "like": [36, 37, 39, 41, 42, 43, 44, 45, 86, 105, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 185, 197, 199, 204, 257, 296, 364, 473, 522, 553, 601, 629, 630, 660, 742, 746, 768, 771, 784, 855, 922, 1037, 1090, 1143, 1209, 1221], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 69, 71, 87, 105, 106, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 143, 145, 147, 153, 184, 185, 187, 188, 205, 206, 232, 235, 257, 258, 296, 690, 691, 693, 694, 708, 733, 734, 758, 771, 784, 785, 787, 788, 793, 811, 855, 858, 889, 921, 1026, 1133, 1187, 1197, 1221], "snappi": [36, 45, 60, 296, 855], "deflat": [36, 296], "pathlib": [36, 37, 41, 42, 45, 129, 296], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 68, 157, 160, 161, 164, 165, 166, 167, 168, 171, 174, 177, 180, 181, 182, 190, 191, 192, 193, 195, 196, 198, 204, 208, 209, 210, 211, 212, 213, 216, 217, 220, 223, 225, 227, 228, 230, 233, 236, 237, 238, 241, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 262, 263, 264, 268, 269, 270, 274, 296, 336, 358, 389, 432, 437, 440, 462, 514, 517, 518, 519, 520, 521, 522, 550, 558, 592, 596, 598, 600, 602, 603, 619, 623, 625, 628, 629, 630, 631, 632, 638, 641, 649, 669, 678, 680, 698, 702, 703, 707, 712, 714, 715, 716, 718, 720, 725, 727, 731, 735, 736, 742, 746, 764, 769, 772, 773, 774, 780, 790, 791, 792, 805, 809, 812, 813, 827, 828, 831, 834, 855, 858, 890, 915, 951, 1043, 1088, 1095, 1138, 1140, 1142, 1144, 1145, 1161, 1167, 1173, 1174, 1180, 1183, 1221], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 68, 157, 160, 161, 164, 165, 166, 167, 168, 171, 174, 177, 180, 181, 182, 191, 193, 195, 196, 198, 204, 208, 209, 210, 211, 212, 213, 216, 217, 220, 223, 225, 227, 228, 230, 233, 236, 237, 238, 245, 247, 248, 249, 250, 252, 254, 255, 256, 257, 258, 259, 263, 264, 268, 269, 274, 296, 336, 440, 514, 515, 516, 517, 518, 519, 520, 521, 522, 586, 596, 598, 600, 602, 603, 619, 623, 625, 631, 632, 669, 678, 680, 698, 703, 707, 712, 714, 715, 716, 718, 725, 727, 731, 735, 736, 742, 746, 764, 769, 772, 773, 774, 780, 790, 791, 792, 805, 809, 812, 813, 827, 828, 831, 855, 858, 890, 1043, 1128, 1138, 1140, 1142, 1144, 1145, 1161, 1167, 1173, 1174, 1221], "ham": [36, 37, 39, 41, 42, 45, 157, 160, 161, 164, 165, 166, 167, 168, 174, 181, 190, 191, 193, 204, 209, 211, 213, 216, 220, 225, 227, 230, 233, 236, 237, 238, 245, 247, 248, 250, 255, 256, 257, 258, 259, 263, 268, 269, 296, 336, 521, 764, 769, 772, 773, 774, 780, 792, 805, 809, 812, 813, 827, 834, 855, 890], "dirpath": [36, 37, 41, 42, 45, 129, 296], "new_fil": [36, 37, 41, 42, 45, 296], "include_bom": [37, 58, 296, 855], "include_head": [37, 40, 58, 116, 262, 296, 855], "line_termin": [37, 58, 296, 855], "quote_char": [37, 58, 115, 116, 129, 296, 855], "batch_siz": [37, 58, 115, 116, 117, 133, 135, 296, 855], "1024": [37, 45, 58, 60, 115, 116, 117, 133, 296, 855], "datetime_format": [37, 58, 296, 855], "date_format": [37, 58, 296, 855], "time_format": [37, 58, 296, 855], "null_valu": [37, 58, 115, 116, 129, 296, 855], "quote_styl": [37, 58, 296, 855], "csvquotestyl": [37, 58, 296, 855], "textiowrapp": [37, 296], "comma": [37, 296], "csv": [37, 58, 59, 60, 115, 116, 120, 129, 296, 758, 855], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 60, 64, 70, 84, 86, 87, 104, 105, 106, 107, 108, 109, 110, 115, 116, 117, 119, 120, 121, 123, 124, 125, 126, 127, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 146, 153, 154, 156, 166, 171, 183, 185, 186, 188, 189, 191, 200, 201, 202, 205, 207, 208, 212, 219, 223, 232, 234, 235, 236, 242, 245, 249, 250, 254, 255, 257, 261, 262, 263, 265, 266, 296, 306, 308, 310, 366, 385, 386, 424, 438, 458, 487, 492, 493, 499, 508, 510, 521, 542, 550, 553, 555, 557, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 579, 582, 586, 587, 592, 602, 603, 604, 605, 611, 621, 622, 623, 624, 625, 627, 628, 629, 630, 633, 634, 635, 639, 642, 660, 664, 666, 668, 670, 674, 678, 679, 681, 690, 691, 693, 694, 695, 698, 699, 705, 706, 707, 708, 711, 719, 722, 723, 724, 728, 733, 734, 736, 737, 746, 762, 767, 768, 773, 775, 784, 785, 787, 788, 792, 793, 798, 802, 809, 811, 815, 817, 820, 826, 827, 829, 838, 843, 855, 858, 862, 863, 865, 899, 915, 924, 947, 948, 983, 993, 995, 996, 1022, 1023, 1025, 1051, 1056, 1057, 1063, 1070, 1088, 1090, 1092, 1094, 1095, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1112, 1114, 1118, 1120, 1124, 1128, 1129, 1134, 1144, 1145, 1146, 1147, 1153, 1163, 1164, 1165, 1166, 1167, 1169, 1170, 1171, 1172, 1175, 1176, 1177, 1181, 1184, 1192, 1197, 1202, 1209, 1211, 1221, 1228], "instead": [37, 43, 44, 64, 68, 79, 86, 87, 115, 116, 117, 120, 126, 127, 129, 135, 145, 183, 185, 201, 202, 208, 219, 221, 233, 234, 235, 238, 239, 242, 243, 258, 271, 272, 296, 320, 341, 342, 358, 371, 375, 379, 381, 383, 388, 392, 395, 407, 418, 492, 508, 550, 579, 580, 607, 608, 611, 621, 627, 628, 629, 630, 631, 632, 633, 635, 642, 670, 674, 690, 691, 692, 693, 694, 695, 698, 705, 706, 707, 719, 722, 728, 733, 734, 737, 746, 768, 778, 784, 813, 814, 815, 817, 818, 829, 832, 833, 855, 858, 874, 900, 901, 915, 929, 933, 940, 942, 945, 950, 954, 957, 969, 1001, 1007, 1010, 1017, 1019, 1021, 1056, 1088, 1113, 1116, 1120, 1121, 1149, 1150, 1153, 1163, 1169, 1170, 1171, 1172, 1175, 1177, 1184, 1203, 1221, 1228], "whether": [37, 58, 108, 110, 147, 150, 156, 168, 178, 201, 240, 261, 296, 306, 308, 376, 394, 463, 464, 515, 516, 578, 746, 762, 797, 798, 816, 821, 826, 855, 858, 862, 863, 891, 894, 934, 956, 976, 1027, 1028, 1115, 1221, 1228], "utf": [37, 58, 78, 296, 855], "bom": [37, 58, 296, 855], "header": [37, 40, 45, 58, 60, 111, 115, 116, 120, 129, 167, 223, 262, 296, 855], "field": [37, 39, 58, 71, 100, 102, 107, 257, 264, 296, 499, 560, 602, 603, 604, 624, 625, 645, 681, 682, 685, 686, 710, 728, 746, 828, 855, 915, 1063, 1088, 1097, 1145, 1164, 1166, 1167, 1188, 1190, 1221], "symbol": [37, 58, 115, 116, 129, 296, 746, 855], "end": [37, 40, 58, 115, 116, 127, 129, 185, 296, 329, 332, 333, 364, 393, 418, 442, 493, 593, 599, 602, 613, 622, 626, 629, 632, 670, 690, 691, 693, 694, 697, 705, 706, 733, 734, 736, 746, 784, 789, 796, 807, 855, 858, 885, 922, 955, 1000, 1057, 1141, 1144, 1155, 1164, 1168, 1221], "byte": [37, 45, 58, 60, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 169, 296, 607, 609, 855, 977, 1149, 1151, 1221], "quot": [37, 38, 58, 115, 116, 129, 296, 855], "specifi": [37, 40, 58, 79, 91, 100, 102, 120, 126, 145, 156, 157, 164, 169, 170, 173, 184, 185, 186, 187, 188, 189, 204, 221, 232, 233, 235, 238, 239, 240, 242, 246, 261, 264, 271, 272, 275, 296, 340, 415, 416, 417, 418, 423, 542, 556, 557, 565, 566, 567, 568, 569, 571, 572, 573, 579, 589, 673, 675, 676, 677, 690, 691, 693, 694, 697, 725, 728, 733, 734, 746, 762, 764, 772, 776, 779, 783, 784, 785, 786, 787, 788, 792, 811, 813, 814, 816, 817, 821, 826, 828, 832, 833, 836, 855, 899, 977, 978, 979, 980, 986, 1094, 1120, 1221], "defin": [37, 40, 48, 58, 117, 142, 143, 145, 154, 157, 166, 170, 185, 186, 188, 189, 208, 219, 222, 232, 266, 277, 282, 296, 310, 442, 476, 497, 510, 546, 550, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 668, 690, 691, 693, 694, 708, 711, 728, 733, 734, 746, 764, 773, 776, 784, 785, 787, 788, 806, 811, 829, 838, 843, 855, 858, 865, 1000, 1040, 1070, 1088, 1098, 1221], "chrono": [37, 58, 296, 396, 399, 633, 634, 635, 639, 855, 958, 961, 1175, 1176, 1177, 1181], "rust": [37, 45, 58, 97, 117, 121, 123, 127, 208, 282, 296, 603, 855, 1070, 1145, 1221], "crate": [37, 58, 296, 593, 595, 596, 601, 602, 603, 616, 617, 633, 634, 635, 639, 855, 858, 1135, 1137, 1138, 1143, 1144, 1145, 1158, 1159, 1175, 1176, 1177, 1181], "fraction": [37, 58, 138, 139, 140, 141, 236, 296, 394, 487, 543, 576, 633, 635, 746, 855, 956, 1051, 1084, 1112, 1175, 1177, 1221], "second": [37, 58, 138, 139, 140, 141, 144, 185, 205, 232, 267, 296, 389, 393, 406, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 633, 635, 690, 691, 692, 693, 694, 695, 732, 733, 734, 736, 746, 784, 793, 811, 855, 858, 951, 955, 968, 969, 1175, 1177, 1229], "infer": [37, 58, 71, 104, 106, 107, 108, 109, 110, 115, 116, 117, 120, 124, 125, 127, 129, 133, 134, 154, 208, 296, 407, 558, 604, 605, 633, 634, 635, 636, 639, 722, 746, 855, 955, 969, 1095, 1146, 1147, 1175, 1176, 1177, 1178, 1181, 1221], "timeunit": [37, 48, 50, 58, 296, 365, 366, 398, 410, 635, 690, 691, 692, 693, 694, 695, 855, 858, 923, 924, 960, 972, 1177], "frame": [37, 38, 40, 58, 64, 65, 66, 67, 68, 69, 79, 86, 87, 107, 116, 120, 126, 138, 139, 145, 157, 158, 202, 203, 208, 215, 219, 222, 233, 234, 235, 258, 265, 266, 296, 764, 765, 803, 806, 829, 855, 858, 898, 1221, 1228, 1229], "repres": [37, 40, 58, 62, 77, 104, 106, 108, 109, 110, 117, 120, 247, 268, 274, 296, 451, 453, 508, 591, 661, 664, 678, 680, 695, 697, 708, 710, 711, 723, 724, 727, 735, 742, 746, 822, 830, 855, 1113, 1117, 1132, 1210, 1221], "necessari": [37, 58, 70, 89, 120, 257, 296, 855], "non_numer": [37, 58, 296, 855], "never": [37, 58, 117, 163, 204, 233, 296, 792, 855], "strategi": [37, 58, 79, 87, 115, 142, 143, 144, 145, 147, 173, 185, 188, 204, 205, 218, 266, 296, 310, 423, 499, 510, 746, 779, 784, 787, 792, 793, 829, 855, 986, 1063, 1221], "put": [37, 58, 296, 855], "around": [37, 58, 296, 855], "thei": [37, 40, 58, 70, 86, 87, 88, 89, 107, 129, 151, 206, 235, 296, 618, 629, 630, 746, 768, 855, 858], "record": [37, 42, 58, 123, 135, 205, 257, 296, 793, 855], "termin": [37, 58, 296, 855], "indistinguish": [37, 58, 296, 855], "even": [37, 58, 115, 296, 546, 550, 746, 855, 1088, 1221], "invalid": [37, 58, 115, 116, 129, 296, 604, 606, 637, 656, 746, 855, 1146, 1148, 1179], "g": [37, 58, 114, 115, 116, 119, 120, 121, 122, 123, 124, 125, 126, 128, 130, 132, 135, 153, 201, 257, 265, 296, 303, 310, 418, 510, 581, 697, 746, 771, 809, 855, 976, 1115, 1202, 1221, 1229], "pars": [37, 58, 64, 115, 116, 120, 125, 129, 132, 133, 156, 184, 187, 238, 239, 242, 246, 261, 271, 272, 275, 296, 340, 442, 509, 542, 557, 589, 604, 605, 615, 636, 637, 665, 667, 673, 675, 676, 677, 684, 688, 701, 713, 717, 725, 726, 728, 730, 736, 746, 762, 783, 786, 813, 814, 817, 821, 826, 832, 833, 836, 855, 899, 1000, 1094, 1120, 1146, 1147, 1157, 1177, 1178, 1179, 1221], "valid": [37, 40, 48, 58, 64, 117, 121, 123, 127, 147, 151, 169, 204, 296, 357, 593, 595, 596, 601, 602, 603, 606, 616, 617, 736, 746, 792, 855, 858, 914, 977, 993, 1135, 1137, 1138, 1143, 1144, 1145, 1148, 1158, 1159, 1221], "integ": [37, 40, 54, 55, 56, 57, 58, 73, 74, 75, 76, 136, 143, 145, 146, 148, 166, 185, 232, 255, 296, 307, 339, 394, 427, 428, 541, 550, 555, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 615, 637, 663, 670, 701, 705, 706, 722, 746, 773, 784, 811, 855, 858, 896, 956, 989, 1010, 1088, 1092, 1106, 1113, 1117, 1157, 1179, 1221, 1228, 1229], "aren": [37, 58, 296, 855], "t": [37, 39, 58, 66, 67, 87, 115, 120, 126, 129, 185, 208, 222, 263, 265, 296, 310, 357, 364, 372, 392, 412, 415, 416, 417, 473, 510, 542, 546, 601, 630, 633, 635, 736, 746, 784, 806, 827, 855, 858, 914, 954, 975, 976, 978, 979, 980, 1037, 1070, 1115, 1143, 1171, 1172, 1175, 1177, 1202, 1211, 1221], "strictli": [37, 58, 70, 89, 296, 777, 855], "table_nam": [38, 40, 296], "connect": [38, 115, 117, 118, 121, 123, 127, 132, 134, 135, 296, 759], "if_table_exist": [38, 296], "dbwritemod": [38, 296], "fail": [38, 39, 105, 119, 121, 125, 127, 130, 134, 138, 139, 153, 263, 296, 321, 397, 499, 633, 634, 635, 639, 746, 827, 855, 1070, 1175, 1176, 1177, 1181, 1221], "dbwriteengin": [38, 296], "sqlalchemi": [38, 117, 137, 296], "databas": [38, 117, 118, 296, 758], "qualifi": [38, 296], "creat": [38, 40, 70, 89, 104, 108, 110, 117, 118, 130, 131, 143, 144, 145, 146, 147, 148, 158, 159, 185, 186, 189, 220, 223, 232, 267, 271, 296, 366, 393, 407, 499, 554, 562, 565, 566, 568, 571, 572, 573, 622, 676, 689, 690, 691, 692, 693, 694, 695, 732, 733, 734, 742, 746, 765, 766, 775, 784, 785, 788, 811, 832, 855, 898, 902, 915, 924, 955, 969, 1081, 1088, 1091, 1164, 1202, 1221, 1228, 1229], "append": [38, 39, 145, 171, 204, 205, 296, 554, 736, 746, 792, 793, 855, 983, 1221], "your": [38, 40, 70, 79, 89, 115, 116, 117, 120, 135, 202, 208, 234, 235, 238, 254, 271, 275, 282, 296, 310, 510, 603, 633, 634, 635, 642, 711, 746, 789, 796, 798, 813, 832, 836, 843, 855, 1070, 1145, 1175, 1176, 1177, 1184, 1221, 1229], "special": [38, 115, 116, 129, 296, 564, 602, 746, 865, 1070, 1100, 1144, 1221], "uri": [38, 39, 117, 118, 119, 130, 131, 296], "postgresql": [38, 117, 118, 296, 542, 746], "user": [38, 117, 118, 154, 208, 222, 277, 282, 296, 310, 508, 510, 546, 578, 668, 711, 746, 806, 838, 843, 855, 865, 1070, 1118, 1221], "pass": [38, 39, 40, 45, 67, 79, 106, 117, 118, 120, 127, 129, 134, 135, 138, 140, 143, 145, 147, 156, 161, 164, 184, 185, 188, 191, 207, 221, 222, 232, 238, 242, 246, 250, 261, 267, 271, 275, 296, 310, 373, 389, 392, 421, 440, 492, 509, 510, 542, 546, 557, 562, 565, 566, 567, 568, 569, 571, 572, 573, 579, 589, 628, 629, 630, 664, 673, 679, 690, 701, 728, 736, 742, 746, 762, 772, 783, 784, 785, 787, 788, 790, 797, 798, 806, 811, 813, 817, 819, 821, 826, 832, 836, 843, 855, 865, 931, 954, 984, 995, 1025, 1056, 1069, 1070, 1094, 1120, 1170, 1171, 1172, 1192, 1221], "server": [38, 117, 118, 296], "port": [38, 115, 117, 118, 121, 123, 132, 296], "sqlite": [38, 117, 296], "db": [38, 118, 296], "replac": [38, 39, 115, 116, 129, 172, 173, 229, 230, 262, 271, 272, 296, 366, 392, 508, 509, 617, 618, 746, 778, 832, 833, 855, 924, 954, 1069, 1113, 1116, 1117, 1159, 1160, 1221], "insert": [38, 115, 116, 121, 123, 127, 129, 132, 133, 134, 194, 195, 228, 262, 264, 296, 577, 592, 642, 746, 828, 855, 1114, 1134, 1184, 1221], "mode": [38, 39, 58, 59, 60, 64, 138, 140, 223, 296, 602, 719, 722, 737, 746, 767, 855, 1144, 1221, 1228], "new": [38, 39, 40, 120, 129, 151, 179, 193, 194, 195, 208, 219, 220, 227, 228, 251, 262, 264, 265, 266, 271, 272, 296, 305, 366, 420, 432, 441, 507, 530, 557, 616, 617, 624, 625, 643, 645, 651, 742, 746, 758, 782, 809, 825, 828, 829, 832, 833, 838, 843, 855, 861, 924, 982, 991, 1081, 1093, 1094, 1158, 1159, 1166, 1167, 1185, 1188, 1194, 1199, 1221, 1228], "alreadi": [38, 39, 296, 357, 473, 660, 746, 914, 1037, 1209, 1221], "adbc": [38, 117, 118, 296], "affect": [38, 138, 139, 140, 141, 296], "driver": [38, 117, 118, 296], "provid": [38, 40, 67, 115, 116, 118, 119, 127, 129, 130, 131, 134, 145, 147, 174, 200, 296, 330, 331, 418, 438, 499, 508, 510, 597, 598, 601, 604, 606, 629, 630, 631, 632, 701, 728, 746, 758, 780, 855, 883, 884, 996, 1022, 1070, 1139, 1140, 1143, 1146, 1148, 1221, 1228, 1229], "otherwis": [38, 84, 117, 120, 144, 149, 208, 215, 235, 238, 282, 296, 330, 340, 358, 415, 416, 417, 499, 510, 518, 546, 550, 555, 566, 567, 568, 569, 571, 573, 593, 597, 664, 679, 711, 736, 746, 803, 813, 843, 855, 883, 899, 915, 978, 979, 980, 1063, 1070, 1088, 1092, 1113, 1116, 1135, 1139, 1221], "deltalak": [39, 119, 130, 137, 296], "deltat": [39, 296], "ignor": [39, 144, 145, 147, 211, 212, 248, 249, 266, 296, 306, 308, 360, 392, 415, 416, 417, 471, 535, 536, 592, 664, 666, 746, 862, 863, 917, 954, 978, 979, 980, 1035, 1079, 1080, 1134, 1221], "overwrite_schema": [39, 296], "storage_opt": [39, 115, 119, 121, 123, 127, 130, 131, 132, 134, 296], "delta_write_opt": [39, 296], "merg": [39, 215, 296, 803, 855], "delta_merge_opt": [39, 296], "tablemerg": [39, 296], "delta": [39, 50, 119, 130, 247, 268, 296, 571, 573, 591, 661, 678, 680, 723, 724, 727, 735, 746, 758, 822, 830, 855, 1107, 1109, 1132, 1210, 1221], "handl": [39, 87, 111, 115, 116, 129, 135, 296, 360, 471, 642, 746, 767, 855, 917, 1035, 1184, 1221], "throw": [39, 157, 296, 335, 604, 606, 746, 764, 855, 888, 1146, 1148, 1221], "add": [39, 40, 116, 171, 185, 188, 208, 271, 272, 273, 296, 358, 531, 532, 548, 550, 647, 695, 699, 736, 746, 784, 787, 792, 832, 833, 834, 835, 855, 983, 1221], "anyth": [39, 233, 296], "updat": [39, 163, 296, 855], "extra": [39, 45, 60, 115, 116, 119, 120, 121, 123, 129, 130, 131, 132, 171, 185, 296, 746, 784, 855, 983, 1221], "storag": [39, 115, 119, 121, 123, 127, 130, 131, 132, 134, 296], "backend": [39, 117, 118, 119, 130, 131, 296], "cloud": [39, 117, 119, 127, 130, 131, 134, 135, 296], "configur": [39, 119, 130, 131, 151, 296], "authent": [39, 119, 130, 131, 296], "see": [39, 40, 41, 42, 48, 117, 118, 119, 120, 127, 130, 131, 134, 138, 139, 140, 141, 145, 147, 161, 185, 204, 222, 223, 296, 340, 423, 458, 508, 586, 593, 601, 602, 616, 690, 691, 693, 694, 721, 733, 734, 742, 746, 767, 784, 855, 858, 893, 899, 1023, 1128, 1135, 1143, 1144, 1158, 1221, 1229], "here": [39, 40, 45, 104, 106, 107, 108, 110, 117, 118, 119, 124, 125, 127, 130, 131, 133, 134, 143, 145, 147, 296, 510, 603, 606, 746, 855, 1148], "gc": [39, 119, 130, 131, 296], "azur": [39, 119, 127, 130, 131, 134, 296], "keyword": [39, 67, 119, 127, 130, 161, 222, 233, 238, 239, 271, 272, 275, 296, 546, 725, 728, 736, 746, 806, 813, 814, 832, 833, 836, 855, 1221], "argument": [39, 45, 89, 115, 119, 127, 129, 130, 161, 164, 170, 184, 185, 186, 187, 188, 189, 209, 211, 216, 221, 222, 223, 232, 238, 239, 240, 246, 248, 258, 264, 267, 271, 272, 275, 296, 393, 407, 418, 442, 542, 546, 562, 565, 566, 567, 568, 569, 571, 572, 573, 589, 628, 629, 630, 664, 671, 672, 673, 675, 676, 677, 679, 697, 725, 728, 736, 746, 772, 776, 783, 784, 785, 786, 787, 788, 806, 811, 813, 814, 816, 821, 828, 832, 833, 836, 855, 955, 969, 1000, 1170, 1171, 1172, 1203, 1221], "while": [39, 86, 116, 119, 120, 130, 145, 147, 151, 202, 214, 262, 266, 296, 608, 768, 802, 829, 855, 993, 1150, 1221], "lake": [39, 119, 130, 296, 758], "typeerror": [39, 296], "unsupport": [39, 296], "arrowinvaliderror": [39, 296], "could": [39, 77, 92, 157, 296, 335, 681, 685, 695, 699, 746, 764, 773, 855, 888, 993, 1221], "primit": [39, 296, 447, 746, 1202, 1221], "tablenotfounderror": [39, 296], "doesn": [39, 115, 129, 185, 296, 412, 746, 784, 855, 975, 1211, 1221], "action": [39, 296], "trigger": [39, 258, 296, 746, 1203, 1221], "categor": [39, 51, 70, 88, 89, 105, 138, 139, 140, 141, 204, 255, 296, 336, 337, 358, 550, 557, 654, 746, 858, 889, 890, 891, 892, 893, 894, 915, 1088, 1094, 1204, 1221], "protocol": [39, 105, 118, 153, 296], "nullabl": [39, 296], "To": [39, 86, 172, 209, 211, 216, 248, 296, 340, 362, 363, 423, 593, 601, 602, 616, 629, 630, 631, 632, 640, 746, 778, 855, 899, 919, 920, 993, 1135, 1143, 1144, 1158, 1182, 1202, 1221], "pyarrow": [39, 45, 104, 105, 109, 115, 118, 119, 121, 123, 127, 130, 135, 137, 252, 257, 258, 296, 759, 1197, 1201, 1202, 1203, 1221], "ha": [39, 40, 79, 86, 117, 120, 129, 153, 154, 175, 178, 185, 186, 187, 188, 189, 194, 229, 232, 251, 267, 277, 296, 310, 334, 352, 353, 354, 355, 356, 357, 445, 449, 452, 457, 469, 482, 497, 506, 507, 509, 519, 548, 562, 563, 565, 566, 567, 568, 569, 571, 572, 573, 595, 605, 609, 610, 611, 612, 615, 620, 621, 627, 647, 650, 651, 655, 668, 687, 688, 698, 707, 709, 742, 746, 768, 784, 785, 786, 787, 788, 797, 811, 825, 838, 843, 855, 865, 887, 898, 910, 911, 912, 913, 914, 916, 993, 1005, 1007, 1011, 1033, 1046, 1061, 1069, 1099, 1115, 1117, 1137, 1147, 1151, 1152, 1153, 1154, 1157, 1162, 1163, 1169, 1193, 1194, 1205, 1221], "last": [39, 138, 139, 140, 141, 156, 191, 205, 207, 223, 235, 246, 250, 261, 263, 290, 296, 320, 357, 370, 385, 390, 408, 449, 450, 457, 477, 496, 499, 529, 531, 532, 533, 534, 548, 588, 625, 647, 649, 731, 746, 762, 793, 821, 824, 826, 827, 851, 855, 858, 874, 914, 928, 947, 952, 970, 995, 1011, 1012, 1025, 1041, 1060, 1167, 1192, 1221], "filesystem": [39, 119, 130, 131, 296], "table_path": [39, 119, 130, 131, 296], "match": [39, 40, 48, 87, 98, 104, 106, 107, 108, 110, 124, 125, 133, 138, 139, 140, 141, 173, 204, 205, 233, 266, 296, 516, 557, 570, 593, 594, 595, 596, 599, 601, 602, 604, 606, 616, 617, 618, 626, 633, 634, 635, 736, 746, 779, 792, 793, 829, 855, 858, 1010, 1019, 1094, 1106, 1135, 1136, 1137, 1138, 1141, 1143, 1144, 1146, 1148, 1158, 1159, 1160, 1168, 1175, 1176, 1177, 1221], "version": [39, 84, 89, 119, 120, 130, 137, 153, 154, 175, 178, 185, 186, 187, 188, 189, 190, 194, 209, 211, 216, 229, 243, 248, 251, 277, 296, 310, 341, 342, 352, 353, 354, 355, 356, 371, 375, 379, 381, 383, 385, 386, 388, 392, 395, 407, 436, 445, 449, 452, 457, 469, 482, 497, 506, 507, 509, 548, 563, 580, 594, 595, 605, 609, 610, 611, 612, 615, 620, 621, 627, 633, 635, 647, 650, 651, 668, 687, 688, 690, 692, 709, 721, 746, 784, 785, 786, 787, 788, 797, 818, 825, 838, 855, 865, 900, 901, 910, 911, 912, 913, 915, 929, 933, 940, 942, 945, 947, 948, 950, 954, 955, 957, 969, 994, 1001, 1005, 1007, 1010, 1011, 1017, 1019, 1021, 1033, 1046, 1061, 1069, 1088, 1099, 1115, 1117, 1121, 1136, 1137, 1147, 1151, 1152, 1153, 1154, 1157, 1162, 1163, 1169, 1175, 1177, 1193, 1194, 1211, 1221], "old": [39, 227, 296, 557, 746, 809, 855, 1094, 1221], "existing_table_path": [39, 296], "store": [39, 115, 127, 131, 171, 202, 234, 296, 336, 890, 983, 1221], "bucket": [39, 119, 130, 131, 134, 296, 393, 407, 438, 746, 955, 969, 996, 1221], "prefix": [39, 151, 296, 305, 333, 507, 530, 532, 533, 534, 626, 630, 631, 642, 647, 746, 858, 886, 1168, 1173, 1184], "aws_region": [39, 130, 134, 296], "the_aws_region": [39, 296], "aws_access_key_id": [39, 119, 130, 134, 296], "the_aws_access_key_id": [39, 119, 130, 131, 296], "aws_secret_access_kei": [39, 119, 130, 134, 296], "the_aws_secret_access_kei": [39, 119, 130, 131, 296], "pa": [39, 104, 135, 296], "check": [39, 48, 115, 116, 129, 138, 139, 140, 141, 150, 168, 178, 185, 186, 188, 189, 198, 200, 204, 232, 296, 329, 332, 333, 442, 447, 468, 562, 593, 599, 626, 746, 784, 785, 787, 788, 792, 797, 798, 811, 855, 882, 885, 886, 976, 1001, 1003, 1007, 1008, 1010, 1017, 1018, 1019, 1021, 1022, 1032, 1115, 1135, 1141, 1168, 1221], "doc": [39, 41, 42, 118, 138, 140, 161, 296], "evolut": [39, 296], "yet": [39, 296], "packag": [39, 117, 120, 296], "therefor": [39, 105, 169, 296, 510, 736, 746, 977, 1221], "effect": [39, 40, 177, 185, 188, 257, 296, 372, 510, 690, 691, 746, 784, 787, 835, 855, 922, 930], "predic": [39, 58, 59, 60, 85, 86, 129, 132, 133, 134, 135, 174, 200, 233, 296, 424, 662, 699, 736, 746, 767, 768, 775, 777, 780, 797, 798, 807, 809, 819, 835, 855, 987, 1113, 1116, 1221], "source_alia": [39, 296], "target_alia": [39, 296], "when_matched_update_al": [39, 296], "when_not_matched_insert_al": [39, 296], "execut": [39, 65, 66, 68, 70, 87, 117, 206, 296, 473, 660, 746, 763, 797, 798, 807, 855, 1037, 1209, 1221, 1228], "workbook": [40, 120, 296], "worksheet": [40, 120, 126, 296], "posit": [40, 164, 170, 184, 187, 221, 238, 239, 240, 242, 246, 264, 271, 272, 275, 296, 415, 416, 417, 418, 492, 542, 550, 579, 589, 603, 615, 637, 671, 672, 673, 675, 676, 677, 697, 725, 728, 746, 772, 776, 783, 786, 813, 814, 816, 817, 821, 828, 832, 833, 836, 855, 978, 979, 980, 1056, 1088, 1120, 1145, 1157, 1179, 1221], "tupl": [40, 118, 120, 126, 154, 202, 208, 233, 234, 235, 241, 274, 296, 558, 746, 807, 819, 855, 858, 1095, 1221], "a1": [40, 80, 82, 296], "table_styl": [40, 296], "column_format": [40, 296], "columnformatdict": [40, 296], "dtype_format": [40, 296], "oneormoredatatyp": [40, 143, 296, 1019, 1221], "conditional_format": [40, 296], "conditionalformatdict": [40, 296], "header_format": [40, 296], "column_tot": [40, 296], "columntotalsdefinit": [40, 296], "column_width": [40, 296], "columnwidthsdefinit": [40, 296], "row_tot": [40, 296], "rowtotalsdefinit": [40, 296], "row_height": [40, 296], "sparklin": [40, 296], "sequenc": [40, 71, 79, 104, 106, 107, 108, 110, 115, 116, 117, 120, 124, 125, 126, 129, 133, 143, 144, 145, 156, 163, 170, 171, 204, 205, 214, 219, 221, 222, 223, 235, 246, 255, 261, 265, 266, 267, 296, 358, 447, 499, 506, 508, 546, 550, 557, 589, 631, 632, 645, 668, 673, 681, 682, 685, 686, 699, 701, 709, 710, 711, 721, 726, 746, 762, 776, 792, 793, 802, 806, 821, 826, 829, 855, 915, 916, 983, 1063, 1088, 1094, 1113, 1117, 1188, 1221], "formula": [40, 296, 412, 746, 975, 1221], "autofilt": [40, 296], "autofit": [40, 296], "hidden_column": [40, 296], "selectortyp": [40, 296, 858], "hide_gridlin": [40, 296], "sheet_zoom": [40, 296], "freeze_pan": [40, 296], "excel": [40, 120, 296], "open": [40, 114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 127, 128, 132, 134, 296, 771, 855], "xlsxwriter": [40, 137, 296], "close": [40, 117, 185, 186, 188, 189, 232, 296, 358, 442, 503, 550, 562, 565, 566, 567, 568, 569, 571, 572, 573, 586, 690, 691, 693, 694, 733, 734, 746, 784, 785, 787, 788, 811, 855, 915, 1000, 1088, 1128, 1221], "xlsx": [40, 120, 296], "work": [40, 49, 51, 105, 116, 135, 228, 239, 272, 296, 306, 308, 310, 327, 339, 340, 418, 427, 473, 500, 510, 542, 561, 607, 608, 657, 746, 814, 833, 855, 858, 862, 863, 881, 896, 899, 989, 1037, 1064, 1149, 1150, 1206, 1221], "directori": [40, 45, 127, 296], "sheet1": [40, 296], "medium": [40, 296], "kei": [40, 79, 84, 87, 127, 131, 134, 185, 202, 204, 205, 215, 221, 223, 227, 231, 234, 235, 266, 296, 510, 557, 728, 746, 777, 784, 792, 793, 803, 809, 810, 829, 855, 1094, 1221], "follow": [40, 45, 84, 115, 116, 119, 129, 130, 131, 138, 185, 205, 208, 222, 232, 267, 296, 389, 393, 407, 546, 553, 562, 565, 566, 567, 568, 569, 570, 571, 572, 573, 645, 656, 690, 691, 693, 694, 711, 733, 734, 736, 738, 739, 741, 746, 747, 748, 751, 753, 754, 755, 784, 793, 806, 811, 855, 951, 955, 969, 1090, 1113, 1116, 1213, 1215, 1217, 1221, 1222, 1225, 1226, 1227, 1229], "first_column": [40, 296], "last_column": [40, 296], "banded_column": [40, 296], "banded_row": [40, 296], "sheet": [40, 120, 126, 296], "chart": [40, 296, 807, 855], "subsequ": [40, 69, 226, 258, 296, 499, 736, 775, 855], "colnam": [40, 129, 145, 167, 296, 736, 774, 855], "given": [40, 64, 65, 79, 104, 106, 107, 108, 110, 115, 116, 117, 118, 120, 124, 125, 126, 129, 133, 134, 140, 141, 142, 143, 145, 146, 147, 148, 154, 156, 169, 170, 172, 185, 186, 188, 189, 200, 208, 221, 222, 232, 233, 235, 242, 243, 246, 261, 266, 296, 340, 364, 367, 396, 398, 399, 412, 438, 442, 468, 492, 499, 501, 510, 542, 546, 553, 556, 558, 562, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 577, 579, 580, 602, 603, 613, 614, 633, 635, 642, 645, 668, 697, 709, 710, 711, 722, 723, 724, 746, 762, 776, 784, 785, 787, 788, 797, 798, 806, 811, 817, 818, 821, 826, 829, 838, 843, 855, 858, 865, 899, 922, 925, 958, 960, 961, 975, 977, 996, 1000, 1022, 1032, 1056, 1063, 1065, 1068, 1070, 1081, 1090, 1095, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1114, 1120, 1121, 1144, 1145, 1155, 1156, 1175, 1177, 1184, 1208, 1212, 1221, 1228, 1229], "dd": [40, 296], "mm": [40, 296], "yyyi": [40, 296], "overridden": [40, 104, 106, 108, 110, 124, 125, 149, 296, 855], "basi": [40, 145, 296], "param": [40, 104, 106, 107, 108, 110, 115, 116, 124, 125, 129, 144, 145, 147, 233, 296, 855], "It": [40, 70, 89, 163, 215, 222, 282, 296, 518, 561, 742, 746, 797, 798, 803, 843, 855, 1113, 1116, 1221], "float_dtyp": [40, 296], "simplifi": [40, 58, 59, 60, 85, 86, 296, 767, 768, 775, 777, 807, 819, 855], "uniform": [40, 296, 550, 746, 1088, 1221], "condit": [40, 166, 174, 233, 296, 599, 626, 674, 699, 736, 773, 780, 855], "suppli": [40, 104, 106, 107, 108, 110, 117, 124, 125, 133, 174, 233, 296, 546, 746, 780, 855], "typenam": [40, 296], "3_color_scal": [40, 296], "data_bar": [40, 296], "make": [40, 71, 87, 104, 109, 115, 116, 121, 123, 127, 132, 215, 219, 226, 267, 296, 416, 417, 438, 533, 534, 542, 556, 624, 746, 803, 855, 979, 980, 996, 1166, 1221, 1229], "icon": [40, 296], "multipl": [40, 67, 85, 86, 87, 115, 116, 120, 126, 129, 132, 133, 134, 143, 147, 156, 164, 169, 171, 174, 184, 185, 193, 203, 221, 223, 235, 238, 240, 246, 261, 266, 271, 275, 296, 476, 497, 515, 519, 526, 527, 542, 557, 558, 561, 565, 566, 567, 568, 569, 571, 572, 573, 589, 673, 685, 686, 699, 709, 710, 712, 716, 721, 726, 729, 736, 742, 746, 762, 767, 768, 772, 780, 783, 784, 813, 816, 821, 826, 829, 832, 836, 843, 855, 864, 977, 983, 1040, 1061, 1075, 1094, 1095, 1221], "singl": [40, 65, 79, 86, 87, 115, 116, 117, 118, 120, 127, 129, 134, 143, 157, 164, 165, 166, 171, 180, 190, 200, 204, 208, 221, 233, 235, 246, 296, 310, 340, 389, 424, 431, 434, 436, 469, 470, 476, 497, 508, 510, 554, 557, 558, 589, 592, 662, 668, 673, 676, 677, 706, 710, 711, 726, 734, 746, 764, 767, 772, 773, 792, 821, 855, 899, 951, 983, 994, 1033, 1034, 1040, 1091, 1094, 1095, 1134, 1197, 1221], "across": [40, 79, 190, 210, 212, 217, 249, 296, 436, 665, 667, 681, 682, 684, 688, 713, 717, 730, 746, 994, 1221], "heatmap": [40, 296], "min": [40, 45, 60, 163, 173, 217, 223, 232, 296, 342, 349, 354, 423, 542, 553, 562, 568, 717, 725, 746, 779, 811, 855, 901, 907, 911, 916, 986, 1090, 1104, 1221, 1229], "entir": [40, 296, 767, 855], "made": [40, 117, 296, 1202, 1221], "abov": [40, 138, 223, 296, 736], "than": [40, 58, 59, 60, 103, 108, 110, 115, 116, 117, 120, 126, 129, 135, 145, 147, 158, 184, 187, 202, 205, 208, 221, 233, 234, 236, 265, 282, 296, 433, 435, 460, 487, 505, 510, 521, 550, 561, 576, 586, 607, 613, 614, 625, 642, 678, 690, 711, 746, 767, 783, 786, 793, 843, 855, 1051, 1070, 1088, 1098, 1112, 1128, 1149, 1155, 1156, 1167, 1184, 1221, 1229], "bold": [40, 296], "font_color": [40, 296], "702963": [40, 296], "total": [40, 169, 278, 296, 371, 375, 379, 381, 383, 388, 395, 400, 401, 402, 403, 404, 405, 406, 461, 481, 679, 746, 839, 929, 933, 940, 942, 945, 950, 957, 962, 963, 964, 965, 966, 967, 968, 977, 1024, 1045, 1221], "export": [40, 202, 203, 234, 235, 254, 257, 296, 742], "associ": [40, 65, 67, 79, 118, 144, 235, 296], "sum": [40, 64, 169, 177, 184, 185, 200, 223, 232, 249, 275, 296, 350, 351, 356, 412, 424, 499, 510, 518, 520, 521, 522, 557, 562, 572, 662, 664, 681, 683, 684, 685, 687, 688, 699, 711, 721, 730, 746, 767, 768, 771, 775, 777, 783, 784, 805, 807, 811, 815, 819, 836, 855, 858, 908, 909, 913, 975, 977, 1108, 1221], "must": [40, 105, 106, 119, 130, 131, 135, 163, 170, 185, 186, 188, 189, 205, 215, 232, 233, 296, 358, 499, 508, 550, 557, 562, 565, 566, 567, 568, 569, 571, 572, 573, 736, 746, 776, 784, 785, 787, 788, 793, 797, 798, 803, 811, 855, 915, 916, 1088, 1094, 1221], "funcnam": [40, 296], "averag": [40, 296, 415, 416, 417, 553, 746, 978, 979, 980, 1090, 1221], "count_num": [40, 296], "count": [40, 64, 115, 116, 121, 123, 127, 129, 132, 133, 134, 135, 155, 163, 185, 205, 219, 220, 223, 232, 262, 266, 267, 273, 282, 287, 296, 311, 347, 352, 389, 438, 461, 469, 470, 481, 510, 518, 520, 528, 540, 562, 565, 566, 567, 568, 569, 571, 572, 573, 595, 596, 658, 660, 669, 718, 746, 761, 784, 793, 805, 811, 835, 843, 848, 855, 916, 951, 991, 996, 1024, 1033, 1034, 1045, 1077, 1083, 1137, 1138, 1207, 1209, 1221], "std_dev": [40, 296], "var": [40, 148, 296, 573, 746, 855, 1221], "pixel": [40, 296], "unit": [40, 48, 50, 138, 139, 140, 141, 145, 147, 169, 296, 365, 366, 373, 398, 410, 504, 519, 633, 635, 659, 690, 691, 692, 693, 694, 695, 701, 746, 807, 855, 858, 923, 924, 931, 960, 972, 977, 1068, 1175, 1177, 1208, 1221, 1229], "hand": [40, 115, 116, 129, 296, 488, 489, 490, 491, 1052, 1053, 1054, 1055], "side": [40, 185, 186, 188, 189, 232, 296, 442, 488, 489, 490, 491, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 690, 691, 693, 694, 733, 734, 746, 784, 785, 787, 788, 811, 855, 1000, 1052, 1053, 1054, 1055, 1114, 1221], "call": [40, 68, 70, 89, 116, 117, 138, 139, 140, 141, 145, 147, 151, 184, 185, 188, 206, 208, 232, 295, 296, 310, 348, 351, 457, 510, 529, 531, 532, 533, 534, 548, 582, 647, 742, 746, 759, 783, 784, 785, 787, 788, 811, 854, 855, 858, 865, 1070, 1124, 1221], "ad": [40, 107, 120, 185, 188, 262, 266, 271, 272, 296, 309, 421, 681, 682, 685, 686, 746, 784, 787, 829, 832, 833, 855, 915, 984, 1088, 1221], "wise": [40, 79, 117, 177, 296, 312, 313, 314, 315, 316, 317, 343, 344, 345, 419, 502, 583, 584, 585, 652, 653, 685, 686, 699, 721, 746, 866, 867, 868, 869, 870, 871, 903, 904, 905, 981, 1066, 1067, 1125, 1126, 1127, 1195, 1196, 1221], "particip": [40, 296], "distinct": [40, 147, 221, 296, 327, 445, 446, 449, 450, 500, 553, 695, 746, 881, 1005, 1006, 1011, 1012, 1064, 1090, 1221, 1229], "referenc": [40, 296, 645], "differ": [40, 115, 135, 138, 140, 171, 185, 190, 202, 232, 234, 235, 254, 262, 296, 360, 370, 389, 390, 392, 408, 414, 436, 471, 488, 490, 499, 510, 535, 536, 538, 557, 633, 658, 698, 701, 707, 746, 775, 784, 811, 855, 858, 893, 917, 928, 951, 952, 954, 970, 976, 983, 994, 1035, 1052, 1054, 1070, 1079, 1080, 1094, 1115, 1175, 1221], "row_index": [40, 296], "height": [40, 166, 296], "intersect": [40, 296, 489, 858, 1053], "bodi": [40, 296], "start": [40, 114, 115, 116, 117, 118, 121, 123, 126, 127, 129, 132, 133, 134, 149, 179, 184, 185, 187, 188, 206, 245, 251, 267, 273, 296, 329, 332, 333, 370, 384, 390, 393, 407, 408, 418, 432, 442, 493, 565, 566, 568, 571, 572, 573, 587, 593, 599, 602, 614, 622, 626, 630, 631, 642, 651, 670, 681, 685, 690, 691, 693, 694, 697, 699, 705, 706, 733, 734, 736, 746, 782, 783, 784, 786, 787, 807, 820, 825, 835, 855, 858, 886, 923, 925, 928, 931, 932, 939, 941, 944, 946, 949, 952, 955, 960, 969, 970, 991, 1000, 1057, 1129, 1141, 1144, 1156, 1164, 1168, 1184, 1194, 1221, 1229], "unless": [40, 79, 106, 258, 296, 628, 629, 722, 855, 1170, 1203, 1211, 1221], "marker": [40, 296], "compliant": [40, 296], "case": [40, 70, 79, 86, 104, 106, 107, 108, 110, 117, 124, 125, 133, 134, 149, 154, 171, 185, 186, 188, 189, 202, 208, 232, 234, 235, 254, 296, 364, 507, 508, 518, 519, 530, 562, 593, 594, 602, 616, 618, 746, 768, 784, 785, 787, 788, 811, 855, 858, 922, 983, 1135, 1136, 1144, 1158, 1160, 1221], "three": [40, 260, 296, 358, 550, 577, 746, 915, 1063, 1088, 1221], "avail": [40, 113, 117, 118, 119, 130, 131, 143, 151, 223, 295, 296, 553, 738, 739, 741, 745, 746, 747, 748, 751, 752, 753, 754, 755, 758, 759, 777, 854, 855, 858, 916, 1090, 1213, 1215, 1217, 1221, 1222, 1225, 1226, 1227], "insert_befor": [40, 296], "insert_aft": [40, 296], "respect": [40, 296, 594, 618, 858, 1136, 1160], "direct": [40, 118, 127, 131, 134, 138, 242, 265, 296, 492, 579, 746, 817, 855, 1056, 1120, 1221], "far": [40, 296], "strongli": [40, 149, 208, 233, 282, 296, 510, 746, 1070, 1221], "advis": [40, 70, 89, 206, 296], "structur": [40, 95, 99, 101, 171, 222, 235, 257, 296, 546, 746, 806, 855, 983, 1221], "wherev": [40, 208, 282, 296, 510, 746, 1070, 1221], "possibl": [40, 115, 156, 184, 187, 202, 208, 234, 261, 263, 282, 296, 504, 510, 518, 564, 625, 659, 746, 762, 783, 786, 821, 826, 827, 855, 1070, 1100, 1167, 1221], "simpl": [40, 147, 219, 296], "colx": [40, 69, 296, 533, 534, 858, 1229], "coli": [40, 296, 533, 534, 858, 1229], "after": [40, 69, 87, 107, 114, 115, 116, 121, 123, 127, 129, 132, 133, 134, 171, 264, 295, 296, 418, 509, 542, 553, 642, 746, 828, 855, 983, 1069, 1090, 1184, 1221], "befor": [40, 115, 117, 120, 129, 135, 138, 139, 140, 141, 149, 151, 171, 185, 188, 205, 264, 296, 350, 351, 357, 509, 542, 543, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 642, 648, 723, 724, 746, 784, 787, 790, 793, 828, 855, 908, 909, 914, 983, 1069, 1084, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1184, 1191, 1221], "most": [40, 66, 104, 115, 116, 118, 129, 138, 139, 140, 141, 296, 519, 526, 543, 625, 746, 1075, 1084, 1167, 1221, 1228], "mandatori": [40, 296], "return_dtyp": [40, 154, 208, 296, 310, 506, 508, 509, 510, 557, 668, 709, 710, 711, 746, 865, 1069, 1070, 1094, 1221], "latter": [40, 171, 296, 983, 1221], "appropri": [40, 135, 257, 296, 553, 746, 1090, 1221], "pure": [40, 296, 1202, 1221], "actual": [40, 107, 145, 147, 235, 296, 1123, 1221], "indic": [40, 114, 115, 116, 117, 121, 123, 127, 129, 134, 142, 143, 147, 185, 186, 188, 189, 232, 235, 240, 242, 255, 296, 321, 431, 438, 443, 444, 445, 446, 448, 449, 450, 451, 453, 454, 455, 476, 492, 497, 514, 517, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 579, 583, 650, 673, 674, 746, 784, 785, 787, 788, 811, 816, 817, 855, 858, 990, 996, 1004, 1005, 1006, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1040, 1056, 1061, 1113, 1114, 1117, 1120, 1125, 1193, 1198, 1221, 1229], "calcul": [40, 79, 185, 247, 268, 296, 360, 415, 416, 417, 458, 471, 488, 504, 570, 586, 591, 659, 661, 678, 680, 723, 724, 727, 735, 746, 784, 822, 830, 855, 917, 978, 979, 980, 1023, 1035, 1052, 1106, 1128, 1132, 1210, 1221], "individu": [40, 60, 145, 151, 232, 257, 296, 510, 602, 746, 767, 811, 855, 897, 1144, 1221], "gridlin": [40, 296], "zoom": [40, 296], "freez": [40, 296], "pane": [40, 296], "top": [40, 156, 261, 296, 762, 826, 855], "index": [40, 105, 109, 112, 137, 153, 175, 179, 181, 185, 186, 188, 189, 194, 195, 200, 202, 205, 223, 229, 230, 232, 233, 234, 242, 245, 251, 257, 259, 266, 267, 273, 296, 304, 318, 319, 320, 322, 389, 431, 432, 434, 465, 466, 476, 477, 492, 493, 497, 499, 562, 565, 566, 567, 568, 569, 571, 572, 573, 577, 579, 587, 601, 622, 650, 651, 746, 782, 784, 785, 787, 788, 793, 811, 817, 820, 825, 829, 835, 855, 872, 873, 874, 875, 876, 951, 990, 1022, 1029, 1030, 1040, 1041, 1056, 1057, 1061, 1063, 1081, 1113, 1114, 1117, 1120, 1129, 1143, 1164, 1193, 1194, 1221], "thu": [40, 171, 296, 678, 983, 1221], "altern": [40, 296, 742], "a2": [40, 80, 82, 296], "occur": [40, 85, 86, 296, 469, 470, 526, 553, 746, 767, 768, 775, 777, 807, 819, 855, 1033, 1034, 1075, 1090, 1221], "equival": [40, 104, 106, 107, 108, 110, 119, 124, 125, 133, 185, 200, 219, 296, 303, 307, 413, 414, 428, 433, 435, 460, 505, 525, 527, 537, 538, 541, 547, 608, 646, 656, 663, 746, 784, 855, 1022, 1150, 1180, 1182, 1183, 1221], "top_row": [40, 296], "top_col": [40, 296], "base": [40, 46, 166, 174, 185, 186, 188, 189, 232, 296, 364, 372, 412, 415, 416, 417, 438, 501, 502, 550, 557, 562, 615, 637, 746, 773, 780, 784, 785, 787, 788, 811, 855, 858, 922, 930, 975, 978, 979, 980, 996, 1065, 1066, 1088, 1094, 1157, 1179, 1212, 1221, 1229], "scroll": [40, 296], "region": [40, 131, 296], "initit": [40, 296], "5th": [40, 296], "properti": [40, 153, 160, 167, 176, 192, 237, 241, 270, 296, 769, 774, 812, 831, 855, 858, 1229], "readthedoc": [40, 296], "io": [40, 122, 127, 128, 131, 296, 771, 815, 855], "html": [40, 41, 42, 105, 117, 153, 161, 296], "definit": [40, 143, 296, 458, 746, 1023, 1221], "take": [40, 120, 126, 145, 151, 177, 179, 185, 188, 212, 215, 222, 223, 251, 257, 296, 389, 431, 432, 476, 589, 651, 690, 691, 696, 698, 707, 746, 782, 784, 787, 803, 825, 855, 951, 990, 991, 1040, 1194, 1212, 1221], "care": [40, 296, 310, 510, 578, 746, 1118, 1221], "rel": [40, 118, 119, 130, 131, 138, 139, 140, 141, 296, 389, 415, 416, 417, 567, 569, 571, 573, 746, 951, 978, 979, 980, 1221], "working_with_conditional_format": [40, 296], "similarli": [40, 107, 185, 205, 232, 267, 296, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 969], "well": [40, 115, 116, 117, 129, 223, 296, 442, 746, 1000, 1221], "adjac": [40, 296], "two": [40, 69, 70, 88, 89, 106, 108, 110, 118, 177, 214, 215, 223, 260, 276, 282, 296, 304, 361, 366, 431, 434, 499, 550, 588, 671, 672, 678, 680, 723, 724, 746, 802, 803, 837, 843, 855, 918, 924, 1063, 1088, 1221], "help": [40, 138, 139, 140, 141, 296, 777, 855], "where": [40, 64, 79, 117, 118, 144, 166, 171, 185, 202, 214, 234, 247, 266, 268, 296, 321, 409, 412, 414, 538, 556, 577, 586, 589, 591, 618, 661, 674, 678, 680, 723, 724, 727, 735, 736, 746, 773, 784, 802, 822, 829, 830, 855, 875, 971, 975, 983, 1114, 1128, 1132, 1160, 1210, 1212, 1221, 1228], "working_with_sparklin": [40, 296], "inject": [40, 79, 296], "locat": [40, 171, 229, 230, 259, 264, 296, 577, 746, 828, 855, 983, 990, 1113, 1114, 1117, 1193, 1221], "syntax": [40, 174, 208, 219, 296, 593, 601, 602, 616, 742, 780, 819, 855, 1135, 1143, 1144, 1158, 1221], "correctli": [40, 120, 296], "microsoft": [40, 296], "com": [40, 118, 296, 415, 416, 417, 601, 602, 603, 746, 978, 979, 980, 1143, 1144, 1145, 1221], "u": [40, 48, 50, 67, 134, 296, 365, 366, 373, 398, 410, 633, 635, 690, 691, 692, 693, 694, 695, 701, 858, 923, 924, 931, 960, 972, 1175, 1177], "offic": [40, 296], "f5ed2452": [40, 296], "2337": [40, 296], "4f71": [40, 296], "bed3": [40, 296], "c8ae6d2b276": [40, 296], "instanti": [40, 117, 238, 271, 296, 813, 832, 855], "basic": [40, 296, 1229], "random": [40, 41, 136, 143, 145, 147, 190, 236, 296, 436, 487, 553, 576, 582, 660, 746, 758, 994, 1051, 1090, 1112, 1124, 1209, 1221], "dtm": [40, 296, 366, 858, 924], "500": [40, 266, 296, 777, 829, 855, 939, 941, 949, 1101, 1102, 1104, 1221], "val": [40, 231, 296, 510, 546, 654, 736, 746, 810, 855], "10_000": [40, 296], "20_000": [40, 296], "30_000": [40, 296], "increas": [40, 79, 115, 127, 134, 296, 357, 746, 914, 1221], "b4": [40, 296], "light": [40, 296], "twice": [40, 120, 296], "titl": [40, 64, 296], "explicit": [40, 117, 129, 143, 266, 296, 721, 829, 855], "integr": [40, 296, 1229], "multi_fram": [40, 296], "wb": [40, 296], "coordin": [40, 296], "advanc": [40, 120, 223, 296, 499, 1063, 1229], "min_color": [40, 296], "76933c": [40, 296], "mid_color": [40, 296], "c4d79b": [40, 296], "max_color": [40, 296], "ebf1d": [40, 296], "data_bar_2010": [40, 296], "bar_color": [40, 296], "9bbb59": [40, 296], "bar_negative_color_sam": [40, 296], "bar_negative_border_color_sam": [40, 296], "white": [40, 296], "w": [40, 66, 67, 185, 188, 235, 296, 596, 601, 603, 665, 667, 784, 787, 855, 858, 1138, 1143, 1145, 1171], "get_worksheet_by_nam": [40, 296], "fmt_titl": [40, 296], "add_format": [40, 296], "4f6228": [40, 296], "font_siz": [40, 296], "12": [40, 79, 111, 144, 145, 185, 201, 205, 232, 243, 267, 296, 305, 341, 342, 350, 364, 366, 370, 374, 382, 384, 385, 386, 389, 390, 391, 393, 407, 408, 409, 457, 507, 543, 548, 552, 562, 572, 580, 581, 596, 610, 620, 636, 647, 682, 689, 690, 691, 692, 693, 694, 710, 733, 734, 746, 784, 789, 793, 796, 811, 818, 819, 824, 855, 858, 900, 901, 922, 924, 946, 955, 969, 1070, 1110, 1121, 1138, 1152, 1162, 1178, 1221, 1229], "ital": [40, 296], "customis": [40, 296], "trend": [40, 296], "win_loss": [40, 296], "subtl": [40, 296], "tone": [40, 296], "hidden": [40, 296], "id": [40, 87, 131, 262, 282, 296, 561, 616, 617, 658, 746, 843, 1098, 1207, 1221, 1229], "q1": [40, 296], "55": [40, 81, 296], "20": [40, 145, 171, 193, 195, 215, 222, 224, 228, 230, 296, 318, 319, 320, 360, 393, 407, 436, 441, 546, 565, 566, 568, 701, 708, 733, 746, 803, 806, 855, 858, 917, 955, 969, 1221], "35": [40, 296, 360, 746, 917, 1221], "q2": [40, 296], "30": [40, 171, 185, 193, 222, 228, 230, 253, 271, 296, 318, 319, 320, 360, 366, 374, 382, 384, 385, 391, 392, 393, 400, 407, 408, 436, 581, 708, 733, 746, 784, 806, 832, 855, 858, 917, 924, 947, 954, 955, 962, 969, 1221, 1229], "60": [40, 171, 296, 394, 406, 572, 633, 746, 952, 956, 968, 1175], "q3": [40, 296], "40": [40, 137, 171, 222, 296, 393, 407, 436, 636, 746, 806, 855, 935, 969, 1178], "80": [40, 296], "q4": [40, 296], "75": [40, 163, 296, 307, 541, 550, 565, 566, 567, 568, 571, 572, 573, 711, 746, 916, 996, 1088, 1221, 1229], "account": [40, 111, 118, 131, 296, 389, 415, 416, 417, 746, 951, 978, 979, 980, 1221], "flavour": [40, 117, 296], "integer_dtyp": [40, 238, 296, 813, 855, 858], "0_": [40, 296], "just": [40, 129, 214, 296, 802, 855], "unifi": [40, 296, 858], "2_color_scal": [40, 296], "95b3d7": [40, 296], "ffffff": [40, 296], "standardis": [40, 296], "z": [40, 66, 71, 87, 111, 143, 145, 169, 197, 199, 204, 214, 234, 235, 265, 296, 303, 305, 307, 436, 467, 507, 510, 530, 531, 532, 533, 534, 541, 548, 556, 557, 594, 602, 618, 633, 635, 647, 665, 667, 684, 713, 717, 722, 730, 746, 792, 802, 820, 855, 858, 986, 1094, 1136, 1144, 1160, 1175, 1177, 1221, 1228], "score": [40, 296], "conjunct": [40, 88, 120, 126, 296], "a123": [40, 296], "b345": [40, 296], "c567": [40, 296], "d789": [40, 296], "e101": [40, 296], "45": [40, 137, 232, 296, 366, 374, 382, 393, 407, 562, 572, 596, 602, 644, 671, 672, 708, 733, 746, 811, 855, 858, 924, 955, 969, 1138, 1144, 1229], "85": [40, 296, 1229], "font": [40, 296], "consola": [40, 296], "stdev": [40, 296], "ipccompress": [41, 42, 296], "arrow": [41, 42, 59, 104, 105, 117, 118, 121, 123, 132, 202, 234, 235, 252, 254, 296, 855, 1197, 1202, 1221], "ipc": [41, 42, 59, 121, 122, 123, 132, 135, 296, 758, 855], "binari": [41, 117, 120, 296, 329, 331, 332, 333, 858, 882, 885, 886], "feather": [41, 121, 132, 296, 758], "access": [41, 80, 81, 82, 83, 127, 131, 134, 153, 202, 233, 234, 296, 603, 834, 855, 1145, 1229], "python": [41, 42, 63, 105, 115, 116, 117, 137, 138, 140, 153, 202, 208, 234, 235, 254, 282, 296, 310, 366, 506, 508, 510, 603, 690, 691, 693, 694, 733, 734, 736, 746, 752, 843, 865, 924, 936, 937, 938, 943, 1070, 1145, 1201, 1221], "lz4": [41, 42, 45, 59, 60, 296, 855], "zstd": [41, 42, 45, 59, 60, 296, 855], "batch": [42, 113, 116, 117, 123, 133, 135, 296, 767, 797, 798, 855], "pretti": [43, 296], "row_ori": [43, 296], "iobas": [43, 44, 124, 125, 296, 523, 771, 815, 855], "serial": [43, 44, 296, 771, 855], "orient": [43, 80, 82, 108, 110, 296, 855], "slower": [43, 108, 110, 120, 184, 187, 208, 221, 267, 282, 296, 510, 711, 746, 783, 786, 843, 855, 1070, 1221], "common": [43, 79, 85, 86, 87, 266, 296, 507, 530, 746, 752, 767, 768, 775, 777, 807, 819, 829, 855], "write_ndjson": [43, 296], "bit_set": [43, 296, 815, 855], "newlin": [44, 125, 133, 296], "delimit": [44, 58, 125, 133, 223, 255, 296, 592, 855, 1134, 1198, 1221], "parquetcompress": [45, 296], "compression_level": [45, 60, 296, 855], "statist": [45, 60, 115, 116, 127, 134, 163, 296, 416, 417, 458, 565, 566, 567, 568, 569, 570, 571, 572, 573, 586, 746, 855, 916, 979, 980, 1023, 1106, 1128, 1221], "row_group_s": [45, 60, 296, 855], "data_page_s": [45, 296], "use_pyarrow": [45, 115, 121, 123, 127, 257, 296, 1201, 1202, 1221], "pyarrow_opt": [45, 119, 127, 130, 296], "parquet": [45, 60, 127, 128, 134, 296, 758, 855], "gzip": [45, 60, 296, 855], "lzo": [45, 60, 296, 855], "brotli": [45, 60, 296, 855], "choos": [45, 59, 60, 185, 223, 296, 784, 855], "good": [45, 59, 60, 202, 296, 855], "perform": [45, 59, 60, 79, 95, 105, 115, 116, 117, 121, 127, 129, 132, 133, 134, 153, 156, 184, 185, 186, 187, 188, 189, 205, 208, 209, 211, 216, 226, 232, 235, 248, 261, 282, 296, 310, 499, 510, 542, 562, 594, 607, 608, 618, 633, 634, 635, 746, 762, 784, 785, 787, 788, 793, 811, 821, 826, 835, 855, 1070, 1136, 1149, 1150, 1160, 1175, 1176, 1177, 1221], "fast": [45, 59, 60, 146, 148, 296, 421, 578, 746, 855, 984, 1118, 1221, 1229], "decompress": [45, 59, 60, 296, 855], "backward": [45, 60, 173, 205, 296, 328, 386, 423, 746, 779, 793, 855, 948, 986, 1221], "guarante": [45, 60, 105, 115, 116, 163, 190, 263, 296, 436, 746, 777, 827, 855, 993, 994, 1221], "deal": [45, 60, 202, 296, 306, 308, 392, 393, 407, 553, 633, 635, 664, 666, 692, 746, 855, 862, 863, 954, 955, 969, 1090, 1175, 1177, 1221], "older": [45, 60, 296, 855], "reader": [45, 60, 113, 115, 116, 121, 123, 127, 296, 759, 855], "higher": [45, 60, 225, 288, 296, 551, 569, 720, 746, 808, 849, 855, 1089, 1105, 1221], "mean": [45, 60, 115, 116, 121, 127, 129, 163, 173, 184, 185, 205, 212, 223, 232, 267, 275, 296, 389, 393, 407, 420, 423, 562, 565, 566, 567, 568, 569, 571, 572, 573, 586, 601, 690, 691, 693, 694, 695, 733, 734, 736, 746, 779, 783, 784, 793, 797, 798, 811, 836, 855, 916, 951, 955, 969, 982, 986, 993, 1102, 1128, 1143, 1221], "smaller": [45, 60, 169, 296, 777, 855, 977, 1221], "disk": [45, 58, 59, 60, 121, 296, 819, 855], "22": [45, 60, 144, 296, 370, 390, 393, 407, 409, 410, 564, 565, 566, 568, 571, 572, 573, 633, 746, 855, 858, 955, 969, 972, 1100, 1175, 1221, 1229], "comput": [45, 60, 85, 87, 92, 169, 184, 205, 258, 263, 275, 288, 296, 302, 312, 313, 314, 315, 316, 317, 323, 324, 325, 338, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 361, 412, 419, 458, 483, 484, 485, 488, 489, 490, 491, 501, 502, 503, 526, 542, 543, 549, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 583, 584, 585, 586, 590, 652, 653, 660, 665, 667, 671, 672, 673, 678, 680, 696, 723, 724, 736, 746, 767, 783, 790, 792, 793, 827, 834, 836, 849, 855, 860, 866, 867, 868, 869, 870, 871, 877, 878, 879, 895, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 918, 975, 977, 981, 1023, 1047, 1048, 1049, 1052, 1053, 1054, 1055, 1065, 1066, 1067, 1075, 1084, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1125, 1126, 1127, 1128, 1131, 1195, 1196, 1203, 1209, 1221], "512": [45, 117, 202, 296, 547, 746, 1084, 1221], "page": [45, 60, 121, 127, 132, 134, 296, 746, 758, 855, 1221], "implement": [45, 105, 117, 153, 190, 208, 282, 296, 436, 457, 510, 529, 531, 532, 533, 534, 548, 647, 711, 746, 843, 994, 1070, 1113, 1116, 1221], "At": [45, 296], "moment": [45, 161, 296, 458, 586, 746, 1023, 1128, 1221], "write_t": [45, 296], "partition_col": [45, 118, 296], "write_to_dataset": [45, 296], "similar": [45, 149, 177, 205, 242, 296, 396, 399, 492, 542, 561, 579, 679, 736, 746, 777, 793, 817, 855, 958, 961, 1056, 1098, 1120, 1221], "spark": [45, 296], "partit": [45, 118, 119, 127, 130, 134, 135, 203, 221, 296], "we": [45, 114, 115, 116, 117, 120, 121, 122, 123, 124, 125, 126, 128, 129, 163, 185, 205, 232, 267, 296, 389, 393, 407, 438, 473, 499, 508, 510, 562, 565, 566, 567, 568, 569, 571, 572, 573, 603, 615, 637, 690, 691, 693, 694, 708, 733, 734, 736, 746, 771, 784, 793, 797, 798, 811, 855, 865, 951, 955, 969, 996, 1037, 1070, 1145, 1157, 1179, 1221], "use_pyarrow_write_to_dataset": [45, 296], "first": [45, 79, 115, 116, 120, 124, 129, 133, 138, 139, 140, 141, 144, 154, 183, 185, 188, 191, 205, 207, 208, 218, 222, 223, 250, 255, 256, 262, 263, 267, 280, 296, 320, 322, 357, 360, 386, 389, 393, 437, 445, 446, 462, 471, 473, 477, 478, 499, 509, 519, 546, 577, 589, 601, 604, 606, 616, 617, 675, 681, 699, 703, 736, 746, 767, 784, 787, 789, 793, 796, 806, 827, 834, 841, 855, 858, 874, 914, 916, 917, 948, 951, 955, 995, 1005, 1006, 1025, 1035, 1037, 1041, 1042, 1063, 1069, 1114, 1143, 1145, 1146, 1148, 1158, 1159, 1192, 1200, 1221, 1229], "watermark": [45, 296], "partitioned_object": [45, 296], "calendar": [47, 48, 185, 205, 232, 267, 296, 377, 389, 393, 407, 411, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 695, 733, 734, 746, 784, 793, 811, 855, 935, 951, 955, 969, 973], "time_unit": [48, 50, 365, 366, 373, 398, 410, 635, 690, 691, 692, 693, 694, 695, 701, 858, 923, 924, 931, 960, 972, 1177], "time_zon": [48, 367, 392, 635, 690, 691, 692, 693, 694, 858, 922, 925, 930, 954, 1177], "timezon": [48, 858], "m": [48, 50, 67, 204, 296, 364, 365, 366, 372, 373, 396, 398, 399, 410, 601, 633, 634, 635, 639, 690, 691, 692, 693, 694, 695, 701, 792, 855, 858, 922, 923, 924, 930, 931, 958, 960, 961, 972, 1143, 1175, 1176, 1177, 1181], "zone": [48, 364, 367, 392, 635, 690, 691, 692, 693, 694, 858, 922, 925, 954, 1177], "zoneinfo": [48, 858], "run": [48, 58, 59, 60, 85, 86, 146, 148, 184, 187, 206, 208, 223, 239, 263, 272, 282, 296, 310, 357, 473, 508, 510, 560, 561, 608, 725, 746, 767, 768, 775, 777, 783, 786, 797, 798, 802, 807, 814, 819, 827, 833, 855, 858, 914, 1037, 1070, 1097, 1098, 1150, 1221, 1228, 1229], "available_timezon": [48, 858], "128": [49, 81, 1084, 1221], "bit": [49, 52, 53, 54, 55, 56, 57, 73, 74, 75, 76, 555, 593, 746, 1092, 1135, 1221], "experiment": [49, 51, 86, 135, 265, 266, 296, 357, 393, 438, 510, 565, 566, 567, 568, 569, 571, 572, 573, 746, 768, 829, 855, 894, 914, 955, 996, 1088, 1221], "progress": [49, 51], "expect": [49, 51, 96, 98, 103, 115, 117, 129, 499, 510, 708, 746, 795, 797, 798, 855], "categori": [51, 70, 89, 255, 296, 336, 337, 358, 438, 550, 746, 890, 892, 915, 996, 1088, 1221], "32": [52, 55, 74, 81, 200, 232, 296, 527, 562, 581, 746, 811, 855, 918, 952, 1084, 1105, 1221], "sign": [54, 55, 56, 57, 389, 555, 642, 746, 858, 951, 1010, 1092, 1184, 1221], "maintain_ord": [58, 59, 60, 156, 184, 187, 221, 223, 261, 263, 267, 276, 279, 281, 283, 284, 285, 286, 287, 288, 289, 296, 304, 327, 431, 434, 500, 510, 657, 746, 762, 768, 775, 777, 783, 786, 807, 819, 821, 826, 827, 837, 840, 842, 844, 845, 846, 847, 848, 849, 850, 855, 881, 1064, 1206, 1221], "type_coercion": [58, 59, 60, 85, 86, 767, 768, 775, 777, 807, 819, 855], "predicate_pushdown": [58, 59, 60, 85, 86, 767, 768, 775, 777, 797, 798, 807, 819, 855], "projection_pushdown": [58, 59, 60, 85, 86, 767, 768, 775, 777, 797, 798, 807, 819, 855], "simplify_express": [58, 59, 60, 85, 86, 767, 768, 775, 777, 807, 819, 855], "slice_pushdown": [58, 59, 60, 85, 86, 767, 768, 775, 777, 797, 798, 807, 819, 855], "no_optim": [58, 59, 60, 85, 86, 767, 768, 777, 797, 798, 807, 855], "evalu": [58, 59, 60, 172, 174, 205, 296, 307, 321, 357, 440, 463, 464, 499, 541, 664, 666, 670, 674, 690, 691, 693, 694, 696, 705, 706, 719, 722, 728, 733, 734, 736, 737, 746, 767, 780, 790, 792, 793, 855, 875, 914, 1027, 1028, 1212, 1221], "queri": [58, 59, 60, 64, 66, 85, 86, 117, 118, 121, 129, 132, 133, 134, 171, 206, 222, 296, 508, 510, 606, 746, 767, 768, 775, 777, 789, 796, 807, 819, 835, 838, 843, 855, 983, 1070, 1148, 1221, 1228], "ram": [58, 59, 60, 855], "maintain": [58, 59, 60, 156, 261, 296, 327, 500, 577, 657, 746, 762, 821, 826, 855, 881, 1064, 1114, 1206, 1221], "slightli": [58, 59, 60, 120, 855], "faster": [58, 59, 60, 117, 171, 257, 265, 296, 310, 510, 658, 746, 855, 865, 983, 1070, 1221], "coercion": [58, 59, 60, 85, 86, 556, 746, 767, 768, 775, 777, 807, 819, 855], "optim": [58, 59, 60, 85, 86, 127, 129, 132, 133, 134, 202, 206, 222, 226, 234, 263, 296, 767, 768, 775, 777, 797, 798, 807, 819, 827, 835, 843, 855, 895, 1113, 1221], "pushdown": [58, 59, 60, 85, 86, 767, 768, 775, 777, 797, 798, 807, 809, 819, 835, 855, 1113, 1116, 1221], "project": [58, 59, 60, 85, 86, 129, 131, 132, 133, 134, 310, 588, 589, 746, 767, 768, 775, 777, 797, 798, 807, 809, 815, 819, 855], "slice": [58, 59, 60, 80, 85, 86, 169, 191, 203, 250, 296, 478, 496, 510, 518, 520, 563, 565, 566, 567, 568, 569, 571, 572, 573, 746, 767, 768, 775, 777, 797, 798, 807, 819, 855, 977, 995, 1042, 1060, 1099, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1192, 1221], "off": [58, 59, 60, 85, 86, 115, 116, 129, 767, 768, 775, 777, 797, 798, 807, 855], "certain": [58, 59, 60, 86, 94, 119, 130, 194, 195, 267, 296, 629, 630, 767, 768, 807, 855, 1221], "lf": [58, 59, 60, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 790, 791, 792, 794, 795, 796, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 817, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 834, 835, 839, 855, 1228, 1229], "scan_csv": [58, 59, 60, 115, 116, 855], "my_larger_than_ram_fil": [58, 59, 60, 855], "data_pagesize_limit": [60, 855], "reduc": [60, 115, 116, 127, 129, 132, 133, 134, 283, 284, 286, 289, 581, 682, 699, 746, 844, 845, 847, 850, 855, 1072, 1087, 1122, 1191, 1221], "pressur": [60, 115, 116, 127, 129, 133, 134, 581, 746, 855, 1122, 1221], "improv": [60, 121, 132, 855], "speed": [60, 310, 510, 746, 855, 1229], "integer_list": 61, "float_list": 61, "wrap": [63, 111, 442, 746], "arbitrari": [63, 145, 858], "eager": [64, 65, 66, 67, 68, 69, 185, 223, 265, 296, 365, 367, 370, 373, 378, 385, 386, 389, 390, 392, 393, 398, 400, 401, 402, 403, 404, 405, 406, 407, 409, 410, 565, 566, 568, 571, 572, 573, 670, 674, 690, 691, 693, 694, 701, 705, 706, 719, 722, 728, 733, 734, 737, 745, 746, 784, 798, 855, 922, 923, 925, 928, 930, 931, 932, 938, 939, 941, 944, 946, 947, 948, 949, 951, 952, 953, 954, 955, 960, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 1228], "against": [64, 117, 473, 855, 1037, 1228, 1229], "eagerli": [64, 499], "unset": [64, 144, 392, 499, 954], "init": [64, 151], "eager_execut": [64, 1228], "itself": [64, 143, 510, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 723, 724, 746, 795, 855, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1221, 1228], "impact": [64, 185, 188, 296, 784, 787, 855, 1228], "declar": [64, 104, 106, 107, 108, 110, 117, 124, 125, 133, 296, 855], "godfath": 64, "1972": 64, "6_000_000": 64, "134_821_952": 64, "dark": 64, "knight": 64, "2008": 64, "185_000_000": 64, "533_316_061": 64, "schindler": 64, "1993": 64, "22_000_000": 64, "96_067_179": 64, "pulp": 64, "fiction": 64, "1994": 64, "8_000_000": 64, "107_930_000": 64, "shawshank": 64, "redempt": 64, "25_000_000": 64, "28_341_469": 64, "release_year": 64, "budget": 64, "gross": 64, "imdb_scor": 64, "ctx": [64, 65, 66, 67, 68, 69], "film": 64, "1990": 64, "BY": [64, 66], "desc": [64, 66], "AS": [64, 726, 1228], "decad": 64, "total_gross": 64, "n_film": 64, "2000": [64, 376, 378, 385, 386, 389, 394, 858, 934, 947, 948, 951, 956], "533316061": 64, "232338648": 64, "1970": [64, 135], "134821952": 64, "register_glob": [65, 67, 69, 1228], "register_mani": [65, 66, 69], "unregist": [65, 66, 67, 1228], "frame_data": [65, 68], "collect": [65, 66, 69, 82, 85, 86, 129, 130, 131, 135, 145, 147, 164, 166, 206, 223, 252, 263, 264, 296, 418, 447, 510, 676, 697, 701, 728, 746, 761, 762, 764, 768, 770, 771, 772, 773, 776, 777, 778, 779, 780, 781, 782, 783, 784, 789, 791, 792, 793, 794, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 813, 815, 817, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 832, 834, 835, 836, 837, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 855, 858, 1008, 1221, 1228, 1229], "global": [66, 70, 88, 89, 136, 145, 150, 257, 296, 557, 746, 891, 893, 1094, 1221, 1228], "scope": [66, 69, 151, 757, 858, 1228], "map": [66, 67, 71, 106, 107, 115, 116, 117, 118, 121, 122, 127, 128, 129, 132, 157, 167, 176, 202, 208, 227, 233, 234, 235, 253, 296, 305, 393, 407, 507, 508, 509, 510, 529, 542, 557, 561, 660, 710, 746, 764, 774, 809, 855, 858, 916, 955, 969, 1069, 1070, 1094, 1098, 1209, 1221, 1228], "recent": [66, 138, 139, 140, 141, 543, 746, 1084, 1221, 1228], "df1": [66, 68, 69, 79, 87, 138, 139, 168, 171, 215, 258, 269, 296, 803, 855], "df2": [66, 68, 69, 79, 87, 138, 139, 168, 171, 258, 269, 296], "join": [66, 70, 79, 85, 86, 87, 89, 205, 266, 296, 441, 542, 746, 767, 768, 775, 777, 793, 807, 819, 829, 834, 855], "named_fram": [67, 1228], "lf1": [67, 69], "o": [67, 121, 132, 334, 357, 600, 655, 746, 887, 914, 1142, 1170, 1205, 1221], "lf2": [67, 69, 855], "p": [67, 81, 222, 296, 546, 728, 746, 806, 855], "q": [67, 235, 296, 728], "r": [67, 115, 116, 129, 546, 596, 600, 601, 602, 603, 616, 746, 858, 1138, 1142, 1143, 1144, 1145, 1158], "lf3": [67, 855], "lf4": [67, 855], "either": [67, 71, 145, 200, 204, 205, 206, 209, 211, 216, 221, 232, 233, 248, 257, 296, 550, 557, 562, 633, 664, 673, 679, 728, 746, 792, 793, 795, 811, 855, 858, 1088, 1094, 1175, 1221, 1229], "tbl1": [67, 69], "tbl2": [67, 69], "tbl3": 67, "tbl4": 67, "statement": [68, 736], "hello_world": 68, "baz": [68, 195, 196, 223, 264, 296, 603, 623, 625, 742, 791, 828, 855, 858, 1145, 1167], "hello_data": 68, "foo_bar": [68, 514, 517, 623, 708], "registr": [69, 758], "lifetim": [69, 151, 757], "context": [69, 70, 88, 89, 149, 219, 296, 304, 310, 424, 473, 508, 510, 518, 588, 589, 660, 668, 679, 698, 701, 707, 711, 722, 725, 745, 746, 757, 758, 834, 855, 1037, 1209, 1221, 1228], "manag": [69, 70, 88, 89, 757, 758, 1228], "often": [69, 151, 185, 186, 188, 189, 232, 296, 469, 470, 556, 562, 746, 784, 785, 787, 788, 811, 855, 1033, 1034], "want": [69, 86, 107, 171, 208, 219, 296, 424, 508, 510, 561, 565, 566, 567, 568, 569, 571, 572, 573, 594, 607, 618, 681, 690, 699, 719, 722, 737, 746, 768, 789, 796, 855, 858, 983, 1070, 1098, 1136, 1149, 1160, 1221], "df0": [69, 215, 296, 803, 855], "exit": [69, 70, 88, 151, 1228], "construct": [69, 70, 88, 89, 104, 106, 107, 108, 109, 110, 117, 296, 430, 719, 722, 737, 742, 746, 771, 855, 891, 1221], "persist": [69, 855], "through": [69, 105, 117, 742, 858, 1221], "tbl0": 69, "remain": [69, 115, 116, 129, 166, 169, 174, 296, 362, 363, 424, 472, 557, 624, 625, 746, 773, 780, 797, 798, 855, 919, 920, 977, 987, 1036, 1094, 1166, 1167, 1221], "text": [69, 117, 607, 608, 616, 617, 619, 726, 1149, 1150, 1161, 1229], "misc": 69, "testing1234": 69, "test1": 69, "test2": 69, "test3": 69, "disabl": [70, 88, 89, 202, 296, 767, 855], "cach": [70, 85, 86, 88, 89, 121, 129, 132, 134, 138, 139, 140, 141, 150, 557, 565, 566, 567, 568, 569, 571, 572, 573, 633, 634, 635, 639, 746, 757, 767, 768, 775, 777, 807, 819, 855, 891, 1094, 1175, 1176, 1177, 1181, 1221], "under": [70, 80, 81, 82, 83, 88, 89, 738, 739, 741, 742, 747, 748, 751, 753, 754, 755, 1213, 1215, 1217, 1222, 1225, 1226, 1227], "equal": [70, 89, 115, 116, 117, 129, 138, 139, 140, 141, 156, 178, 185, 188, 205, 215, 261, 296, 358, 407, 413, 414, 433, 460, 499, 538, 550, 556, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 613, 614, 642, 723, 724, 736, 742, 746, 762, 784, 787, 793, 803, 821, 826, 855, 915, 955, 1063, 1088, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1115, 1155, 1156, 1184, 1221, 1229], "concaten": [70, 87, 88, 89, 177, 222, 296, 546, 676, 677, 746, 806, 855, 897, 1076, 1221], "introduc": [70, 89, 633, 634, 635, 1175, 1176, 1177], "overhead": [70, 89, 129, 132, 133, 134], "amount": [70, 89, 310, 510, 695, 746], "depend": [70, 84, 89, 117, 137, 465, 466, 510, 518, 550, 553, 695, 698, 701, 707, 746, 1029, 1030, 1088, 1090, 1221, 1229], "nest": [70, 111, 127, 169, 296, 758, 977, 1221, 1228, 1229], "clear": [70, 88, 159, 296, 766, 855, 902, 1221], "outermost": 70, "s1": [70, 88, 89, 140, 141, 177, 296, 976, 1022, 1063, 1203, 1212, 1221], "color": [70, 88, 89, 282, 329, 331, 332, 333, 660, 746, 843, 1209, 1221], "red": [70, 88, 89, 282, 660, 746, 843, 1209, 1221], "green": [70, 88, 89, 282, 660, 746, 843, 1209, 1221], "blue": [70, 88, 89, 329, 331, 332, 333, 660, 746, 1209, 1221], "concat": [70, 88, 89, 116, 897, 1076, 1221], "cat": [70, 88, 89, 358, 550, 593, 596, 638, 641, 654, 677, 741, 746, 858, 915, 996, 1088, 1135, 1138, 1180, 1183, 1217, 1221], "decor": [70, 80, 81, 82, 83, 145, 147, 208, 296, 510, 746, 757, 758, 1070, 1221], "dure": [70, 115, 116, 129, 151, 171, 296, 983, 1221], "afterward": [70, 736], "construct_categor": 70, "schemadict": [71, 104, 106, 107, 108, 109, 110, 115, 117, 118, 120, 126, 129, 296, 728, 797, 798, 838, 843, 855], "composit": [71, 144, 1229], "initi": [71, 151, 681, 685, 699, 736], "dai": [72, 185, 188, 203, 205, 232, 267, 296, 385, 386, 389, 390, 393, 400, 407, 409, 562, 565, 566, 567, 568, 569, 571, 572, 573, 689, 690, 691, 692, 693, 694, 695, 733, 734, 746, 784, 787, 793, 811, 855, 858, 947, 948, 951, 952, 955, 962, 969, 971], "unsign": [73, 74, 75, 76, 555, 746, 858, 1010, 1092, 1221], "static": [77, 838, 843], "frametyp": [79, 1228], "joinstrategi": [79, 204, 296, 792, 855], "outer": [79, 87, 204, 266, 296, 792, 829, 855], "descend": [79, 156, 240, 246, 261, 296, 320, 494, 553, 578, 588, 589, 660, 673, 746, 762, 816, 821, 826, 855, 874, 1018, 1058, 1090, 1118, 1130, 1209, 1221], "fill": [79, 87, 158, 172, 173, 242, 243, 265, 296, 328, 348, 351, 422, 423, 429, 441, 565, 566, 568, 572, 579, 580, 610, 620, 700, 719, 722, 737, 746, 778, 779, 817, 818, 834, 855, 985, 986, 999, 1081, 1101, 1102, 1104, 1107, 1108, 1109, 1120, 1121, 1152, 1162, 1221], "sort": [79, 80, 138, 139, 144, 156, 185, 186, 188, 189, 205, 215, 222, 223, 232, 240, 261, 267, 280, 290, 296, 320, 337, 424, 510, 542, 562, 565, 566, 567, 568, 569, 571, 572, 573, 578, 589, 660, 662, 673, 711, 746, 762, 775, 784, 785, 787, 788, 793, 803, 806, 807, 811, 816, 819, 826, 841, 851, 855, 858, 874, 892, 1018, 1118, 1206, 1209, 1221, 1229], "origin": [79, 115, 116, 129, 166, 174, 263, 296, 362, 363, 392, 393, 407, 424, 457, 472, 509, 529, 542, 555, 556, 557, 558, 595, 596, 601, 606, 671, 672, 746, 773, 780, 827, 855, 915, 919, 920, 954, 955, 969, 987, 1036, 1069, 1088, 1094, 1095, 1137, 1138, 1143, 1148, 1221], "In": [79, 86, 117, 119, 130, 131, 134, 145, 147, 151, 169, 171, 185, 186, 188, 189, 208, 219, 232, 257, 296, 510, 562, 690, 746, 768, 784, 785, 787, 788, 811, 855, 977, 983, 1091, 1221], "duplic": [79, 93, 197, 204, 205, 263, 266, 296, 305, 443, 457, 529, 550, 746, 792, 793, 827, 829, 855, 1002, 1088, 1221], "suitabl": [79, 87, 117, 143, 208, 296, 510, 577, 746, 1070, 1114, 1221, 1229], "get": [79, 86, 112, 122, 128, 135, 149, 156, 160, 167, 176, 180, 182, 185, 186, 188, 189, 191, 192, 197, 199, 200, 207, 210, 217, 218, 223, 232, 233, 237, 241, 245, 250, 261, 270, 280, 290, 296, 304, 318, 319, 320, 322, 327, 336, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 373, 425, 431, 437, 456, 459, 462, 475, 480, 500, 511, 512, 513, 518, 520, 524, 535, 536, 544, 545, 551, 560, 562, 587, 591, 648, 649, 657, 661, 698, 703, 707, 711, 712, 713, 714, 715, 716, 717, 727, 731, 735, 746, 762, 767, 768, 769, 774, 781, 784, 785, 787, 788, 789, 794, 796, 811, 812, 820, 824, 826, 831, 841, 851, 855, 872, 873, 874, 875, 876, 881, 890, 897, 906, 907, 908, 909, 910, 911, 912, 913, 931, 992, 995, 1000, 1002, 1020, 1025, 1039, 1044, 1064, 1071, 1073, 1074, 1076, 1079, 1080, 1085, 1086, 1089, 1097, 1129, 1132, 1192, 1197, 1198, 1206, 1210, 1211, 1221], "speedup": [79, 202, 208, 296, 510, 746, 1070, 1221], "receiv": [79, 117, 129, 208, 222, 282, 296, 510, 546, 746, 806, 855, 1229], "now": [79, 232, 296, 407, 811, 855, 955, 969, 1177], "One": [79, 163, 219, 223, 296, 307, 541, 726, 746, 858, 916, 1221], "whose": [79, 205, 223, 296, 418, 697, 746, 793, 855, 858], "uniqu": [79, 142, 143, 144, 147, 155, 199, 204, 219, 223, 235, 287, 296, 311, 322, 358, 456, 528, 550, 633, 634, 635, 639, 658, 660, 669, 718, 746, 761, 792, 848, 855, 876, 915, 916, 1020, 1077, 1088, 1175, 1176, 1177, 1181, 1207, 1209, 1221], "post": 79, "constrain": [79, 166, 296, 773, 855], "newli": 79, "boolean": [79, 156, 174, 177, 206, 246, 261, 296, 306, 307, 308, 329, 332, 333, 376, 424, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 463, 464, 468, 539, 541, 544, 545, 589, 604, 662, 663, 673, 674, 728, 736, 746, 762, 766, 780, 795, 821, 826, 855, 858, 862, 863, 875, 882, 884, 934, 987, 1000, 1001, 1002, 1004, 1005, 1006, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1016, 1020, 1027, 1028, 1032, 1082, 1085, 1086, 1116, 1135, 1202, 1212, 1221], "know": [79, 117, 223, 296, 499, 508, 746, 1211, 1221], "2022": [79, 157, 163, 183, 296, 366, 374, 382, 393, 407, 633, 690, 691, 693, 695, 701, 764, 855, 858, 924, 935, 955, 969, 1175], "df3": [79, 296], "set_tbl_format": 79, "09": [79, 145, 232, 296, 366, 385, 386, 562, 636, 690, 734, 746, 811, 855, 858, 1178], "02": [79, 157, 183, 185, 232, 267, 296, 365, 366, 373, 385, 386, 389, 392, 398, 401, 404, 406, 410, 562, 565, 566, 568, 571, 572, 573, 574, 633, 634, 635, 639, 690, 691, 693, 695, 746, 764, 784, 811, 855, 858, 923, 924, 926, 927, 931, 932, 938, 939, 944, 947, 948, 949, 954, 955, 959, 960, 963, 966, 968, 969, 1063, 1175, 1176, 1177, 1181], "03": [79, 111, 157, 185, 232, 267, 296, 365, 366, 367, 373, 385, 386, 389, 392, 393, 394, 396, 398, 399, 400, 401, 404, 406, 407, 410, 562, 565, 566, 568, 571, 572, 573, 634, 639, 690, 691, 693, 695, 746, 764, 784, 811, 855, 923, 924, 925, 931, 932, 938, 939, 947, 948, 949, 954, 955, 958, 960, 961, 962, 963, 966, 968, 1176, 1181], "af1": 79, "af2": 79, "af3": 79, "keep": [79, 115, 116, 129, 263, 266, 267, 296, 457, 509, 522, 530, 557, 675, 746, 827, 829, 855, 1069, 1094, 1221], "easili": [79, 117, 238, 271, 275, 296, 728, 813, 832, 836, 855], "dot": [79, 746, 819, 855, 1221], "product": [79, 161, 204, 296, 350, 355, 361, 746, 777, 792, 855, 908, 912, 918, 1221], "fill_nul": [79, 172, 296, 746, 778, 834, 855, 1221], "sum_horizont": [79, 248, 296, 729], "167": 79, "47": 79, "callabl": [80, 81, 82, 83, 129, 154, 177, 208, 222, 277, 282, 296, 310, 499, 506, 507, 508, 510, 530, 546, 563, 564, 668, 681, 682, 685, 686, 699, 709, 710, 711, 721, 746, 797, 798, 806, 838, 843, 855, 865, 1063, 1070, 1099, 1100, 1221], "by_first_letter_of_column_nam": 80, "f": [80, 116, 183, 203, 252, 262, 265, 296, 303, 499, 581, 600, 633, 635, 668, 676, 709, 746, 1063, 1142, 1175, 1177], "fromkei": [80, 82], "by_first_letter_of_column_valu": 80, "starts_with": [80, 329, 332, 593, 599, 858, 1141], "to_seri": [80, 180, 296, 633, 674, 722, 1175], "xy": [80, 82], "yz": [80, 82], "b1": [80, 82], "b2": [80, 82], "pow_n": 81, "powersofn": 81, "next": [81, 185, 205, 232, 267, 296, 328, 389, 393, 407, 553, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 969, 1090, 1221], "ceil": [81, 746, 1221], "previou": [81, 151, 531, 532, 543, 548, 645, 647, 746, 1084, 1221], "floor": [81, 746, 1221], "nearest": [81, 205, 225, 288, 296, 339, 427, 441, 551, 569, 720, 746, 793, 808, 849, 855, 896, 989, 999, 1089, 1105, 1221], "24": [81, 169, 185, 205, 208, 232, 267, 296, 350, 357, 370, 389, 390, 393, 401, 407, 409, 527, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 695, 733, 734, 746, 784, 793, 811, 855, 914, 951, 955, 963, 969, 1022, 1221], "001": [81, 378, 402, 403, 405, 642, 695, 964, 965, 967, 1184], "next_pow2": 81, "prev_pow2": 81, "nearest_pow2": 81, "split_by_column_dtyp": 82, "collect_al": [82, 86, 767, 768, 855], "31": [83, 145, 366, 370, 374, 382, 385, 389, 400, 633, 689, 692, 701, 708, 858, 922, 924, 928, 947, 962, 1175, 1229], "42": [83, 190, 215, 232, 296, 562, 746, 803, 811, 855, 994, 1221], "961": 83, "1764": 83, "4160": 83, "build": [84, 105, 858, 1229], "wa": [84, 138, 557, 618, 746, 1094, 1160, 1221], "compil": [84, 465, 466, 1029, 1030], "gate": 84, "info": [84, 119, 130, 131, 137], "host": [84, 115, 121, 123, 132, 134], "git": 84, "lazy_fram": [85, 86], "iter": [85, 86, 87, 104, 117, 146, 148, 156, 174, 184, 185, 186, 187, 188, 189, 201, 202, 203, 232, 233, 234, 235, 238, 239, 240, 246, 261, 262, 271, 272, 274, 275, 296, 357, 542, 589, 665, 667, 673, 675, 676, 677, 684, 688, 713, 717, 725, 728, 730, 736, 742, 746, 762, 780, 783, 784, 785, 786, 787, 788, 811, 813, 814, 816, 821, 826, 832, 833, 836, 855, 914, 1221, 1229], "comm_subplan_elim": [85, 86, 767, 768, 775, 777, 807, 819, 855], "comm_subexpr_elim": [85, 86, 767, 768, 775, 777, 807, 819, 855], "graph": [85, 206, 296, 767, 790, 834, 855], "parallel": [85, 87, 113, 118, 127, 134, 185, 188, 205, 206, 222, 239, 272, 296, 357, 473, 660, 736, 746, 758, 784, 787, 792, 793, 814, 833, 843, 855, 914, 1037, 1209, 1221], "threadpool": [85, 149], "Will": [85, 86, 767, 768, 775, 777, 807, 819, 855, 1221], "try": [85, 86, 99, 101, 115, 116, 121, 127, 129, 132, 134, 767, 768, 775, 777, 807, 819, 855], "branch": [85, 86, 767, 768, 775, 777, 807, 819, 855], "subplan": [85, 86, 767, 768, 775, 777, 807, 819, 855], "union": [85, 86, 87, 491, 767, 768, 775, 777, 807, 819, 855, 858, 1055], "subexpress": [85, 86, 767, 768, 775, 777, 807, 819, 855], "reus": [85, 86, 767, 768, 775, 777, 807, 819, 855], "part": [85, 86, 104, 120, 145, 602, 624, 625, 768, 775, 777, 807, 819, 834, 855, 1144, 1166, 1167], "fashion": [85, 86, 204, 296, 768, 775, 777, 807, 819, 855], "alpha": [85, 86, 310, 415, 416, 417, 746, 767, 768, 775, 777, 807, 819, 855, 978, 979, 980, 1221], "gevent": [86, 137, 768, 855], "_geventdataframeresult": [86, 768, 855], "await": [86, 768, 855], "asynchron": [86, 768, 855], "them": [86, 104, 106, 107, 108, 110, 124, 125, 126, 127, 129, 133, 134, 170, 171, 185, 205, 215, 232, 267, 296, 442, 479, 535, 536, 542, 562, 676, 690, 691, 693, 694, 733, 734, 746, 768, 776, 784, 793, 803, 811, 855, 858, 983, 1043, 1079, 1080, 1221], "schedul": [86, 768, 855], "insid": [86, 768, 855], "almost": [86, 208, 282, 296, 633, 634, 635, 768, 855, 1070, 1175, 1176, 1177, 1221], "instantli": [86, 768, 855], "asyncio": [86, 768, 855], "releas": [86, 310, 510, 746, 768, 855, 1229], "greenlet": [86, 768, 855], "task": [86, 768, 855], "wrapper": [86, 768, 855], "event": [86, 768, 855], "asyncresult": [86, 768, 855], "timeout": [86, 768, 855], "break": [86, 135, 265, 266, 296, 310, 357, 358, 393, 438, 565, 566, 567, 568, 569, 571, 572, 573, 746, 768, 829, 855, 894, 914, 915, 955, 996, 1088, 1221], "collect_async": [86, 855], "set_except": [86, 768, 855], "futur": [86, 153, 163, 209, 211, 216, 248, 296, 690, 768, 855, 1211, 1221], "rerais": [86, 768, 855], "polarstyp": 87, "concatmethod": 87, "vertic": [87, 171, 209, 211, 216, 248, 265, 269, 296, 592, 1134], "rechunk": [87, 104, 109, 115, 116, 121, 123, 127, 129, 132, 133, 134, 171, 296, 746, 897, 983, 1076, 1221], "combin": [87, 99, 101, 174, 185, 190, 205, 232, 267, 296, 307, 321, 407, 541, 557, 562, 611, 621, 627, 628, 629, 630, 690, 691, 693, 694, 733, 734, 736, 746, 784, 793, 811, 819, 855, 955, 969, 1094, 1153, 1163, 1169, 1170, 1171, 1172, 1221], "vertical_relax": 87, "diagon": [87, 262, 296], "diagonal_relax": 87, "vstack": [87, 171, 296], "addition": [87, 233, 296], "coerc": [87, 556, 746], "supertyp": [87, 173, 296, 309, 746, 779, 855], "mismatch": [87, 99, 125, 138, 140], "find": [87, 175, 181, 296, 577, 594, 746, 1114, 1136, 1221], "miss": [87, 115, 116, 129, 172, 296, 328, 415, 416, 417, 429, 451, 453, 499, 746, 778, 855, 978, 979, 980, 1211, 1221], "stack": [87, 193, 269, 296], "don": [87, 185, 208, 263, 265, 296, 310, 357, 473, 510, 542, 746, 784, 827, 855, 858, 914, 976, 1037, 1070, 1115, 1211, 1221], "auto": [87, 104, 106, 107, 108, 110, 124, 125, 127, 133, 134, 262, 296, 407, 855, 955, 969, 1229], "logic": [87, 208, 282, 296, 306, 308, 510, 654, 664, 666, 711, 746, 771, 792, 815, 843, 855, 862, 863, 1070, 1204, 1221], "align_fram": 87, "pattern": [87, 115, 116, 129, 132, 133, 134, 202, 296, 516, 593, 594, 595, 596, 601, 602, 603, 616, 617, 618, 843, 858, 1113, 1116, 1135, 1136, 1137, 1138, 1143, 1144, 1145, 1158, 1159, 1160, 1221], "collis": 87, "need": [87, 111, 115, 116, 118, 185, 186, 188, 189, 232, 235, 244, 257, 296, 499, 562, 581, 636, 695, 719, 722, 737, 746, 784, 785, 787, 788, 811, 855, 1122, 1178, 1221, 1229], "sure": [87, 104, 109, 115, 116, 121, 123, 127, 185, 186, 188, 189, 226, 232, 296, 562, 746, 784, 785, 787, 788, 811, 855], "contigu": [87, 104, 109, 115, 116, 121, 123, 127, 129, 132, 133, 134, 226, 296], "relev": 87, "df_h1": 87, "l1": 87, "l2": 87, "df_h2": 87, "r1": 87, "r2": 87, "r3": 87, "df_d1": 87, "df_d2": 87, "df_a1": 87, "df_a2": 87, "df_a3": 87, "enable_string_cach": 88, "stringcach": [88, 89, 204, 296, 758, 891, 893], "reliabl": [88, 89], "wai": [88, 89, 104, 106, 107, 108, 110, 124, 125, 133, 184, 203, 222, 246, 275, 296, 542, 546, 589, 601, 742, 746, 783, 806, 821, 836, 843, 855, 1143], "until": [88, 206, 296, 613, 614, 642, 1155, 1156, 1184], "deprec": [89, 90, 154, 175, 178, 185, 186, 187, 188, 189, 194, 209, 211, 216, 229, 243, 248, 251, 277, 296, 310, 341, 342, 352, 353, 354, 355, 356, 371, 375, 379, 381, 383, 388, 392, 395, 407, 445, 449, 452, 457, 469, 482, 497, 506, 507, 509, 548, 563, 580, 595, 605, 609, 610, 611, 612, 615, 620, 621, 627, 633, 635, 647, 650, 651, 668, 687, 688, 690, 692, 709, 746, 784, 785, 786, 787, 788, 797, 818, 825, 838, 855, 865, 900, 901, 910, 911, 912, 913, 915, 929, 933, 940, 942, 945, 950, 954, 955, 957, 969, 1001, 1005, 1007, 1010, 1011, 1017, 1019, 1021, 1033, 1046, 1061, 1069, 1088, 1099, 1115, 1117, 1121, 1137, 1147, 1151, 1152, 1153, 1154, 1157, 1162, 1163, 1169, 1175, 1177, 1193, 1194, 1211, 1221], "sinc": [89, 119, 130, 154, 156, 175, 178, 185, 186, 187, 188, 189, 194, 209, 211, 216, 229, 243, 248, 251, 261, 277, 296, 310, 341, 342, 352, 353, 354, 355, 356, 371, 373, 375, 379, 381, 383, 388, 392, 395, 407, 445, 449, 452, 457, 469, 482, 497, 506, 507, 509, 548, 563, 580, 595, 605, 609, 610, 611, 612, 615, 620, 621, 627, 633, 635, 647, 650, 651, 668, 687, 688, 690, 692, 701, 709, 746, 762, 784, 785, 786, 787, 788, 797, 818, 821, 825, 826, 838, 855, 865, 900, 901, 910, 911, 912, 913, 915, 929, 931, 933, 940, 942, 945, 950, 954, 955, 957, 969, 1001, 1005, 1007, 1010, 1011, 1017, 1019, 1021, 1033, 1046, 1061, 1069, 1088, 1099, 1115, 1117, 1121, 1137, 1147, 1151, 1152, 1153, 1154, 1157, 1162, 1163, 1169, 1175, 1177, 1193, 1194, 1211, 1221], "19": [89, 120, 137, 154, 175, 178, 185, 186, 187, 188, 189, 194, 205, 209, 211, 216, 229, 232, 243, 248, 251, 277, 296, 310, 341, 342, 352, 353, 354, 355, 356, 371, 375, 379, 381, 383, 388, 392, 393, 395, 407, 445, 449, 452, 457, 469, 482, 497, 506, 507, 509, 548, 562, 563, 566, 568, 580, 595, 605, 609, 610, 611, 612, 615, 620, 621, 627, 633, 635, 636, 647, 650, 651, 668, 687, 688, 690, 692, 709, 746, 784, 785, 786, 787, 788, 793, 797, 811, 818, 825, 838, 855, 865, 900, 901, 910, 911, 912, 913, 915, 929, 933, 940, 942, 945, 950, 954, 955, 957, 969, 1001, 1005, 1007, 1010, 1011, 1017, 1019, 1021, 1033, 1046, 1061, 1069, 1088, 1099, 1115, 1117, 1121, 1137, 1147, 1151, 1152, 1153, 1154, 1157, 1162, 1163, 1169, 1175, 1177, 1178, 1193, 1194, 1211, 1221], "longer": [89, 115, 129], "accept": [89, 114, 115, 116, 119, 121, 123, 127, 156, 184, 187, 238, 239, 242, 246, 261, 271, 272, 275, 296, 303, 340, 418, 442, 509, 542, 557, 589, 663, 665, 667, 673, 675, 676, 677, 684, 688, 697, 713, 717, 725, 728, 730, 736, 746, 762, 783, 786, 813, 814, 817, 821, 826, 832, 833, 836, 855, 899, 1000, 1094, 1120, 1221], "disable_string_cach": 89, "finish": [92, 171, 296, 983, 1221], "least": [96, 145, 543, 746, 1084, 1221], "unexpect": [97, 296, 508, 510, 746, 1070, 1221], "caus": [97, 105, 115, 116, 129, 138, 153, 171, 296, 983, 1221], "panic": 97, "incompat": 101, "arrai": [104, 108, 115, 116, 127, 169, 252, 257, 258, 296, 323, 324, 325, 326, 327, 341, 342, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 467, 483, 484, 485, 486, 495, 498, 502, 565, 566, 568, 572, 578, 696, 746, 855, 877, 878, 879, 880, 881, 900, 901, 906, 907, 908, 909, 910, 911, 912, 913, 918, 977, 1031, 1047, 1048, 1049, 1050, 1058, 1059, 1062, 1066, 1067, 1101, 1102, 1104, 1107, 1108, 1109, 1118, 1123, 1197, 1202, 1203, 1211, 1221], "chunkedarrai": [104, 218, 296], "recordbatch": [104, 203, 296], "schemadefinit": [104, 106, 107, 108, 110, 124, 125, 133, 296, 855], "schema_overrid": [104, 106, 107, 108, 109, 110, 117, 118, 120, 124, 125, 126, 203, 257, 296, 855, 858, 881], "copi": [104, 105, 153, 158, 159, 203, 252, 258, 271, 296, 421, 746, 765, 766, 832, 855, 898, 902, 984, 1197, 1202, 1203, 1221], "closest": 104, "pair": [104, 106, 107, 108, 110, 124, 125, 133, 144, 227, 296, 809, 855, 1229], "sever": [104, 106, 107, 108, 110, 124, 125, 133, 296, 855, 1229], "form": [104, 106, 107, 108, 110, 124, 125, 133, 202, 234, 265, 296, 543, 746, 855, 1084, 1221], "dimens": [104, 106, 108, 110, 124, 125, 133, 296, 558, 746, 855, 1095, 1221], "supportsinterchang": 105, "allow_copi": [105, 153], "interchang": [105, 153], "__dataframe__": 105, "convers": [105, 120, 153, 202, 203, 234, 235, 254, 257, 258, 296, 633, 634, 635, 639, 758, 993, 1175, 1176, 1177, 1181, 1201, 1202, 1203, 1221], "detail": [105, 117, 118, 138, 140, 153, 296, 855, 1229], "latest": [105, 119, 130, 153, 392, 393, 407, 429, 519, 633, 635, 692, 746, 954, 955, 969, 1175, 1177], "from_panda": 105, "from_arrow": 105, "effici": [105, 117, 120, 201, 203, 296], "reli": 105, "becaus": [105, 125, 169, 185, 188, 206, 208, 265, 282, 296, 473, 784, 787, 843, 855, 865, 977, 1037, 1070, 1221], "convert": [105, 109, 119, 120, 126, 130, 153, 253, 254, 255, 256, 257, 260, 296, 326, 359, 367, 396, 399, 498, 499, 507, 530, 552, 603, 615, 633, 634, 635, 636, 637, 639, 644, 746, 855, 880, 893, 925, 958, 961, 1062, 1063, 1145, 1157, 1175, 1176, 1177, 1178, 1179, 1181, 1190, 1200, 1201, 1202, 1203, 1211, 1221], "panda": [105, 109, 137, 185, 258, 296, 385, 386, 654, 746, 784, 855, 947, 948, 1203, 1204, 1221], "pd": [105, 109, 654, 746, 1203, 1204, 1221], "df_pd": 105, "dfi": [105, 153], "clone": [106, 107, 108, 109, 110, 158, 257, 258, 296, 765, 855, 898, 1201, 1202, 1203, 1211, 1221], "dimension": [106, 108, 110, 257, 296, 855, 1221], "infer_schema_length": [107, 110, 115, 116, 120, 124, 129, 133, 296, 604, 605, 855, 1146, 1147], "NOT": [107, 201, 296, 499, 517, 1228], "typic": [107, 117, 134, 208, 296, 372, 858, 930, 1070, 1221], "clearer": 107, "partial": [107, 115, 129, 296, 855], "mani": [107, 110, 117, 118, 171, 296, 604, 605, 618, 983, 1146, 1147, 1160, 1221], "scan": [107, 110, 115, 116, 129, 130, 131, 132, 133, 134, 135, 185, 186, 188, 189, 232, 296, 562, 746, 777, 784, 785, 787, 788, 789, 796, 811, 855], "slow": [107, 110, 115, 116, 129, 310, 357, 510, 564, 746, 843, 914, 1100, 1221], "present": [107, 145, 447, 509, 629, 630, 746, 777, 855, 1069, 1211, 1221], "np": [108, 174, 257, 296, 431, 650, 746, 780, 855, 990, 1004, 1009, 1013, 1014, 1193, 1221], "ndarrai": [108, 174, 257, 296, 431, 650, 746, 780, 855, 990, 1113, 1114, 1117, 1193, 1202, 1221], "numpi": [108, 137, 161, 202, 234, 235, 254, 257, 258, 296, 535, 536, 564, 746, 855, 1004, 1009, 1013, 1014, 1079, 1080, 1100, 1202, 1203, 1211, 1221], "columnar": [108, 110, 202, 234, 296], "interpret": [108, 110, 115, 116, 129, 296, 855], "yield": [108, 110, 115, 116, 117, 129, 169, 171, 262, 296, 508, 542, 746, 855, 977, 983, 1221], "conclus": [108, 110, 296, 855], "nan_to_nul": [109, 296, 855, 1221], "include_index": 109, "instal": [109, 115, 116, 118, 121, 123, 161, 257, 258, 296, 819, 855, 1203, 1221], "nan": [109, 145, 153, 172, 258, 296, 362, 363, 413, 414, 422, 433, 435, 441, 451, 453, 454, 455, 460, 505, 511, 524, 535, 536, 537, 538, 564, 656, 678, 746, 778, 855, 867, 871, 919, 920, 985, 1013, 1014, 1079, 1080, 1100, 1202, 1203, 1221, 1229], "pd_df": 109, "pd_seri": 109, "tbl": [111, 113, 116], "reconstruct": 111, "repr": [111, 145, 147], "trim": 111, "whitespac": [111, 611, 621, 627, 628, 629, 630, 1153, 1163, 1169, 1170, 1171, 1172], "prompt": 111, "extract": [111, 368, 370, 371, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 390, 391, 394, 395, 397, 400, 401, 402, 403, 404, 405, 406, 408, 409, 411, 546, 602, 603, 604, 605, 606, 624, 746, 926, 927, 928, 929, 932, 933, 935, 939, 940, 941, 942, 944, 945, 946, 949, 950, 952, 953, 956, 957, 959, 962, 963, 964, 965, 966, 967, 968, 970, 971, 973, 1144, 1145, 1146, 1147, 1148], "to_init_repr": [111, 296, 1221], "truncat": [111, 115, 129, 183, 185, 188, 202, 234, 235, 254, 296, 784, 787, 807, 855], "identifi": [111, 214, 221, 263, 296, 802, 827, 855], "compound": [111, 235, 296, 858], "neither": [111, 120, 126, 236, 296, 499, 1063], "source_ac": 111, "source_cha": 111, "ident": [111, 158, 159, 296, 396, 560, 561, 746, 765, 766, 855, 898, 902, 958, 1097, 1098, 1221], "timestamp": [111, 185, 188, 296, 392, 393, 407, 701, 784, 787, 855, 954, 955, 969], "tor_id": 111, "nnel_id": 111, "\u03bc": [111, 145, 185, 202, 205, 232, 234, 235, 254, 267, 296, 364, 365, 366, 367, 372, 374, 378, 382, 385, 386, 389, 392, 393, 394, 396, 399, 400, 401, 402, 403, 404, 405, 406, 407, 410, 562, 565, 566, 568, 571, 572, 573, 633, 635, 693, 695, 701, 746, 784, 793, 811, 855, 858, 922, 923, 924, 925, 926, 927, 930, 931, 932, 938, 939, 944, 947, 948, 949, 951, 954, 955, 959, 960, 962, 963, 964, 965, 966, 967, 968, 969, 972, 1175, 1177], "asia": [111, 858, 926, 927, 959], "tokyo": [111, 858], "123456780": 111, "9876543210": 111, "56": [111, 652, 746], "59": [111, 144, 366, 374, 382, 394, 692, 732, 733, 734, 858, 924, 944, 956], "663053": 111, "jst": [111, 858], "803065983": 111, "2055938745": 111, "38": [111, 145], "18": [111, 215, 232, 296, 351, 393, 407, 410, 441, 457, 529, 562, 746, 803, 807, 811, 855, 858, 972, 1177], "050545": 111, "source_actor_id": 111, "source_channel_id": 111, "to_list": [111, 232, 296, 1135, 1221], "datatypeclass": 112, "uint32": [112, 137, 157, 169, 296, 320, 346, 431, 434, 461, 465, 466, 481, 556, 595, 596, 607, 608, 650, 654, 679, 746, 764, 855, 858, 875, 888, 976, 977, 1010, 1029, 1030, 1045, 1115, 1137, 1138, 1149, 1150, 1204, 1221], "regular": [112, 202, 233, 234, 267, 296, 418, 593, 595, 596, 601, 602, 603, 616, 617, 697, 746, 858, 1135, 1137, 1138, 1143, 1144, 1145, 1158, 1159], "uint64": [112, 190, 296, 436, 465, 466, 555, 746, 994, 1029, 1030, 1092, 1221], "bigidx": 112, "read": [113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 171, 296, 430, 508, 736, 746, 771, 777, 855, 983, 1221], "over": [113, 115, 116, 117, 119, 129, 145, 154, 171, 201, 202, 203, 208, 233, 234, 235, 262, 274, 277, 282, 296, 310, 357, 423, 507, 508, 510, 518, 520, 521, 522, 530, 553, 565, 566, 567, 568, 569, 571, 572, 573, 668, 681, 682, 685, 686, 699, 709, 710, 711, 721, 746, 838, 843, 858, 865, 914, 983, 1070, 1101, 1102, 1104, 1108, 1221], "fetch": [113, 129, 206, 296, 765, 767, 789, 796, 855], "ideal": 113, "read_csv_batch": [113, 759], "tpch": [113, 116], "tables_scale_100": [113, 116], "lineitem": [113, 116, 118], "try_parse_d": [113, 115, 116, 129], "n_row": [114, 115, 116, 121, 123, 127, 129, 132, 133, 134, 203, 296, 777, 855], "handler": [114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128, 771, 855], "builtin": [114, 115, 116, 120, 121, 122, 123, 124, 125, 126, 128, 771, 855], "stop": [114, 115, 116, 121, 123, 127, 129, 132, 133, 134, 565, 566, 568, 571, 572, 573, 746, 923, 925, 931, 932, 939, 941, 944, 949, 955, 960], "textio": 115, "has_head": [115, 116, 120, 129], "new_column": [115, 116, 120, 129, 228, 229, 296], "comment_prefix": [115, 116, 129], "skip_row": [115, 116, 129], "missing_utf8_is_empty_str": [115, 116, 129], "ignore_error": [115, 116, 125, 129], "n_thread": [115, 116], "8192": 115, "csvencod": [115, 116, 129], "low_memori": [115, 116, 127, 129, 133, 134], "skip_rows_after_head": [115, 116, 129], "row_count_nam": [115, 116, 121, 123, 127, 129, 132, 133, 134], "row_count_offset": [115, 116, 121, 123, 127, 129, 132, 133, 134], "sample_s": [115, 116], "eol_char": [115, 116, 129], "raise_if_empti": [115, 116, 120, 126, 129], "truncate_ragged_lin": [115, 129], "fsspec": [115, 116, 121, 123, 127, 130, 131, 132, 134, 137], "remot": [115, 116, 121, 123], "autogener": [115, 116, 129], "column_x": [115, 116, 129], "enumer": [115, 116, 129, 203, 296], "shorter": [115, 116, 129, 499], "comment": [115, 116, 129], "instanc": [115, 116, 127, 129, 134, 145, 147, 151, 157, 171, 177, 296, 335, 519, 565, 566, 567, 568, 569, 571, 572, 573, 681, 685, 699, 742, 746, 764, 798, 835, 855, 888, 983, 1221], "escap": [115, 116, 129], "complet": [115, 117, 129, 1202, 1221], "wherea": [115, 117, 129, 232, 296, 393, 407, 535, 536, 562, 746, 789, 796, 811, 855, 955, 969, 1079, 1080, 1221], "would": [115, 116, 129, 320, 477, 510, 518, 553, 673, 746, 874, 1041, 1090, 1202, 1221], "prefer": [115, 116, 119, 129, 148, 171, 202, 208, 233, 234, 282, 296, 418, 510, 746, 855, 983, 1070, 1221, 1229], "treat": [115, 116, 129, 593, 596, 616, 617, 736, 1135, 1138, 1158, 1159], "10000": [115, 203, 296], "might": [115, 116, 129, 149, 156, 257, 261, 296, 310, 510, 658, 746, 762, 821, 826, 855, 1203, 1221], "issu": [115, 116, 120, 129, 350, 351, 648, 746, 908, 909, 1191, 1221], "iso8601": [115, 116, 129], "succe": [115, 116, 129], "cpu": [115, 116], "system": [115, 116], "wrongli": 115, "done": [115, 116, 129, 135, 151, 155, 157, 205, 296, 309, 311, 335, 542, 669, 746, 761, 764, 793, 855, 888, 1221], "buffer": [115, 116, 117, 169, 202, 296, 977, 1221], "modifi": [115, 116, 129, 149, 151, 171, 193, 201, 202, 269, 296, 321, 392, 410, 593, 601, 602, 616, 746, 864, 954, 972, 983, 1135, 1143, 1144, 1158, 1180, 1182, 1183, 1221], "upper": [115, 116, 117, 169, 185, 188, 296, 340, 341, 438, 442, 499, 659, 670, 690, 691, 693, 694, 705, 706, 733, 734, 746, 784, 787, 855, 899, 900, 977, 996, 1000, 1068, 1208, 1221], "bound": [115, 116, 169, 185, 188, 296, 340, 341, 342, 442, 476, 477, 497, 499, 504, 659, 670, 690, 691, 693, 694, 705, 706, 733, 734, 746, 784, 787, 855, 899, 900, 901, 977, 1000, 1040, 1041, 1061, 1068, 1187, 1208, 1221], "lossi": [115, 116, 129], "decod": [115, 116, 604], "expens": [115, 116, 127, 129, 133, 134, 146, 148, 185, 186, 188, 189, 202, 208, 232, 233, 234, 235, 262, 263, 296, 310, 510, 562, 746, 784, 785, 787, 788, 811, 827, 855, 983, 1070, 1221, 1229], "aggreg": [115, 116, 127, 177, 184, 185, 187, 188, 209, 211, 213, 216, 219, 223, 224, 225, 232, 247, 248, 265, 268, 275, 276, 279, 281, 296, 304, 424, 439, 506, 508, 510, 542, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 664, 665, 666, 667, 681, 682, 683, 684, 685, 686, 687, 688, 699, 704, 712, 713, 716, 717, 721, 729, 730, 746, 784, 785, 787, 788, 798, 799, 800, 801, 804, 805, 808, 811, 822, 823, 830, 836, 837, 840, 842, 855, 997, 1099, 1100, 1101, 1102, 1104, 1107, 1108, 1109, 1221], "parser": 115, "regard": [115, 678], "sens": [115, 121, 123, 132, 215, 267, 296, 542, 746, 803, 855], "particular": [115, 121, 123, 132, 169, 296, 977, 1221], "usernam": [115, 118, 121, 123, 132], "password": [115, 118, 121, 123, 132], "skip": [115, 116, 120, 127, 129, 134, 265, 296, 865, 1070, 1221], "offset": [115, 116, 120, 121, 123, 127, 129, 132, 133, 134, 179, 185, 186, 188, 189, 232, 245, 251, 267, 273, 296, 364, 372, 385, 386, 389, 393, 407, 432, 493, 562, 587, 622, 651, 746, 782, 784, 785, 787, 788, 811, 820, 825, 835, 855, 922, 930, 947, 948, 951, 955, 969, 991, 1057, 1129, 1164, 1177, 1194, 1221], "row_count": [115, 116, 121, 123, 127, 129, 132, 133, 134], "sampl": [115, 116, 282, 296, 586, 746, 843, 1128, 1221], "estim": [115, 116, 155, 169, 296, 311, 416, 417, 458, 669, 746, 761, 855, 977, 979, 980, 1023, 1221], "alloc": [115, 116, 169, 226, 296, 746, 977, 1221], "encount": [115, 116, 129, 185, 188, 296, 535, 536, 604, 606, 678, 681, 699, 746, 784, 787, 855, 1079, 1080, 1146, 1148, 1221], "window": [115, 116, 129, 185, 186, 188, 189, 232, 296, 357, 393, 407, 415, 416, 417, 508, 510, 542, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 676, 723, 724, 746, 784, 785, 787, 788, 811, 855, 914, 955, 969, 978, 979, 980, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1221], "rn": [115, 116, 129], "go": [115, 116, 129, 257, 296, 599, 1141], "nodataerror": [115, 116, 120, 126, 129, 758], "lazili": [115, 116, 129, 130, 131, 132, 133, 134, 768, 855], "glob": [115, 116, 129, 132, 133, 134], "continu": [115, 127, 358, 550, 586, 746, 915, 1088, 1128, 1221], "benchmark": [115, 127], "50000": 116, "batchedcsvread": [116, 758], "upon": 116, "creation": 116, "gather": [116, 179, 251, 296, 432, 497, 650, 651, 746, 782, 825, 855, 991, 1061, 1193, 1194, 1221], "next_batch": 116, "big": 116, "interest": 116, "seen_group": 116, "big_fil": 116, "df_current_batch": 116, "partition_df": 116, "partition_bi": [116, 203, 296], "as_dict": [116, 221, 296], "fh": 116, "write_csv": [116, 129, 296], "els": [116, 736], "connectionorcursor": 117, "iter_batch": 117, "cursor": 117, "client": 117, "odbc": 117, "establish": 117, "resultset": 117, "manner": 117, "veri": [117, 202, 262, 296, 510, 746, 843], "poor": 117, "trip": 117, "still": [117, 118], "intern": [117, 136, 202, 296], "exact": [117, 143, 145, 147, 244, 296, 631, 632, 633, 634, 635, 656, 746, 1175, 1176, 1177], "incom": 117, "execute_opt": 117, "read_arrow_batches_from_odbc": 117, "read_database_uri": 117, "wide": [117, 183, 214, 265, 296, 802, 855], "snowflak": [117, 118], "variou": [117, 296, 746, 855, 858, 1221], "facil": 117, "initialis": [117, 151, 855, 1228], "flight": 117, "flightsql": 117, "flight_sql": 117, "about": [117, 586, 593, 601, 602, 616, 746, 1128, 1135, 1143, 1144, 1158, 1221, 1229], "notabl": 117, "dremio": 117, "influxdb": 117, "notic": [117, 296, 855, 1221], "dbapi2": 117, "connectorx": [117, 118, 137], "optimis": [117, 208, 235, 282, 296, 855, 1070, 1116, 1221, 1229], "translat": 117, "conn": 117, "url": [117, 127, 134, 601, 603, 1143, 1145], "test_data": 117, "user_conn": 117, "normalised_scor": 117, "uint8": [117, 142, 144, 157, 256, 257, 265, 296, 350, 351, 557, 648, 663, 746, 764, 855, 858, 908, 909, 1094, 1191, 1221, 1229], "parameteris": 117, "metric": 117, "alchemy_conn": 117, "qmark": 117, "variad": 117, "1000": [117, 120, 169, 256, 296, 378, 402, 964, 1200, 1221, 1229], "localhost": 117, "5432": 117, "uid": 117, "usr": 117, "pwd": 117, "max_text_s": 117, "max_binary_s": 117, "do_someth": 117, "partition_on": 118, "partition_rang": 118, "partition_num": 118, "dbreadengin": 118, "raw": 118, "warehous": 118, "role": 118, "transfer": 118, "document": [118, 120, 396, 399, 606, 633, 634, 635, 639, 742, 893, 958, 961, 1148, 1175, 1176, 1177, 1181], "redshift": 118, "mysql": 118, "mariadb": 118, "clickhous": 118, "oracl": 118, "bigqueri": 118, "pleas": [118, 185, 296, 690, 695, 784, 855], "github": 118, "sfu": 118, "connector": 118, "destin": 118, "develop": [118, 145, 147], "read_databas": 118, "explicitli": [118, 143, 145, 151, 728, 757], "test_tabl": 118, "compani": 118, "testdb": 118, "public": [118, 296, 746, 758, 855, 1221], "myrol": 118, "delta_table_opt": [119, 130], "root": [119, 130, 338, 457, 507, 520, 529, 530, 531, 532, 533, 534, 548, 590, 647, 745, 746, 895, 1131, 1221], "absolut": [119, 130, 131, 138, 139, 140, 141, 302, 415, 416, 417, 746, 860, 978, 979, 980, 1221], "avoid": [119, 234, 296, 305, 746], "year": [119, 130, 185, 205, 232, 267, 296, 376, 377, 389, 390, 393, 407, 408, 562, 565, 566, 567, 568, 569, 571, 572, 573, 689, 690, 691, 692, 693, 694, 733, 734, 746, 784, 793, 811, 855, 934, 935, 951, 952, 955, 969, 970], "2021": [119, 130, 157, 163, 183, 185, 267, 296, 633, 708, 764, 784, 855, 858, 926, 927, 935, 959, 1019, 1175, 1221], "aw": [119, 127, 130, 134], "googl": [119, 130, 131], "service_account": [119, 130], "service_account_json_absolute_path": [119, 130], "az": [119, 130, 131], "adl": [119, 130, 131], "abf": [119, 130, 131], "azure_storage_account_nam": [119, 130, 131], "azure_storage_account_kei": [119, 130, 131], "without_fil": [119, 130, 131], "track": [119, 130, 131, 208, 296, 499, 1228], "sheet_id": [120, 126], "sheet_nam": [120, 126], "xlsx2csv": [120, 137], "openpyxl": [120, 137], "pyxlsb": [120, 137], "xlsx2csv_option": 120, "read_csv_opt": 120, "noreturn": [120, 126], "spreadsheet": [120, 126, 223, 296, 758], "xlsb": 120, "sheetnam": [120, 126], "nor": [120, 126, 236, 296], "fastest": 120, "read_csv": [120, 129], "refin": 120, "significantli": [120, 208, 282, 296, 1070, 1221, 1229], "potenti": [120, 129, 132, 133, 202, 233, 235, 296, 529], "unabl": 120, "julian": 120, "skip_empty_lin": 120, "influenc": [120, 777, 798, 855], "pipelin": 120, "correct": [120, 126, 416, 417, 458, 566, 567, 568, 569, 570, 571, 573, 586, 746, 797, 798, 855, 979, 980, 1023, 1106, 1128, 1221], "known": [120, 145, 499, 565, 566, 567, 568, 569, 571, 572, 573, 746, 838, 843, 1063], "better": [120, 208, 257, 282, 296, 510, 608, 746, 843, 1113, 1116, 1150, 1221], "detect": 120, "memory_map": [121, 127, 132], "greatli": [121, 132], "repeat": [121, 132, 554, 556, 719, 737, 746], "give": [121, 123, 127, 132, 133, 214, 263, 296, 373, 458, 556, 656, 746, 758, 802, 827, 855, 931, 1023, 1221], "That": [121, 797, 798, 855], "filenam": 121, "my_fil": 121, "write_ipc": [121, 296], "read_ndjson": 124, "openoffic": 126, "od": 126, "parallelstrategi": [127, 134], "use_statist": [127, 134], "hive_partit": [127, 134], "retri": [127, 134], "row_group": [127, 134], "hive": [127, 134], "prune": [127, 134, 798, 855], "gcp": [127, 131, 134], "stabl": [127, 156, 161, 163, 190, 236, 261, 296, 436, 503, 746, 762, 802, 821, 826, 855, 994, 1221], "read_tabl": 127, "scan_parquet": [127, 135], "scan_pyarrow_dataset": [127, 134], "contribut": [127, 567, 569, 571, 573, 746], "with_column_nam": 129, "push": [129, 132, 133, 134, 135], "down": [129, 132, 133, 134, 135, 427, 746, 989, 1221], "therebi": [129, 132, 133], "realloc": [129, 132, 133, 171, 296, 983, 1221], "headerless": 129, "my_long_fil": 129, "thing": [129, 136], "less": [129, 205, 296, 460, 505, 625, 746, 793, 855, 1167, 1229], "breezah": 129, "languag": [129, 185, 205, 232, 267, 296, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 969], "hard": [129, 797, 798, 855], "mydf": 129, "lambda": [129, 154, 177, 208, 222, 223, 282, 296, 310, 415, 416, 417, 499, 506, 507, 508, 510, 530, 681, 682, 699, 710, 711, 721, 746, 797, 798, 806, 843, 855, 865, 978, 979, 980, 1063, 1070, 1221], "lower": [129, 185, 188, 225, 288, 296, 340, 342, 442, 504, 507, 530, 551, 555, 569, 670, 690, 691, 693, 694, 705, 706, 720, 733, 734, 746, 784, 787, 808, 849, 855, 899, 901, 1000, 1068, 1089, 1092, 1105, 1208, 1221], "simpli": [129, 542, 681, 699, 746], "idx": [129, 185, 203, 296, 499, 784, 855, 1063], "uint16": [129, 350, 351, 648, 746, 858, 908, 909, 1191, 1221], "u16": [129, 145, 1229], "eu": [130, 131], "central": [130, 131, 458, 586, 746, 1023, 1128, 1221], "iceberg": [131, 758], "pyiceberg": [131, 137], "metadata": [131, 185, 186, 188, 189, 232, 296, 562, 746, 784, 785, 787, 788, 811, 855], "secret": [131, 134], "adlf": 131, "my": [131, 135, 640, 1182], "oauth": 131, "token": 131, "ya29": 131, "dr": 131, "afm": 131, "py": 131, "impl": 131, "fsspecfileio": 131, "read_parquet": 134, "east": 134, "allow_pyarrow_filt": 135, "comparison": 135, "dset": 135, "folder": 135, "04": [135, 157, 185, 267, 296, 366, 367, 385, 386, 392, 393, 396, 399, 400, 401, 404, 406, 410, 633, 693, 695, 764, 784, 855, 858, 925, 939, 944, 947, 948, 949, 954, 958, 961, 962, 963, 966, 968, 972, 1175], "seed": [136, 190, 236, 296, 436, 487, 553, 576, 582, 746, 994, 1051, 1090, 1112, 1124, 1221], "shuffl": [136, 236, 282, 296, 487, 576, 746, 843, 1051, 1112, 1221], "stdout": [137, 151, 183, 296, 521], "platform": 137, "maco": 137, "14": [137, 145, 175, 194, 208, 209, 211, 216, 229, 248, 251, 279, 281, 283, 284, 285, 286, 287, 288, 289, 296, 352, 353, 354, 355, 356, 364, 441, 497, 553, 615, 650, 651, 687, 688, 733, 746, 840, 842, 844, 845, 846, 847, 848, 849, 850, 858, 910, 911, 912, 913, 922, 955, 1001, 1021, 1061, 1117, 1157, 1193, 1194, 1211, 1221], "arm64": 137, "arm": 137, "64bit": [137, 555, 746, 1092, 1221], "main": [137, 768, 855], "oct": 137, "13": [137, 145, 158, 159, 172, 173, 182, 195, 206, 218, 232, 271, 279, 281, 283, 284, 285, 286, 287, 288, 289, 296, 305, 371, 375, 379, 381, 383, 388, 395, 518, 520, 562, 636, 676, 681, 684, 699, 730, 735, 746, 765, 766, 778, 779, 795, 811, 832, 840, 842, 844, 845, 846, 847, 848, 849, 850, 855, 929, 933, 940, 942, 945, 950, 955, 957, 969, 970, 1007, 1010, 1017, 1019, 1070, 1178, 1221], "54": [137, 419, 746, 1229], "clang": 137, "1500": [137, 146], "adbc_driver_manag": 137, "cloudpickl": 137, "matplotlib": [137, 807, 819, 855], "26": [137, 372, 408, 930], "pydant": 137, "check_row_ord": [138, 139], "check_column_ord": [138, 139], "check_dtyp": [138, 139, 140, 141], "check_exact": [138, 139, 140, 141], "rtol": [138, 139, 140, 141], "atol": [138, 139, 140, 141], "08": [138, 139, 140, 141, 145, 232, 296, 366, 393, 562, 633, 693, 695, 746, 811, 855, 858, 955, 969, 1175], "categorical_as_str": [138, 139, 140, 141], "assert": [138, 139, 140, 141, 143, 145, 147, 232, 296, 758, 858], "assertionerror": [138, 139, 140, 141], "compar": [138, 139, 140, 141, 168, 178, 296, 413, 414, 433, 435, 460, 505, 537, 538, 746, 893, 976, 1115, 1221], "unsort": [138, 139], "exactli": [138, 139, 140, 141, 144, 145, 147, 624, 625, 631, 632, 695, 1123, 1166, 1167, 1173, 1174, 1221], "toler": [138, 139, 140, 141, 205, 296, 793, 855], "inexact": [138, 139, 140, 141], "share": [138, 139, 140, 141, 169, 296, 746, 977, 1221], "assert_series_equ": [138, 141, 976, 1221, 1229], "assert_frame_not_equ": [138, 141], "pytest": [138, 140], "worthwhil": [138, 140], "shorten": [138, 140], "traceback": [138, 139, 140, 141], "tb": [138, 140, 169, 296, 977, 1221], "short": [138, 140], "tend": [138, 140], "unhelpfulli": [138, 140], "assert_frame_equ": [139, 140, 168, 296, 1229], "assert_series_not_equ": [139, 140], "check_nam": [140, 141], "searchstrategi": [142, 144, 145, 147], "null_prob": [142, 145, 147], "percentag": [142, 145, 147, 543, 746, 1084, 1221], "chanc": [142, 145, 147, 1229], "independ": [142, 143, 145, 147], "flag": [142, 296, 578, 593, 601, 602, 616, 746, 775, 797, 798, 855, 1118, 1135, 1143, 1144, 1158, 1221], "hypothesi": [142, 143, 144, 145, 146, 147, 1229], "sampled_from": [142, 1229], "unique_small_int": 142, "ccy": [142, 1229], "gbp": [142, 1229], "eur": [142, 163, 183, 296, 1229], "jpy": [142, 1229], "min_col": [143, 145], "max_col": [143, 145], "standalon": [143, 145, 858], "mincol": 143, "assign": [143, 185, 296, 499, 542, 553, 624, 625, 746, 784, 855, 1063, 1090, 1166, 1167, 1221], "minimum": [143, 144, 145, 147, 177, 216, 217, 296, 415, 416, 417, 524, 536, 545, 553, 716, 717, 746, 804, 855, 943, 978, 979, 980, 1080, 1086, 1090, 1221, 1229], "especi": [143, 561, 746, 777, 855, 1098, 1221], "test_unique_xyz": 143, "assert_someth": 143, "punctuat": 143, "test_special_char_colname_init": 143, "inner_dtyp": [144, 147], "select_from": [144, 147], "min_siz": [144, 145, 147, 1229], "max_siz": [144, 145, 147, 1229], "anoth": [144, 168, 178, 184, 296, 357, 365, 476, 497, 514, 517, 557, 746, 783, 834, 855, 914, 923, 976, 983, 1040, 1094, 1115, 1221], "randomli": 144, "innermost": 144, "2x": 144, "lst": 144, "11330": 144, "24030": 144, "116": 144, "zz": [144, 147], "uint8_pair": [144, 1229], "uint": [144, 1229], "zip": [144, 1229], "131": 144, "176": 144, "149": [144, 1229], "max_data_s": [145, 147], "include_col": 145, "allow_infin": [145, 147], "allowed_dtyp": [145, 147, 1229], "excluded_dtyp": [145, 147], "describ": [145, 183, 296, 1221], "desir": [145, 499, 1063], "n_chunk": [145, 147, 296, 864, 983, 1221], "randomis": 145, "onto": 145, "pct": 145, "preced": [145, 858], "disallow": [145, 147], "inf": [145, 147, 317, 358, 438, 444, 448, 550, 656, 746, 871, 905, 915, 996, 1004, 1009, 1068, 1084, 1088, 1208, 1221], "exclud": [145, 147, 185, 296, 348, 351, 442, 746, 784, 855, 1000, 1019, 1221], "usag": [145, 147, 244, 296, 858, 1123, 1221], "deploi": [145, 147], "characterist": [145, 147], "concret": [145, 147], "test_repr": 145, "isinst": [145, 147, 296], "0x11f561580": 145, "0565": 145, "34715": 145, "5844": 145, "33": [145, 215, 296, 574, 746, 803, 855, 1105, 1221], "076854": 145, "3382": 145, "17": [145, 275, 564, 574, 701, 733, 746, 836, 903, 905, 955, 1100, 1221, 1229], "48662": 145, "7540": 145, "836271": 145, "4063": 145, "06": [145, 157, 267, 296, 366, 384, 391, 392, 393, 407, 408, 764, 855, 858, 954, 955, 969], "39092": 145, "1889": 145, "41": [145, 572, 746, 1229], "874455": 145, "15836": 145, "1755e": 145, "575050513": 145, "profil": [146, 148, 767, 855], "balanc": [146, 148, 1229], "set_environ": 146, "polars_hypothesis_profil": [146, 148], "constructor": 147, "normal": [147, 185, 296, 412, 458, 586, 746, 784, 855, 975, 1023, 1128, 1221], "test_repr_is_valid_str": 147, "experi": 147, "create_list_strategi": [147, 1229], "polars_max_thread": 149, "behind": 149, "lock": 149, "reason": [149, 499, 508, 746], "temporarili": [149, 151, 185, 186, 188, 189, 232, 296, 562, 746, 784, 785, 787, 788, 811, 855], "pyspark": 149, "udf": [149, 154, 208, 222, 277, 282, 296, 310, 510, 546, 668, 711, 746, 806, 838, 843, 855, 865, 1070, 1221], "recommend": [149, 202, 222, 296, 858], "easi": [151, 1229], "restor": 151, "restore_default": 151, "relat": [151, 858], "set_tbl_row": 151, "whatev": 151, "were": [151, 209, 211, 216, 248, 296, 557, 742, 746, 1094, 1221], "enter": 151, "advantag": [151, 222, 296], "set_": 151, "set_verbos": 151, "do_various_th": 151, "cleaner": 151, "breviti": 151, "vein": 151, "durat": [151, 205, 267, 296, 364, 371, 372, 375, 379, 381, 383, 388, 395, 400, 401, 402, 403, 404, 405, 406, 410, 654, 690, 691, 693, 694, 733, 734, 746, 793, 855, 858, 922, 929, 930, 933, 940, 942, 945, 950, 957, 962, 963, 964, 965, 966, 967, 968, 972, 1204, 1221], "set_ascii_t": 151, "write_ascii_frame_to_stdout": 151, "sy": 151, "nan_as_nul": 153, "polarsdatafram": 153, "notimplementederror": 153, "num_row": 153, "get_column": [153, 259, 296], "dtypekind": 153, "inference_s": [154, 208, 296], "256": [154, 208, 296, 1084, 1221], "map_row": [154, 296], "tri": [154, 208, 296], "approxim": [155, 296, 311, 669, 746, 761, 855, 1229], "hyperloglog": [155, 296, 311, 669, 746, 761, 855], "algorithm": [155, 296, 311, 594, 618, 669, 746, 761, 855, 1136, 1160], "cardin": [155, 296, 311, 669, 746, 761, 855], "k": [156, 235, 261, 296, 334, 458, 655, 746, 762, 826, 855, 887, 1023, 1205, 1221], "intoexpr": [156, 184, 185, 186, 187, 188, 189, 232, 238, 239, 242, 246, 261, 271, 272, 275, 296, 309, 329, 332, 333, 438, 442, 469, 470, 479, 488, 489, 490, 491, 542, 557, 577, 579, 580, 589, 594, 618, 623, 624, 625, 631, 632, 665, 667, 673, 675, 676, 677, 678, 680, 681, 684, 685, 688, 692, 699, 713, 717, 722, 725, 728, 730, 746, 762, 783, 784, 785, 786, 787, 788, 811, 813, 814, 817, 821, 826, 832, 833, 836, 855, 882, 885, 886, 1000, 1043, 1094, 1120, 1165, 1166, 1167, 1173, 1174, 1221], "nulls_last": [156, 246, 261, 296, 320, 588, 746, 762, 821, 826, 855, 874, 1221], "smallest": [156, 261, 296, 334, 746, 762, 826, 855, 887, 1221], "largest": [156, 261, 296, 655, 746, 762, 826, 855, 1205, 1221], "wors": [156, 261, 296, 762, 821, 826, 855], "search": [156, 205, 261, 296, 499, 594, 618, 762, 793, 821, 826, 855, 1136, 1160], "top_k": [156, 296, 334, 746, 762, 855, 887, 1221], "columnnameorselector": [157, 164, 166, 214, 221, 223, 235, 255, 263, 264, 265, 296, 764, 772, 773, 802, 827, 828, 855], "strict": [157, 296, 330, 335, 593, 597, 615, 633, 634, 635, 637, 639, 746, 764, 855, 883, 888, 976, 1115, 1135, 1139, 1157, 1175, 1176, 1177, 1179, 1181, 1221], "due": [157, 185, 205, 232, 235, 267, 296, 305, 335, 372, 389, 393, 407, 457, 529, 531, 532, 533, 534, 548, 562, 565, 566, 567, 568, 569, 571, 572, 573, 647, 690, 691, 693, 694, 733, 734, 746, 764, 784, 793, 811, 855, 888, 930, 951, 955, 969, 1221], "overflow": [157, 296, 335, 350, 351, 615, 637, 648, 746, 764, 855, 888, 908, 909, 1157, 1179, 1191, 1221], "2020": [157, 163, 183, 232, 296, 367, 372, 378, 392, 396, 399, 400, 401, 402, 403, 404, 405, 406, 562, 633, 634, 635, 746, 764, 811, 855, 858, 925, 930, 954, 958, 961, 962, 963, 964, 965, 966, 967, 968, 1175, 1176, 1177], "u8": [157, 255, 256, 265, 296, 557, 663, 746, 764, 855, 858, 1094, 1198, 1221, 1229], "to_dict": [157, 296, 764, 855], "as_seri": [157, 253, 296, 764, 855, 915, 1088, 1221], "tempor": [157, 185, 186, 188, 189, 202, 232, 234, 235, 254, 296, 340, 442, 562, 565, 566, 567, 568, 569, 571, 572, 573, 746, 758, 764, 784, 785, 787, 788, 811, 855, 858, 899, 1000, 1019, 1221], "greater": [158, 205, 296, 433, 435, 586, 613, 614, 625, 642, 746, 793, 855, 1128, 1155, 1156, 1167, 1184, 1221], "cheap": [158, 159, 239, 272, 296, 765, 766, 814, 833, 855, 898, 902, 1221], "deepcopi": [158, 296, 765, 855, 898, 1221], "appl": [160, 193, 204, 227, 230, 253, 278, 279, 281, 283, 284, 285, 286, 287, 288, 289, 296, 559, 599, 626, 746, 792, 809, 839, 840, 842, 844, 845, 846, 847, 848, 849, 850, 855, 1141, 1168], "banana": [160, 253, 279, 281, 283, 284, 285, 286, 287, 288, 289, 296, 559, 599, 626, 746, 840, 842, 844, 845, 846, 847, 848, 849, 850], "orang": [160, 278, 279, 281, 283, 284, 286, 288, 289, 296, 839, 840, 842, 844, 845, 847, 849, 850], "pairwis": [161, 296], "pearson": [161, 296, 458, 586, 678, 746, 1023, 1128, 1221], "correl": [161, 296, 678, 723], "coeffici": [161, 296, 586, 746, 1128, 1221], "corrcoef": [161, 296], "percentil": [163, 296, 916, 1221], "summari": [163, 296, 916, 1221], "deem": [163, 296], "glimps": [163, 191, 296], "median": [163, 223, 296, 423, 567, 746, 834, 855, 916, 1103, 1221], "str2": [163, 296], "usd": [163, 183, 296, 1229], "null_count": [163, 166, 296, 357, 746, 855, 914, 916, 993, 1221], "266667": [163, 296], "std": [163, 296, 571, 746, 855, 916, 1107, 1221], "101514": [163, 296], "707107": [163, 296, 416, 571, 746, 979, 1221], "more_column": [164, 170, 240, 264, 296, 418, 697, 746, 772, 776, 816, 828, 855], "subset": [166, 219, 263, 296, 773, 827, 855], "preserv": [166, 174, 184, 187, 204, 208, 257, 258, 296, 362, 363, 424, 472, 583, 746, 773, 780, 792, 855, 919, 920, 987, 1036, 1125, 1203, 1221], "behavior": [166, 296, 476, 497, 509, 698, 707, 746, 773, 855, 915, 1040, 1061, 1069, 1088, 1221], "all_horizont": [166, 296, 664, 773, 855], "is_nul": [166, 296, 746, 773, 855, 1221], "null_equ": [168, 178, 296, 976, 1115, 1221], "sizeunit": [169, 296, 977, 1221], "heap": [169, 296, 746, 977, 1221], "its": [169, 296, 366, 393, 407, 589, 736, 746, 893, 924, 955, 969, 977, 1221], "bitmap": [169, 296, 977, 1221], "structarrai": [169, 296, 977, 1221], "constant": [169, 232, 296, 364, 421, 746, 811, 855, 922, 977, 984, 1221], "unchang": [169, 296, 509, 557, 654, 746, 797, 798, 838, 843, 855, 977, 1069, 1094, 1204, 1221], "capac": [169, 244, 296, 977, 1123, 1221], "ffi": [169, 296, 977, 1221], "kb": [169, 296, 977, 1221], "mb": [169, 296, 977, 1221], "gb": [169, 296, 977, 1221], "revers": [169, 296, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 507, 530, 531, 532, 548, 647, 746, 855, 906, 907, 908, 909, 910, 911, 912, 913, 1221], "1_000_000": [169, 296, 977, 1221], "25888898": [169, 296], "689577102661133": [169, 296], "long": [170, 214, 265, 296, 776, 802, 855], "letter": [170, 280, 290, 296, 418, 594, 602, 618, 697, 746, 776, 841, 851, 855, 858, 1136, 1144, 1160], "onlin": [171, 296, 983, 1221], "rerun": [171, 296, 983, 1221], "conveni": [171, 296, 864, 983, 1221], "Not": [172, 296, 451, 453, 746, 778, 855], "fillnullstrategi": [173, 296, 423, 746, 779, 855, 986, 1221], "matches_supertyp": [173, 296, 779, 855], "forward": [173, 205, 242, 296, 385, 423, 429, 492, 579, 746, 779, 793, 817, 855, 947, 986, 1056, 1120, 1221], "consecut": [173, 296, 328, 423, 429, 592, 746, 779, 855, 986, 1134, 1221], "fill_nan": [173, 296, 746, 855, 1221], "intoexprcolumn": [174, 296, 334, 340, 341, 342, 487, 492, 543, 576, 579, 628, 629, 630, 655, 670, 690, 691, 693, 694, 705, 706, 733, 734, 736, 746, 780, 817, 855, 887, 899, 900, 901, 1051, 1056, 1084, 1170, 1171, 1172, 1205, 1221], "constraint": [174, 296, 457, 529, 531, 532, 533, 534, 548, 647, 736, 746, 780, 855], "is_in": [174, 296, 746, 1221], "get_column_index": [175, 296], "reduct": [177, 296], "supercast": [177, 296], "parent": [177, 296], "rule": [177, 296, 594, 618, 1136, 1160], "arithmet": [177, 296], "zip_with": [177, 296, 1221], "foo11": [177, 296], "bar22": [177, 296], "nth": [179, 251, 296, 432, 625, 651, 746, 782, 825, 855, 991, 1167, 1194, 1221], "th": [179, 251, 296, 432, 488, 586, 651, 746, 782, 825, 855, 991, 1052, 1128, 1194, 1221], "retriev": [180, 296, 465, 466, 643, 1029, 1030, 1185], "max_items_per_column": [183, 296], "max_colname_length": [183, 296], "return_as_str": [183, 296, 521], "preview": [183, 296], "few": [183, 296], "exce": [183, 296], "ellipsi": [183, 296], "head": [183, 207, 250, 296, 309, 462, 746, 796, 855, 1025, 1192, 1221], "tail": [183, 191, 296, 309, 586, 746, 855, 995, 1128, 1221], "more_bi": [184, 187, 221, 246, 296, 589, 746, 783, 786, 821, 855], "groupbi": [184, 223, 296, 310, 510, 668, 711, 746, 855], "consist": [184, 187, 221, 296, 633, 783, 786, 855, 864, 983, 1175, 1221], "regardless": [184, 187, 296, 606, 736, 1148], "agg": [184, 185, 188, 223, 232, 296, 304, 424, 426, 431, 434, 510, 588, 589, 662, 711, 746, 767, 768, 775, 777, 783, 784, 785, 787, 788, 807, 811, 815, 819, 855, 858], "Or": [184, 185, 205, 232, 246, 267, 275, 296, 542, 562, 589, 690, 691, 693, 694, 733, 734, 736, 746, 783, 784, 793, 811, 821, 836, 855], "index_column": [185, 186, 188, 189, 232, 296, 562, 746, 784, 785, 787, 788, 811, 855], "timedelta": [185, 186, 188, 189, 205, 232, 267, 296, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 785, 787, 788, 793, 811, 855, 858, 936, 938, 943, 951, 955, 969, 1079, 1080, 1221], "period": [185, 186, 188, 189, 232, 296, 393, 407, 415, 416, 417, 543, 562, 690, 691, 693, 694, 733, 734, 746, 784, 785, 787, 788, 811, 855, 955, 969, 978, 979, 980, 1084, 1221], "include_boundari": [185, 188, 296, 784, 787, 855], "closedinterv": [185, 186, 188, 189, 232, 296, 442, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 785, 787, 788, 811, 855, 1000, 1221], "label": [185, 296, 358, 550, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 746, 784, 807, 855, 915, 1088, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1221], "start_bi": [185, 188, 296, 784, 787, 855], "startbi": [185, 188, 296, 784, 787, 855], "check_sort": [185, 186, 188, 189, 232, 296, 562, 746, 784, 785, 787, 788, 811, 855], "dynamicgroupbi": [185, 188, 296], "member": [185, 296, 784, 855, 1008, 1221], "descript": [185, 296, 784, 855], "ascend": [185, 186, 188, 189, 232, 296, 562, 566, 567, 568, 569, 571, 573, 746, 784, 785, 787, 788, 811, 855], "dynam": [185, 188, 296, 499, 565, 566, 567, 568, 569, 571, 572, 573, 746, 784, 787, 855, 1063], "matter": [185, 186, 188, 189, 202, 232, 234, 235, 254, 296, 562, 629, 630, 746, 784, 785, 787, 788, 811, 855], "interv": [185, 186, 188, 189, 232, 267, 296, 358, 393, 407, 438, 442, 550, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 785, 787, 788, 811, 855, 915, 928, 931, 932, 939, 941, 944, 946, 949, 952, 953, 955, 960, 969, 970, 996, 1000, 1088, 1221], "_lower_boundari": [185, 296, 784, 855], "_upper_boundari": [185, 296, 784, 855], "harder": [185, 188, 296, 784, 787, 855], "inclus": [185, 186, 188, 189, 232, 296, 442, 562, 565, 566, 567, 568, 569, 571, 572, 573, 623, 624, 670, 690, 691, 693, 694, 705, 706, 733, 734, 746, 784, 785, 787, 788, 811, 855, 1000, 1165, 1166, 1221], "datapoint": [185, 188, 296, 784, 787, 855], "boundari": [185, 296, 340, 341, 342, 438, 746, 784, 855, 899, 900, 901, 996, 1221], "mondai": [185, 188, 296, 407, 409, 784, 787, 855, 969, 971], "tuesdai": [185, 188, 296, 784, 787, 855], "wednesdai": [185, 188, 296, 784, 787, 855], "thursdai": [185, 188, 296, 784, 787, 855], "fridai": [185, 188, 296, 784, 787, 855], "saturdai": [185, 188, 296, 784, 787, 855], "sundai": [185, 188, 296, 409, 784, 787, 855, 971], "earliest": [185, 188, 296, 392, 393, 407, 633, 635, 692, 784, 787, 855, 954, 955, 969, 1175, 1177], "weekli": [185, 188, 296, 407, 784, 787, 855, 969], "week": [185, 188, 205, 232, 267, 296, 389, 393, 407, 409, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 695, 733, 734, 746, 784, 787, 793, 811, 855, 858, 951, 955, 969, 971], "sorted": [185, 186, 188, 189, 232, 296, 562, 746, 784, 785, 787, 788, 811, 855], "verifi": [185, 186, 188, 189, 232, 296, 562, 746, 784, 785, 787, 788, 811, 855], "incorrectli": [185, 186, 188, 189, 232, 296, 499, 562, 746, 784, 785, 787, 788, 811, 855], "incorrect": [185, 186, 188, 189, 232, 296, 410, 508, 562, 578, 746, 784, 785, 787, 788, 811, 838, 843, 855, 972, 1118, 1221], "roll": [185, 186, 189, 296, 385, 386, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 676, 723, 724, 746, 784, 785, 788, 855, 947, 948, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1221], "re": [185, 201, 257, 296, 385, 386, 784, 855, 947, 948, 1228], "come": [185, 296, 385, 386, 458, 499, 746, 759, 784, 854, 855, 947, 948, 1023, 1221], "1d": [185, 205, 232, 267, 296, 365, 389, 393, 401, 404, 407, 410, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 695, 708, 733, 734, 746, 784, 793, 811, 855, 858, 923, 931, 938, 951, 955, 960, 963, 966, 969], "set_index": [185, 296, 784, 855], "resampl": [185, 296, 784, 855], "reset_index": [185, 296, 784, 855], "though": [185, 296, 742, 784, 855], "unlik": [185, 296, 784, 855], "evenli": [185, 296, 784, 855], "upsampl": [185, 296, 784, 855], "1n": [185, 205, 232, 267, 296, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 969], "nanosecond": [185, 205, 232, 267, 296, 389, 393, 394, 405, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 695, 733, 734, 746, 784, 793, 811, 855, 951, 955, 956, 967, 969], "1u": [185, 205, 232, 267, 296, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 969], "microsecond": [185, 202, 205, 232, 234, 235, 254, 267, 296, 389, 393, 402, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 692, 693, 694, 695, 732, 733, 734, 746, 784, 793, 807, 811, 855, 858, 951, 955, 964, 969], "1m": [185, 205, 232, 267, 296, 378, 389, 393, 402, 403, 405, 406, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 964, 965, 967, 968, 969], "millisecond": [185, 205, 232, 267, 296, 389, 393, 403, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 695, 733, 734, 746, 784, 793, 811, 855, 858, 951, 955, 965, 969], "minut": [185, 205, 232, 267, 296, 389, 393, 404, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 692, 693, 694, 695, 732, 733, 734, 746, 784, 793, 811, 855, 858, 951, 955, 966, 969], "1h": [185, 205, 232, 267, 296, 372, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 930, 932, 951, 955, 969], "hour": [185, 205, 232, 267, 296, 389, 393, 401, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 692, 693, 694, 695, 732, 733, 734, 746, 784, 793, 811, 855, 858, 951, 955, 963, 969], "1w": [185, 205, 232, 267, 296, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 969], "1mo": [185, 205, 232, 267, 296, 367, 385, 386, 389, 392, 393, 400, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 925, 946, 947, 948, 951, 952, 953, 954, 955, 962, 969, 970], "month": [185, 205, 232, 267, 296, 370, 385, 386, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 689, 690, 691, 692, 693, 694, 695, 733, 734, 746, 784, 793, 811, 855, 928, 947, 948, 951, 955, 969], "1q": [185, 205, 232, 267, 296, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 969], "quarter": [185, 205, 232, 267, 296, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 969], "1y": [185, 205, 232, 267, 296, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 951, 955, 969], "1i": [185, 205, 232, 267, 296, 389, 562, 565, 566, 567, 568, 569, 571, 572, 573, 746, 784, 793, 811, 855, 951], "3d12h4m25": [185, 205, 232, 267, 296, 393, 407, 562, 690, 691, 693, 694, 733, 734, 746, 784, 793, 811, 855, 955, 969], "correspond": [185, 205, 232, 257, 267, 296, 377, 389, 393, 407, 510, 553, 561, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 733, 734, 746, 767, 784, 793, 811, 855, 935, 951, 955, 969, 1090, 1098, 1221], "daylight": [185, 205, 232, 267, 296, 364, 372, 389, 393, 407, 562, 565, 566, 567, 568, 569, 571, 572, 573, 690, 691, 693, 694, 695, 733, 734, 746, 784, 793, 811, 855, 930, 951, 955, 969], "10i": [185, 232, 296, 562, 746, 784, 811, 855], "datetime_rang": [185, 296, 365, 367, 378, 385, 386, 389, 392, 393, 400, 401, 402, 403, 404, 405, 406, 407, 410, 565, 566, 568, 571, 572, 573, 690, 746, 784, 855, 922, 923, 925, 930, 931, 932, 938, 939, 941, 944, 947, 948, 949, 951, 954, 955, 960, 962, 963, 964, 965, 966, 967, 968, 969], "30m": [185, 296, 393, 407, 784, 855, 955, 969], "lower_bound": [185, 296, 340, 342, 442, 746, 784, 855, 899, 901, 1000, 1208, 1221], "upper_bound": [185, 296, 340, 341, 442, 499, 746, 784, 855, 899, 900, 1000, 1068, 1221], "bys": [185, 296, 784, 855], "int_rang": [185, 265, 282, 296, 670, 784, 798, 843, 855], "2i": [185, 296, 784, 855], "3i": [185, 296, 784, 855], "a_agg_list": [185, 296, 784, 855], "rollinggroupbi": [186, 189, 232, 296], "group_bi": [187, 219, 223, 295, 296, 304, 424, 426, 431, 434, 508, 510, 588, 589, 662, 711, 746, 767, 768, 775, 777, 786, 807, 819, 854, 855, 858], "group_by_dynam": [188, 232, 296, 787, 811, 855], "_lower_bound": [188, 296, 787, 855], "_upper_bound": [188, 296, 787, 855], "seed_1": [190, 296, 436, 746, 994, 1221], "seed_2": [190, 296, 436, 746, 994, 1221], "seed_3": [190, 296, 436, 746, 994, 1221], "hash": [190, 296, 746, 1221], "Its": [190, 296, 436, 746, 994, 1221], "u64": [190, 296, 436, 555, 746, 807, 855, 994, 1221], "10783150408545073287": [190, 296], "1438741209321515184": [190, 296], "10047419486152048166": [190, 296], "2047317070637311557": [190, 296], "ab": [191, 207, 250, 271, 296, 643, 645, 746, 832, 855, 995, 1025, 1192, 1221], "grown": [193, 296], "insert_column": [194, 296], "intermedi": [196, 296, 791, 855, 1229], "linear": [196, 225, 288, 296, 441, 467, 513, 551, 569, 676, 677, 720, 746, 791, 808, 849, 855, 999, 1031, 1089, 1105, 1221], "666667": [196, 268, 284, 296, 415, 746, 791, 830, 845, 855, 978, 1221], "333333": [196, 296, 457, 529, 746, 791, 855, 1084, 1109, 1221], "mask": [197, 199, 296, 330, 443, 445, 446, 449, 450, 456, 544, 545, 593, 597, 746, 883, 987, 993, 1000, 1002, 1005, 1006, 1011, 1012, 1020, 1085, 1086, 1116, 1135, 1139, 1212, 1221], "visual": [197, 199, 296], "scalar": [200, 208, 233, 296, 577, 668, 708, 711, 746, 1022, 1114, 1221], "With": [200, 242, 296, 492, 565, 566, 567, 568, 569, 571, 572, 573, 579, 746, 817, 855, 1022, 1056, 1120, 1221], "buffer_s": [202, 296], "fit": [202, 244, 265, 296, 581, 722, 746, 1122, 1123, 1221], "signific": [202, 208, 296, 310, 510, 575, 746, 1070, 1111, 1221], "4x": [202, 296], "materialis": [202, 203, 233, 234, 235, 296], "rows_by_kei": [202, 234, 296], "iter_row": [203, 233, 234, 235, 296], "17_500": [203, 296], "klmnoopqrstuvwxyz": [203, 296], "__name__": [203, 296], "7500": [203, 296], "15_000": [203, 296], "record_batch": [203, 296], "to_arrow": [203, 296, 1221], "to_batch": [203, 296], "date32": [203, 296], "large_str": [203, 252, 258, 296], "15000": [203, 296], "2500": [203, 296], "left_on": [204, 205, 266, 296, 792, 793, 829, 855], "right_on": [204, 205, 266, 296, 792, 793, 829, 855], "suffix": [204, 205, 238, 271, 275, 296, 305, 332, 451, 453, 454, 455, 507, 530, 531, 533, 534, 542, 548, 559, 599, 629, 632, 746, 792, 793, 813, 832, 834, 836, 855, 858, 885, 1141, 1174], "_right": [204, 205, 296, 792, 793, 855], "joinvalid": [204, 296, 792, 855], "join_nul": [204, 296, 792, 855], "semi": [204, 296, 792, 855], "anti": [204, 296, 792, 843, 855, 1113, 1116, 1221], "cross": [204, 296, 792, 855], "outer_coalesc": [204, 296, 792, 855], "coalesc": [204, 266, 296, 633, 792, 829, 855, 1175], "cartisian": [204, 296, 792, 855], "many_to_mani": [204, 296, 792, 855], "one_to_on": [204, 296, 792, 855], "one_to_mani": [204, 296, 792, 855], "many_to_on": [204, 296, 792, 855], "join_asof": [204, 296, 792, 855], "other_df": [204, 296], "ham_right": [204, 296, 792, 855], "by_left": [205, 296, 793, 855], "by_right": [205, 296, 793, 855], "asofjoinstrategi": [205, 296, 793, 855], "allow_parallel": [205, 296, 792, 793, 855], "force_parallel": [205, 296, 792, 793, 855], "asof": [205, 296, 793, 855], "rather": [205, 296, 521, 550, 561, 642, 746, 793, 855, 1088, 1098, 1184, 1221], "asof_join": [205, 296], "distanc": [205, 296, 438, 746, 793, 855, 996, 1221], "plan": [205, 206, 296, 763, 767, 771, 775, 792, 793, 815, 819, 855], "forc": [205, 208, 282, 296, 499, 792, 793, 843, 855, 1070, 1221], "gdp": [205, 296, 793, 855], "2016": [205, 296, 793, 855], "2017": [205, 296, 793, 855], "2018": [205, 296, 392, 793, 855, 954], "2019": [205, 296, 793, 855], "jan": [205, 296, 793, 855], "1st": [205, 296, 793, 855], "4164": [205, 296, 793, 855], "4411": [205, 296, 793, 855], "4566": [205, 296, 793, 855], "4696": [205, 296, 793, 855], "set_sort": [205, 232, 267, 296, 562, 746, 793, 811, 855, 1221], "popul": [205, 296, 793, 855], "12th": [205, 296, 793, 855], "82": [205, 296, 793, 855], "66": [205, 266, 296, 572, 663, 746, 793, 829, 855, 1105, 1221], "83": [205, 296, 793, 855], "52": [205, 271, 296, 408, 574, 746, 793, 832, 855], "request": [206, 296], "describe_plan": [206, 296], "unoptim": [206, 296], "describe_optimized_plan": [206, 296], "show_graph": [206, 296, 855], "un": [206, 296], "graphviz": [206, 296, 819, 855], "much": [208, 265, 282, 296, 357, 476, 497, 510, 607, 608, 711, 746, 843, 914, 1040, 1061, 1070, 1149, 1150, 1221], "intens": [208, 282, 296, 542, 746, 1070, 1221], "materi": [208, 282, 296, 767, 807, 843, 855, 858, 1070, 1221], "parallelis": [208, 282, 296, 1070, 1221], "achiev": [208, 282, 296, 510, 608, 746, 915, 1070, 1088, 1150, 1221], "best": [208, 282, 296, 510, 746, 1070, 1221], "black": [208, 296, 329, 331, 332, 333], "arbitrarili": [208, 296], "rearrang": [208, 296], "transform": [208, 296, 508, 638, 640, 641, 746], "lru_cach": [208, 296, 510, 746, 1070, 1221], "column_1": [208, 262, 296], "axi": [209, 211, 214, 216, 248, 296, 671, 672, 802, 855], "max_horizont": [209, 296, 712], "null_strategi": [211, 248, 296], "nullstrategi": [211, 248, 296], "mean_horizont": [211, 296], "propag": [211, 248, 296, 414, 535, 536, 538, 592, 746, 1079, 1080, 1134, 1221], "spam": [211, 296, 602, 1144], "ignore_nul": [212, 249, 296, 306, 308, 415, 416, 417, 592, 664, 666, 746, 862, 863, 978, 979, 980, 1134, 1211, 1221], "id_var": [214, 296, 802, 855], "value_var": [214, 296, 802, 855], "variable_nam": [214, 296, 802, 855], "value_nam": [214, 296, 802, 855], "unpivot": [214, 296, 802, 855], "massag": [214, 296, 802, 855], "measur": [214, 296, 802, 855], "caller": [215, 296, 499, 798, 803, 838, 843, 855], "respons": [215, 296, 803, 855], "steve": [215, 296, 803, 855], "elis": [215, 296, 803, 855], "bob": [215, 296, 803, 855], "ag": [215, 296, 803, 855], "anna": [215, 296, 803, 855], "megan": [215, 296, 803, 855], "thoma": [215, 296, 803, 855], "21": [215, 248, 296, 565, 566, 568, 571, 572, 573, 701, 746, 803, 855, 858], "min_horizont": [216, 296, 716, 725], "what": [219, 296, 508, 594, 618, 746, 1136, 1160, 1211, 1221], "pack": [219, 296], "expr_unique_subset": [219, 296], "df_nuniqu": [219, 296], "df_agg_nuniqu": [219, 296], "include_kei": [221, 235, 296], "offer": [222, 296, 546, 746, 806, 855], "fulli": [222, 236, 296], "cast_str_to_int": [222, 296, 806, 855], "col_nam": [222, 296, 806, 855], "tdf": [222, 296, 806, 855], "aggregate_funct": [223, 296], "pivotagg": [223, 296], "sort_column": [223, 296], "section": [223, 296, 593, 601, 602, 616, 690, 691, 693, 694, 733, 734, 1135, 1143, 1144, 1158], "predefin": [223, 296], "predict": [223, 226, 267, 296], "transpos": [223, 296], "discoveri": [223, 296], "col1": [223, 262, 296, 855, 1229], "col2": [223, 262, 296, 855, 1229], "col3": [223, 296, 1229], "tanh": [223, 296, 746, 1221], "998347": [223, 296], "964028": [223, 296], "999954": [223, 296], "unique_column_valu": [223, 296], "interpol": [225, 288, 296, 423, 513, 551, 569, 720, 746, 808, 849, 855, 1089, 1105, 1221], "rollinginterpolationmethod": [225, 288, 296, 551, 569, 720, 746, 808, 849, 855, 1089, 1105, 1221], "midpoint": [225, 288, 296, 551, 569, 720, 746, 808, 849, 855, 1089, 1105, 1221], "replace_column": [229, 296], "t_0": [232, 296, 562, 565, 566, 567, 568, 569, 571, 572, 573, 746, 811, 855], "t_1": [232, 296, 562, 565, 566, 567, 568, 569, 571, 572, 573, 746, 811, 855], "t_n": [232, 296, 562, 565, 566, 567, 568, 569, 571, 572, 573, 746, 811, 855], "43": [232, 296, 351, 562, 572, 746, 811, 855], "strptime": [232, 296, 392, 562, 746, 811, 855, 954], "2d": [232, 257, 296, 389, 562, 708, 746, 811, 855, 922, 928], "sum_a": [232, 296, 562, 746, 811, 855], "min_a": [232, 296, 562, 746, 811, 855], "max_a": [232, 296, 562, 746, 811, 855], "by_pred": [233, 296], "accord": [233, 296, 509, 550, 690, 691, 693, 694, 733, 734, 746, 935, 1088, 1221], "mutual": [233, 296], "exclus": [233, 296, 663, 670, 705, 706, 746], "clariti": [233, 296], "toomanyrowsreturnederror": [233, 296, 758], "norowsreturnederror": [233, 296, 758], "inherit": [233, 296], "rowserror": [233, 296, 758], "high": [235, 296, 550, 746, 1088, 1221], "cost": [235, 296], "reoconstruct": [235, 296], "defaultdict": [235, 296], "assum": [235, 296, 797, 798, 838, 843, 855], "with_replac": [236, 296, 487, 576, 746, 1051, 1112, 1221], "ordereddict": [237, 296, 728, 812, 855], "named_expr": [238, 239, 271, 272, 296, 725, 728, 813, 814, 832, 833, 855], "threshold": [238, 296, 813, 855], "set_auto_structifi": [238, 271, 296, 813, 832, 855], "auto_structifi": [238, 271, 296, 813, 832, 855], "is_odd": [238, 296, 813, 855], "_is_odd": [238, 296, 813, 855], "sequenti": [239, 272, 296, 814, 833, 855], "fill_valu": [242, 243, 265, 296, 579, 580, 746, 817, 818, 855, 1120, 1121, 1221], "opposit": [242, 296, 492, 579, 746, 817, 855, 1056, 1120, 1221], "lag": [242, 296, 492, 579, 676, 746, 817, 855, 1056, 1120, 1221], "shift": [243, 296, 360, 471, 543, 580, 676, 746, 818, 855, 917, 1035, 1084, 1121, 1221], "shrink": [244, 296, 581, 746, 1122, 1123, 1221], "hold": [244, 296], "ddof": [247, 268, 296, 571, 573, 591, 661, 678, 680, 723, 724, 727, 735, 746, 822, 830, 855, 1107, 1109, 1132, 1210, 1221], "deviat": [247, 296, 416, 571, 591, 727, 746, 822, 855, 979, 1132, 1221], "degre": [247, 268, 296, 552, 571, 573, 591, 661, 672, 678, 680, 723, 724, 727, 735, 746, 822, 830, 855, 1107, 1109, 1132, 1210, 1221], "freedom": [247, 268, 296, 571, 573, 591, 661, 678, 680, 723, 724, 727, 735, 746, 822, 830, 855, 1107, 1109, 1132, 1210, 1221], "divisor": [247, 268, 296, 571, 573, 591, 661, 678, 680, 723, 724, 727, 735, 746, 822, 830, 855, 1107, 1109, 1132, 1210, 1221], "816497": [247, 296], "gather_everi": [251, 296, 651, 746, 825, 855, 1194, 1221], "mostli": [252, 296, 424, 746], "categoricaltyp": [252, 296], "fruit": [253, 296, 559, 599, 626, 746, 1141, 1168], "car": [253, 296, 559, 746], "beetl": [253, 296, 559, 746], "audi": [253, 296, 559, 746], "28": [253, 296, 303, 392, 410, 746, 954, 972, 1229], "300": [253, 296, 1101, 1102, 1104, 1221], "drop_first": [255, 296], "dummi": [255, 296, 1198, 1221], "foo_1": [255, 296], "foo_2": [255, 296], "bar_3": [255, 296], "bar_4": [255, 296], "ham_a": [255, 296], "ham_b": [255, 296], "instantiat": [256, 296, 1200, 1221], "from_repr": [256, 296, 1200, 1221], "df_from_str_repr": [256, 296], "eval": [256, 296, 696, 1200, 1221], "indexord": [257, 296], "fortran": [257, 296], "downstream": [257, 296, 578, 746, 1118, 1221], "applic": [257, 296, 510, 565, 566, 567, 568, 569, 571, 572, 573, 746], "prevent": [257, 296, 305, 350, 351, 457, 529, 648, 746, 855, 908, 909, 1191, 1221], "reshap": [257, 296, 474, 746, 1038, 1221], "ll": [257, 296], "u1": [257, 296], "f4": [257, 296], "view": [257, 296, 510, 746, 1202, 1221], "recarrai": [257, 296], "rec": [257, 296], "use_pyarrow_extension_arrai": [258, 296, 1203, 1221], "extens": [258, 296, 1203, 1221], "sent": [258, 296, 1202, 1203, 1221], "pandas_df1": [258, 296], "pandas_df2": [258, 296], "pandas_df2_pa": [258, 296], "na": [258, 296, 626, 1203, 1221], "four": [260, 296], "five": [260, 296, 1229], "bottom_k": [261, 296, 655, 746, 826, 855, 1205, 1221], "header_nam": [262, 296], "column_nam": [262, 296], "perhap": [262, 296], "column_2": [262, 296], "name_gener": [262, 296], "base_nam": [262, 296], "my_column_": [262, 296], "my_column_0": [262, 296], "my_column_1": [262, 296], "my_column_2": [262, 296], "new_id": [262, 296], "uniquekeepstrategi": [263, 296, 827, 855], "kept": [263, 296, 827, 855], "decompos": [264, 296, 828, 855], "t_a": [264, 296, 828, 855], "t_b": [264, 296, 828, 855], "t_c": [264, 296, 828, 855], "t_d": [264, 296, 828, 855], "womp": [264, 296, 828, 855], "t_": [264, 296, 828, 855], "t_struct": [264, 296, 828, 855], "step": [265, 296, 670, 705, 706], "unstackdirect": [265, 296], "pivot": [265, 296], "phase": [265, 296], "subject": [265, 296], "ascii_uppercas": [265, 296], "h": [265, 296, 303, 396, 399, 581, 633, 635, 639, 746, 1175, 1177, 1181], "x_0": [265, 296, 415, 416, 417, 746, 978, 979, 980, 1221], "x_1": [265, 296], "y_0": [265, 296, 415, 416, 417, 746, 978, 979, 980, 1221], "y_1": [265, 296], "z_0": [265, 296], "z_1": [265, 296], "include_nul": [266, 296, 829, 855], "syntact": [266, 296, 557, 664, 666, 679, 683, 697, 698, 702, 703, 704, 707, 712, 714, 715, 716, 718, 719, 720, 725, 727, 729, 731, 735, 737, 746, 829, 855, 1094, 1131, 1221], "sugar": [266, 296, 557, 664, 666, 679, 683, 697, 698, 702, 703, 704, 707, 712, 714, 715, 716, 718, 719, 720, 725, 727, 729, 731, 735, 737, 746, 829, 855, 1094, 1131, 1221], "400": [266, 296, 829, 855, 1101, 1102, 1104, 1221], "600": [266, 296, 829, 855, 858], "700": [266, 296, 829, 855], "new_df": [266, 296, 829, 855], "time_column": [267, 296], "frequenc": [267, 296], "date_rang": [267, 296, 370, 373, 390, 398, 409, 928, 946, 952, 953, 970, 971], "forward_fil": [267, 296, 348, 351, 746], "varianc": [268, 296, 417, 458, 573, 661, 735, 746, 830, 855, 980, 1023, 1109, 1210, 1221], "grow": [269, 296], "not_": [271, 296, 452, 746, 832, 855, 1221], "not_c": [271, 296, 832, 855], "diff": [271, 296, 400, 401, 402, 403, 404, 405, 406, 488, 746, 832, 855, 962, 963, 964, 965, 966, 967, 968, 1052, 1221], "_diff": [271, 296, 832, 855], "row_nr": [273, 296, 565, 566, 568, 571, 572, 573, 746, 835, 855, 1113, 1221], "named_agg": [275, 836], "_sum": [275, 836], "_mean_squar": [275, 836], "b_sum": [275, 836], "c_mean_squar": [275, 836], "sub": [277, 282, 323, 324, 325, 746, 877, 878, 879], "map_group": [277, 668, 838], "toward": [278, 461, 481, 679, 746, 839, 1024, 1045, 1221], "nr": [280, 290, 841, 851], "triangl": [282, 843], "group_df": [282, 843], "maxim": [283, 318, 746, 844, 872, 1221], "833333": [284, 845], "minim": [286, 319, 466, 581, 589, 746, 847, 873, 1030, 1074, 1122, 1221], "overview": [296, 746, 758, 855, 1221, 1229], "frameinittyp": [296, 855], "entri": [296, 855, 1228], "mydatafram": 296, "df4": 296, "df5": 296, "df6": 296, "approx_n_uniqu": [296, 746, 855], "corr": 296, "drop_in_plac": 296, "drop_nul": [296, 362, 746, 855, 919, 1221], "estimated_s": [296, 1221], "explod": [296, 426, 542, 558, 746, 855, 1095, 1221], "find_idx_by_nam": 296, "fold": [296, 519, 675, 681, 682, 685, 686, 721], "frame_equ": 296, "group_by_rol": [296, 855], "groupby_dynam": [296, 855], "groupby_rol": [296, 855], "hash_row": 296, "hstack": 296, "insert_at_idx": 296, "is_dupl": [296, 746, 1221], "is_empti": [296, 1221], "is_uniqu": [296, 746, 1221], "iter_column": 296, "iter_slic": 296, "melt": [296, 855], "merge_sort": [296, 855], "n_uniqu": [296, 746, 1221], "pipe": [296, 746, 855], "quantil": [296, 550, 569, 746, 855, 1088, 1105, 1221], "replace_at_idx": 296, "select_seq": [296, 855], "shift_and_fil": [296, 746, 855, 1221], "shrink_to_fit": [296, 1221], "take_everi": [296, 746, 855, 1221], "to_dummi": [296, 1221], "to_numpi": [296, 508, 746, 1221], "to_panda": [296, 1221], "to_struct": [296, 602], "unnest": [296, 358, 550, 560, 602, 603, 624, 625, 645, 746, 855, 915, 1063, 1088, 1097, 1166, 1167, 1221], "unstack": 296, "with_columns_seq": [296, 855], "write_avro": 296, "write_databas": 296, "write_delta": 296, "write_excel": 296, "write_ipc_stream": 296, "write_json": 296, "write_parquet": 296, "cum_prod": [303, 355, 746, 912, 1221], "ghi": [303, 602, 746, 858, 1144], "94": [304, 746], "to_uppercas": [305, 533, 603, 746], "confus": [306, 451, 453, 618, 746], "kleen": [306, 308, 664, 666, 746, 862, 863, 1221], "bitwis": [307, 541, 663, 664, 665, 666, 667, 746], "upcast": [309, 746], "skip_nul": [310, 510, 746, 865, 1070, 1221], "pass_nam": [310, 510, 746], "mapelementsstrategi": [310, 510, 746], "thread_loc": [310, 510, 746], "map_el": [310, 508, 663, 746, 865, 1221], "unknown": [310, 510, 601, 708, 746, 1143], "stage": [310, 746], "code": [310, 329, 331, 332, 333, 510, 578, 746, 777, 795, 855, 1118, 1221], "gil": [310, 510, 746], "invers": [312, 313, 314, 315, 316, 317, 746, 866, 867, 868, 869, 870, 871, 1221], "cosin": [312, 313, 343, 344, 508, 746, 866, 867, 903, 904, 1221], "570796": [312, 314, 746, 866, 868, 1221], "hyperbol": [313, 315, 317, 344, 585, 653, 746, 867, 869, 871, 904, 1127, 1196, 1221], "sine": [314, 315, 508, 584, 585, 746, 868, 869, 1126, 1127, 1221], "881374": [315, 746, 869, 1221], "tangent": [316, 317, 652, 653, 746, 870, 871, 1195, 1196, 1221], "785398": [316, 671, 672, 746, 870, 1221], "arg_wher": [321, 746], "i8": [326, 370, 374, 382, 384, 390, 391, 394, 408, 409, 498, 581, 719, 722, 737, 746, 880, 917, 928, 932, 944, 946, 953, 956, 970, 971, 1062, 1096, 1208, 1221], "seen": [328, 429, 746], "substr": [329, 332, 333, 593, 599, 616, 617, 623, 624, 625, 626, 858, 882, 885, 886, 1135, 1141, 1158, 1159, 1165, 1166, 1167, 1168], "ends_with": [329, 333, 593, 626, 858, 1168], "yellow": [329, 331, 332, 333], "x00": [329, 331, 332, 333], "xff": [329, 331, 332, 333], "contains_with_lit": 329, "contains_with_expr": 329, "transferencod": [330, 331, 597, 598, 883, 884, 1139, 1140], "hex": [330, 331, 597, 598, 637, 883, 884, 1139, 1140, 1179], "base64": [330, 331, 597, 598, 883, 884, 1139, 1140], "code_encoded_hex": 331, "000000": 331, "ffff00": 331, "0000ff": 331, "anywher": [332, 333, 633, 634, 635, 1175, 1176, 1177], "ends_with_lit": 332, "ends_with_expr": 332, "starts_with_lit": 333, "starts_with_expr": 333, "complex": [334, 357, 655, 746, 887, 914, 1205, 1221], "frac": [334, 415, 416, 417, 586, 655, 746, 887, 978, 979, 980, 1128, 1205, 1221], "to_fram": [336, 373, 393, 398, 407, 633, 915, 1088, 1113, 1116, 1166, 1167, 1175, 1221], "259921": [338, 746, 895, 1221], "587401": [338, 746], "numericliter": [340, 341, 342, 746, 899, 900, 901, 1221], "temporalliter": [340, 341, 342, 746, 899, 900, 901, 1221], "outsid": [340, 746, 899, 1221], "clip": [341, 342, 746, 900, 901, 1221], "543081": [344, 746, 904, 1221], "cotang": [345, 746, 905, 1221], "cumul": [347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 681, 682, 683, 684, 685, 686, 687, 688, 746, 906, 907, 908, 909, 910, 911, 912, 913, 1221], "cum_count_revers": [347, 746], "cum_max_revers": [348, 746], "cum_max_all_fil": [348, 746], "cum_min_revers": [349, 746], "cum_prod_revers": [350, 746], "cum_sum_revers": [351, 746], "value_cum_sum": [351, 746], "value_cum_sum_all_fil": [351, 746], "cum_count": [352, 746], "cum_max": [353, 746, 910, 1221], "cum_min": [354, 746, 911, 1221], "cum_sum": [356, 440, 646, 684, 687, 746, 790, 855, 913, 1022, 1221], "min_period": [357, 415, 416, 417, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 723, 724, 746, 914, 978, 979, 980, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1221], "slide": [357, 746, 914, 1221], "slot": [357, 360, 471, 746, 914, 917, 1035, 1221], "realli": [357, 594, 618, 746, 914, 1136, 1160, 1221], "visit": [357, 746, 914, 1221], "left_clos": [358, 550, 746, 915, 1088, 1221], "include_break": [358, 550, 746, 915, 1088, 1221], "bin": [358, 438, 550, 637, 663, 739, 746, 915, 996, 1088, 1179, 1215, 1221], "discret": [358, 360, 412, 438, 471, 488, 550, 746, 915, 917, 975, 996, 1035, 1052, 1088, 1221], "plu": [358, 503, 746, 915, 1067, 1088, 1221], "endpoint": [358, 550, 565, 566, 567, 568, 569, 571, 572, 573, 746, 915, 1088, 1221], "observ": [358, 415, 416, 417, 550, 746, 915, 978, 979, 980, 1088, 1221], "fall": [358, 550, 561, 746, 915, 1000, 1088, 1098, 1221], "qcut": [358, 746, 915, 1221], "breakpoint": [358, 438, 550, 746, 915, 996, 1088, 1221], "brk": [358, 550, 746], "foo_bin": [358, 550, 746], "radian": [359, 671, 746], "720": [359, 552, 746], "540": [359, 552, 746], "360": [359, 552, 746], "180": [359, 552, 746], "null_behavior": [360, 471, 746, 917, 1035, 1221], "nullbehavior": [360, 471, 746, 917, 1035, 1221], "drop_nan": [363, 746, 920, 1221], "utc": [364, 367, 372, 392, 633, 635, 858, 922, 925, 930, 954, 1175, 1177], "usual": [364, 922], "vari": [364, 922, 1229], "rare": [364, 922], "countri": [364, 922], "switch": [364, 922], "samoa": [364, 922], "apia": [364, 922], "did": [364, 922], "2011": [364, 922], "dst_offset": [364, 922], "2012": [364, 922], "replace_time_zon": [364, 372, 926, 927, 959], "pacif": [364, 922], "11h": [364, 922], "13h": [364, 922], "lose": [365, 923], "time_unit_m": [365, 923], "time_unit_n": [365, 923], "naiv": [366, 924, 1177], "compon": [366, 394, 633, 635, 695, 924, 956, 1175, 1177], "resolv": 366, "tm": [366, 858], "456000": [366, 924], "101000": 366, "d1": 366, "d2": 366, "d3": 366, "europ": [367, 372, 392, 925, 930, 954], "london": [367, 372, 392, 925, 930, 954], "gmt": [367, 372, 392, 925, 930, 954], "bst": [367, 372, 392, 925, 930, 954], "weekdai": [370, 390], "ordinal_dai": [370, 409], "day_of_month": [370, 390, 409], "day_of_year": [370, 390, 409], "356": [370, 390, 409], "357": [370, 390, 409], "358": [370, 390, 409], "359": [370, 390, 409], "total_dai": [371, 929], "base_utc_offset": [372, 930], "0m": [372, 930], "epochtimeunit": [373, 701, 931], "unix": [373, 701, 931], "epoch_n": [373, 931], "epoch_": [373, 931], "978307200000000": [373, 398, 931, 960], "978307200": [373, 931], "978393600000000": [373, 398, 931, 960], "978393600": [373, 931], "978480000000000": [373, 398, 931, 960], "978480000": [373, 931], "2010": [374, 382, 858], "total_hour": [375, 933], "leap": [376, 389, 934, 951], "2002": [376, 389, 934, 951, 973], "iso": [377, 408, 409, 935, 970, 971], "1977": [377, 411], "1978": [377, 411], "1979": [377, 411], "calendar_year": [377, 411], "1976": [377, 411], "1_001": [378, 402, 403, 405], "002": [378, 402, 403, 405, 695, 964, 965, 967], "003": [378, 402, 403, 405], "3000": 378, "997": [378, 402, 403, 405], "997000": 378, "998": [378, 402, 403, 405], "998000": 378, "999": [378, 402, 403, 405, 858, 1229], "999000": [378, 858], "total_microsecond": [379, 940], "total_millisecond": [381, 942], "total_minut": [383, 945], "think": [385, 386, 947, 948], "vectoris": [385, 386, 947, 948], "tseri": [385, 386, 947, 948], "monthend": [385, 947], "rollforward": [385, 947], "monthbegin": [386, 948], "rollback": [386, 948], "total_nanosecond": [388, 950], "minu": [389, 951], "dictat": [389, 746, 951], "2005": [389, 951], "date_plus_1i": [389, 951], "1y2mo": [389, 951], "date_min": 389, "1998": [389, 951], "1999": [389, 858, 951], "2003": [389, 701, 951], "2004": [389, 951], "2006": [389, 951], "new_dat": 389, "ordin": [390, 553, 746, 952, 1090, 1221], "366": [390, 952], "use_earliest": [392, 407, 633, 635, 692, 954, 969, 1175, 1177], "ambigu": [392, 393, 407, 633, 635, 692, 954, 955, 969, 1175, 1177], "convert_time_zon": [392, 954], "london_timezon": [392, 954], "amsterdam": [392, 954], "london_to_amsterdam": [392, 954], "cet": [392, 954], "cest": [392, 954], "ts_local": [392, 954], "brussel": [392, 954], "half": [393, 415, 416, 417, 746, 955, 978, 979, 980, 1221], "localis": [393, 407, 955, 969], "dst": [393, 407, 955, 969], "cst": [393, 407, 955, 969], "cdt": [393, 407, 955, 969], "225": [393, 407], "10m": [393, 407, 955, 969], "milli": [394, 956], "micro": [394, 956], "456789": [394, 858, 956], "111110": [394, 956], "765431": [394, 956], "11111": [394, 956], "total_second": [395, 957], "to_str": [396, 958], "datetime_str": [396, 399], "timestamp_n": [398, 960], "timestamp_m": 398, "978307200000": 398, "978393600000": 398, "978480000000": 398, "strftime": [399, 961], "days_diff": 400, "hours_diff": 401, "microseconds_diff": 402, "milliseconds_diff": 403, "minutes_diff": 404, "1440": [404, 966], "nanoseconds_diff": 405, "seconds_diff": 406, "safe": [407, 555, 746, 955, 969, 1092, 1177, 1202, 1221], "truncate_str": 407, "truncate_td": 407, "53": [408, 970], "time_unit_u": 410, "32971": [410, 972], "32974": [410, 972], "32976": [410, 972], "iso_year": 411, "pk": [412, 746, 975, 1221], "probabl": [412, 550, 746, 975, 1088, 1221], "459148": [412, 746], "754888": [412, 746], "eq": [414, 746, 1221], "span": [415, 416, 417, 746, 978, 979, 980, 1221], "half_lif": [415, 416, 417, 746, 978, 979, 980, 1221], "adjust": [415, 416, 417, 586, 746, 978, 979, 980, 1128, 1221], "exponenti": [415, 416, 417, 419, 547, 746, 978, 979, 980, 981, 1221], "weight": [415, 416, 417, 563, 564, 565, 566, 567, 568, 569, 571, 572, 573, 586, 746, 978, 979, 980, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1128, 1221], "decai": [415, 416, 417, 746, 978, 979, 980, 1221], "term": [415, 416, 417, 746, 978, 979, 980, 1221], "mass": [415, 416, 417, 746, 978, 979, 980, 1221], "gamma": [415, 416, 417, 746, 978, 979, 980, 1221], "foral": [415, 416, 417, 746, 978, 979, 980, 1221], "geq": [415, 416, 417, 746, 978, 979, 980, 1221], "theta": [415, 416, 417, 746, 978, 979, 980, 1221], "life": [415, 416, 417, 746, 978, 979, 980, 1221], "exp": [415, 416, 417, 746, 978, 979, 980, 1221], "ln": [415, 416, 417, 746, 978, 979, 980, 1221], "smooth": [415, 416, 417, 746, 978, 979, 980, 1221], "factor": [415, 416, 417, 654, 746, 978, 979, 980, 1204, 1221], "leq": [415, 416, 417, 746, 978, 979, 980, 1221], "imbal": [415, 416, 417, 746, 978, 979, 980, 1221], "ew": [415, 416, 417, 746, 978, 979, 980, 1221], "w_i": [415, 416, 417, 746, 978, 979, 980, 1221], "recurs": [415, 416, 417, 746, 978, 979, 980, 1221], "y_t": [415, 416, 417, 746, 978, 979, 980, 1221], "y_": [415, 416, 417, 746, 978, 979, 980, 1221], "x_t": [415, 416, 417, 746, 978, 979, 980, 1221], "x_2": [415, 416, 417, 746, 978, 979, 980, 1221], "428571": [415, 746, 978, 1221], "bia": [416, 417, 458, 570, 586, 746, 979, 980, 1023, 1106, 1128, 1221], "unbias": [416, 417, 746, 979, 980, 1221], "963624": [416, 746, 979, 1221], "928571": [417, 746, 980, 1221], "wildcard": [418, 681, 682, 685, 686, 699, 721, 746], "regex": [418, 516, 593, 595, 596, 599, 601, 602, 603, 616, 617, 626, 697, 746, 858, 1135, 1137, 1138, 1141, 1143, 1144, 1145, 1158, 1159, 1168], "aa": [418, 593, 697, 746, 1135], "ba": [418, 626, 697, 746, 858], "cc": [418, 697, 746], "718282": [419, 746], "389056": [419, 746], "59815": [419, 746], "expand": [420, 515, 516, 556, 746, 858, 982, 1221], "pythonliter": [421, 746, 984, 1071, 1074, 1221], "extrem": [421, 564, 746, 984, 1100, 1221], "group_col": [424, 662, 746], "g1": [424, 662, 746], "g2": [424, 662, 746], "lt": [424, 662, 746, 1221], "gte": [424, 662, 746], "exprlistnamespac": [426, 746], "divis": [428, 656, 746], "truediv": [428, 746], "9774092659964970114": [436, 746], "13614470193936745724": [436, 746], "1101441246220388612": [436, 746], "11638928888656214026": [436, 746], "13382926553367784577": [436, 746], "bin_count": [438, 746, 996, 1221], "include_categori": [438, 746, 996, 1221], "include_breakpoint": [438, 746, 996, 1221], "occurr": [438, 445, 446, 449, 450, 660, 746, 996, 1005, 1006, 1011, 1012, 1209, 1221], "interpolationmethod": [441, 746, 999, 1221], "regrid": [441, 746], "grid": [441, 746], "df_original_grid": [441, 746], "grid_point": [441, 746], "df_new_grid": [441, 746], "conflat": [442, 746], "finit": [444, 656, 678, 746, 1004, 1221], "is_first_distinct": [445, 746, 1005, 1221], "optional_memb": [447, 746, 1008, 1221], "infinit": [448, 656, 746, 1009, 1221], "is_last_distinct": [449, 746, 1011, 1221], "_isnan": [451, 746], "b_isnan": [451, 746], "negat": [452, 539, 746, 1082, 1221], "_is_not_nan": [453, 746], "b_is_not_nan": [453, 746], "_not_nul": [454, 746], "a_not_nul": [454, 746], "b_not_nul": [454, 746], "_isnul": [455, 746], "a_isnul": [455, 746], "b_isnul": [455, 746], "chain": [457, 529, 531, 532, 533, 534, 548, 647, 736, 746], "undo": [457, 522, 529, 531, 532, 548, 647, 746], "fisher": [458, 586, 746, 1023, 1128, 1221], "fourth": [458, 746, 1023, 1221], "subtract": [458, 646, 746, 1023, 1221], "distribut": [458, 586, 746, 1023, 1128, 1221], "elimin": [458, 746, 1023, 1221], "bias": [458, 586, 746, 1023, 1128, 1221], "scipi": [458, 586, 746, 1023, 1128, 1221], "stat": [458, 586, 746, 1023, 1128, 1221], "153061": [458, 746], "sublist": [465, 466, 468, 471, 475, 476, 477, 478, 479, 480, 488, 493, 496, 497, 499, 1008, 1029, 1030, 1032, 1035, 1039, 1040, 1041, 1042, 1043, 1044, 1052, 1057, 1060, 1061, 1063, 1221], "membership": [468, 1032], "number_of_two": 470, "blindli": [473, 1037], "worth": [473, 1037], "enough": [473, 586, 746, 1037, 1128, 1221], "rank": [473, 678, 696, 746, 1037, 1221], "concat_list": [473, 696, 1037], "exprnamespac": 474, "flat": [474, 558, 746, 1038, 1095, 1221], "null_on_oob": [476, 497, 1040, 1061], "cheaper": [476, 497, 1040, 1061], "x_y": 479, "symmetr": [490, 1054], "sdiff": 490, "taken": [493, 622, 1057, 1164], "n_field_strategi": [499, 1063], "tostructstrategi": [499, 1063], "first_non_nul": [499, 1063], "max_width": [499, 1063], "field_0": [499, 1063], "field_1": [499, 1063], "field_n": [499, 1063], "pre": [499, 510, 550, 719, 722, 737, 746, 1088, 1221], "obtain": 499, "ok": 499, "longest": 499, "n0": 499, "n1": 499, "logarithm": [501, 502, 503, 746, 1065, 1066, 1067, 1221], "584963": [501, 746], "30103": [502, 746], "60206": [502, 746], "natur": [503, 746, 1067, 1221], "693147": [503, 746], "098612": [503, 746], "386294": [503, 746], "lowest": [504, 746], "9223372036854775808": [504, 746], "agg_list": [506, 508, 746], "map_batch": [506, 709, 746, 797, 855], "keep_nam": [507, 746], "a_revers": [507, 530, 532, 559, 647, 746], "b_revers": [507, 530, 532, 559, 647, 746], "rstrip": [507, 530, 746], "_revers": [507, 530, 532, 559, 647, 746], "is_elementwis": [508, 746], "whole": [508, 588, 589, 601, 746, 843, 855, 1143], "elementwis": [508, 563, 564, 565, 566, 568, 572, 746, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1221], "third": [508, 746], "parti": [508, 746], "book": [508, 746], "bug": [508, 510, 746, 797, 798, 838, 843, 855, 1070, 1221], "argmax": [508, 746], "remap": [509, 746, 1069, 1221], "lookup": [509, 742, 746, 1069, 1221], "discourag": [510, 746], "loop": [510, 746], "a_times_2": [510, 746], "tip": [510, 746], "again": [510, 746], "behav": [510, 629, 630, 746], "exprmetanamespac": [514, 517], "foo_bar2": [514, 517], "raise_if_undetermin": 518, "computeerror": [518, 615, 637, 758, 1157, 1179], "e_filt": [518, 520], "e_sum_ov": [518, 520], "e_sum_slic": [518, 520], "tree": 521, "modulu": [525, 746], "xlog2": [527, 547, 746], "reverse_": [531, 548, 746], "reverse_a": [531, 548, 746], "reverse_b": [531, 548, 746], "lowercas": [533, 638, 1180], "uppercas": [534, 641, 1183], "to_lowercas": 534, "poison": [535, 536, 746, 1079, 1080, 1221], "nanmax": [535, 536, 746, 1079, 1080, 1221], "inequ": [537, 746], "ne": [538, 746, 1221], "more_expr": [542, 673, 675, 676, 677, 746], "mapping_strategi": [542, 746], "windowmappingstrategi": [542, 746], "group_to_row": [542, 746], "outcom": [542, 746], "group_dtyp": [542, 746], "warn": [542, 565, 566, 567, 568, 569, 571, 572, 573, 746], "flatten": [542, 746], "_max": [542, 746], "c_max": [542, 746], "_min": [542, 746], "c_min": [542, 746], "percent": [543, 746, 1084, 1221], "090909": [543, 746], "peak": [544, 545, 746, 1085, 1086, 1221], "extract_numb": [546, 746], "digit": [546, 574, 575, 602, 746, 1110, 1111, 1138, 1144, 1221, 1229], "scale_negative_even": [546, 746], "expon": [547, 746, 1221], "allow_dupl": [550, 746, 1088, 1221], "duplicateerror": [550, 746, 758, 1088, 1221], "happen": [550, 746, 1088, 1221], "cut": [550, 746, 1088, 1221], "566371": [552, 746], "424778": [552, 746], "283185": [552, 746], "141593": [552, 746, 866, 1221], "rankmethod": [553, 746, 1090, 1221], "ti": [553, 746, 1090, 1221], "competit": [553, 746, 1090, 1221], "highest": [553, 659, 678, 746, 855, 1090, 1221], "immedi": [553, 670, 674, 690, 691, 693, 694, 705, 706, 719, 722, 728, 733, 734, 737, 746, 1090, 1221], "nodefault": [557, 746, 1094, 1221], "_nodefault": [557, 746, 1094, 1221], "no_default": [557, 746, 1094, 1221], "200": [557, 746, 1094, 1101, 1102, 1104, 1221], "fruits_revers": [559, 746], "cars_revers": [559, 746], "rle": [561, 746, 1098, 1221], "themselv": [561, 746, 1098, 1221], "a_r": [561, 746], "ab_r": [561, 746], "window_s": [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 723, 724, 746, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1221], "rolling_map": [563, 746, 1099, 1221], "multipli": [563, 564, 565, 566, 568, 571, 572, 573, 746, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1107, 1108, 1109, 1221], "rolling_sum": [564, 746, 1100, 1221], "nansum": [564, 746, 1100, 1221], "warn_if_unsort": [565, 566, 567, 568, 569, 571, 572, 573, 746], "travers": [565, 566, 568, 572, 746, 1101, 1102, 1104, 1107, 1108, 1109, 1221], "vector": [565, 566, 568, 572, 746, 1101, 1102, 1104, 1107, 1108, 1109, 1221], "5h": [565, 566, 567, 568, 569, 571, 572, 573, 746], "df_tempor": [565, 566, 568, 571, 572, 573, 746], "closur": [565, 566, 571, 572, 573, 746], "rolling_row_max": [565, 746], "2h": [565, 566, 568, 571, 572, 573, 746], "rolling_row_mean": [566, 746], "rolling_row_min": [568, 746], "625": [569, 746], "skew": [570, 746, 1106, 1221], "381802": [570, 746, 1106, 1221], "47033": [570, 746, 1106, 1221], "38180177416060584": [570, 746, 1106, 1221], "47033046033698594": [570, 746, 1106, 1221], "433013": [571, 746, 822, 855], "rolling_row_std": [571, 746], "rolling_row_sum": [572, 746], "39": [572, 701, 746], "63": [572, 746], "69": [572, 746], "1875": [573, 746, 830, 855], "rolling_row_var": [573, 746], "figur": [575, 746, 819, 855, 1111, 1221], "01234": [575, 746, 1111, 1221], "012": [575, 746, 1111, 1221], "1200": [575, 746, 1111, 1221], "searchsortedsid": [577, 746, 1114, 1221], "leftmost": [577, 746, 1114, 1221], "rightmost": [577, 746, 1114, 1221], "six": [577, 746], "extrema": [581, 746, 1122, 1221], "112": [581, 746, 1229], "129": [581, 746], "8589934592": [581, 746], "1073741824": [581, 746], "175201": [585, 746, 1127, 1221], "unimod": [586, 746, 1128, 1221], "skewtest": [586, 746, 1128, 1221], "speak": [586, 746, 1128, 1221], "g_1": [586, 746, 1128, 1221], "m_3": [586, 746, 1128, 1221], "m_2": [586, 746, 1128, 1221], "m_i": [586, 746, 1128, 1221], "sum_": [586, 746, 1128, 1221], "texttt": [586, 746, 1128, 1221], "k_3": [586, 746, 1128, 1221], "k_2": [586, 746, 1128, 1221], "sqrt": [586, 671, 672, 746, 1128, 1221], "343622": [586, 746], "value1": [589, 746], "value2": [589, 746], "attain": [589, 746], "414214": [590, 746, 1131, 1221], "sensit": [593, 602, 616, 1135, 1144, 1158], "ilmsuxu": [593, 601, 602, 616, 1135, 1143, 1144, 1158], "default_match": 593, "insensitive_match": 593, "crab": [593, 1135], "dog": [593, 638, 641, 677, 1135, 1180, 1183], "rab": [593, 619, 1135, 1161], "ascii_case_insensit": [594, 618, 1136, 1160], "aho": [594, 618, 1136, 1160], "corasick": [594, 618, 1136, 1160], "insensit": [594, 602, 616, 618, 858, 1135, 1136, 1144, 1158, 1160], "set_fmt_str_length": [594, 618, 1136, 1160], "lyric": [594, 618, 1136, 1160], "everybodi": [594, 618, 1136, 1160], "tell": [594, 618, 1136, 1160], "me": [594, 618, 1136, 1160], "feel": [594, 618, 1136, 1160], "love": [594, 618, 1136, 1160], "tonight": [594, 618, 1136, 1160], "success": [595, 596, 602, 1137, 1138, 1144], "overlap": [595, 596, 602, 1137, 1138, 1144], "bla": [596, 602, 1138, 1144], "asd": [596, 602, 1138, 1144], "678": [596, 602, 1138, 1144], "910t": [596, 602, 1138, 1144], "count_digit": 596, "dbc": [596, 1138], "3xy": [596, 1138], "1zy3": [596, 1138], "strings_hex": 598, "666f6f": [598, 1140], "626172": [598, 1140], "mango": [599, 626, 1141, 1168], "has_suffix": 599, "le": [599, 746, 1221], "nu": 599, "group_index": [601, 1143], "captur": [601, 603, 1143, 1145], "nthose": [601, 1143], "nodd": [601, 1143], "nthe": [601, 1143], "odd": 601, "vote": [601, 603, 1143, 1145], "ballon_dor": [601, 603, 1143, 1145], "404": [601, 603, 1143, 1145], "ref": [601, 603, 1143, 1145], "candid": [601, 603, 1143, 1145], "messi": [601, 603, 1143, 1145], "ronaldo": [601, 1143], "haystack": [602, 1144], "email": [602, 1144], "real": [602, 1144], "some_account": [602, 1144], "somewher": [602, 1144], "net": [602, 1144], "jkl": [602, 1144], "uvw": [602, 1144], "co": [602, 746, 1144, 1221], "uk": [602, 1144], "address": 602, "xi": [602, 1144], "quantifi": [602, 1144], "email_part": [602, 1144], "extracted_nr": 602, "910": [602, 1144], "unnam": [603, 1145], "weghorst": [603, 1145], "candi": 603, "json_path_match": [604, 1146], "jsonpath": [604, 606, 1146, 1148], "json_decod": [605, 1147], "json_path": [606, 1148], "json_val": [606, 1148], "len_char": [607, 612, 1149, 1154], "_o": [607, 608, 1149, 1150], "caf\u00e9": [607, 608, 1149, 1150], "345": [607, 608, 1149, 1150], "\u6771\u4eac": [607, 608, 1149, 1150], "n_byte": [607, 608], "n_char": [607, 608], "fill_char": [610, 613, 614, 620, 1152, 1155, 1156, 1162], "justifi": [610, 620, 1152, 1162], "pad_end": [610, 614, 1152, 1156], "strip_chars_start": [611, 629, 631, 1153], "pad": [613, 614, 642, 1155, 1156, 1184], "reach": [613, 614, 642, 1155, 1156, 1184], "pad_start": [613, 620, 642, 1155, 1162, 1184], "cow": [613, 614, 1155, 1156], "monkei": [613, 614, 1155, 1156], "hippopotamu": [613, 614, 1155, 1156], "zfill": [614, 663, 746, 1156], "radix": [615, 637, 1157, 1179], "parseerror": [615, 637, 1157, 1179], "becom": 615, "to_integ": [615, 1157], "silent": [615, 637, 1157, 1179], "replace_al": [616, 1158], "citi": 616, "philadelphia": 616, "season": 616, "spring": 616, "summer": 616, "autumn": 616, "winter": 616, "weather": [616, 1158], "raini": [616, 1158], "sunni": [616, 1158], "cloudi": 616, "snowi": 616, "foggi": [616, 1158], "123abc": [616, 1158], "abc456": [616, 1158], "abcabc": [617, 1159], "123a123": [617, 1159], "bc": [617, 729, 1159], "replace_with": [618, 1160], "broadcast": [618, 858, 1160], "removes_pronoun": 618, "man": [619, 1161], "ana": [619, 1161], "oof": [619, 1161], "anan": [619, 1161], "am": [619, 1161], "strip_chars_end": [621, 630, 632, 1163], "subslic": [622, 1164], "pear": [622, 1164], "papaya": [622, 1164], "dragonfruit": [622, 1164], "s_slice": 622, "ear": [622, 1164], "aya": [622, 1164], "uit": [622, 1164], "ya": [622, 1164], "onf": [622, 1164], "foo_bar_baz": 623, "split_inclus": 623, "foo_": [623, 700], "bar_": 623, "a_1": [624, 1166, 1198, 1221], "d_4": [624, 1166], "rename_field": [624, 625, 915, 1088, 1166, 1167, 1221], "first_part": [624, 625, 1166, 1167], "second_part": [624, 625, 1166, 1167], "remaind": [625, 1167], "app": [626, 1168], "has_prefix": 626, "strip_char": [627, 1169], "nworld": 628, "foo_strip": 628, "ow": 628, "hell": [628, 1170], "rld": [628, 630, 1172], "word": [629, 630], "strip_suffix": [629, 631], "foo_strip_end": 629, "oldw": 629, "he": 629, "abcdeff": 629, "fed": 629, "strip_prefix": [630, 632], "tworld": [630, 1170, 1172], "foo_strip_start": 630, "wod": [630, 1172], "aabcdef": 630, "cba": 630, "foobar": [631, 632, 1173, 1174], "foofoobar": [631, 1173], "foobarbar": [632, 1174], "polarstemporaltyp": [633, 1175], "penalti": [633, 634, 635, 1175, 1176, 1177], "clean": [633, 634, 635, 1175, 1176, 1177], "beforehand": [633, 634, 635, 1175, 1176, 1177], "certainli": [633, 634, 635, 1175, 1176, 1177], "3f": [633, 635, 1175, 1177], "00z": [633, 635, 1175, 1177], "sun": [633, 1175], "jul": [633, 1175], "34": [633, 1175], "inference_length": [636, 1178], "3420": [636, 1178], "120134": [636, 1178], "3212": [636, 1178], "90": [636, 1178], "143": [636, 1178, 1229], "numbers_decim": 636, "110": [637, 1179], "fa1e": [637, 1179], "ff00": [637, 1179], "cafe": [637, 1179], "64030": [637, 1179], "65280": [637, 1179], "51966": [637, 1179], "variant": [638, 640, 641, 1010, 1221], "foo_low": 638, "titlecas": [640, 1182], "sing": [640, 1182], "welcom": [640, 1182], "THERE": [640, 1182], "NO": [640, 858, 1182], "foo_titl": 640, "There": [640, 1182], "foo_upp": 641, "999999": [642, 692, 732, 733, 734, 858, 1184], "0123": [642, 1184], "cd": [643, 645], "struct_col": [643, 645], "www": 645, "xxx": 645, "yyi": 645, "zzz": 645, "obvious": 645, "structfieldnotfounderror": [645, 758], "761594": [653, 746, 1196, 1221], "replic": [654, 746, 1204, 1221], "vals_phys": [654, 746], "floordiv": [656, 746], "ieee": [656, 746], "754": [656, 746], "mathemat": [656, 696, 746], "undefin": [656, 746], "On": [656, 746], "operand": [656, 746], "infin": [656, 746], "value_count": [658, 746, 1221], "9223372036854775807": [659, 746], "binary_str": [663, 746], "250": [663, 746, 1102, 1221, 1229], "bin_x": [663, 746], "bin_i": [663, 746], "xor_xi": [663, 746], "bin_xor_xi": [663, 746], "00001010": [663, 746], "00001011": [663, 746], "00001000": [663, 746], "00000010": [663, 746], "11111010": [663, 746], "00000011": [663, 746], "249": [663, 746], "11111001": [663, 746], "01000010": [663, 746], "00000100": [663, 746], "70": [663, 746], "01000110": [663, 746], "AND": [664, 665, 858, 1202, 1221], "OR": [666, 667, 780, 855, 858], "any_horizont": 666, "returns_scalar": [668, 711, 746], "polarsintegertyp": [670, 705, 706], "arctan": [671, 672, 746, 1221], "angl": [671, 672], "plane": [671, 672], "rai": [671, 672], "tworoottwo": [671, 672], "arctan2d": 671, "atan2d": [671, 672], "atan2": [671, 672], "135": [671, 672], "356194": [671, 672], "arctan2": 672, "arg_tru": [674, 746, 1221], "mimic": 676, "a_lag_": 676, "a_rol": 676, "swim": 677, "walk": 677, "full_sent": 677, "correlationmethod": 678, "propagate_nan": 678, "spearman": 678, "544705": 678, "covari": [680, 724, 746], "acc": [681, 682, 685, 686, 699, 721], "include_init": [681, 685], "accumul": [681, 682, 685, 686, 699, 721], "fn": [681, 682, 685, 686, 699, 721], "new_valu": [681, 682, 685, 686, 699, 721], "cum_reduc": 681, "cumsum_horizont": 683, "cum_sum_horizont": 688, "granular": 690, "finer": 690, "permut": 690, "1985": [690, 693], "america": 693, "new_york": 693, "est": 693, "contrast": 695, "offset_bi": 695, "sometim": [695, 745], "tbl_width_char": 695, "120": 695, "add_week": 695, "add_dai": 695, "add_second": 695, "add_milli": 695, "add_hour": 695, "add_calendar_dai": 695, "add_calendar_month": 695, "mo": 695, "add_calendar_year": 695, "2024": [695, 858], "a_b_doubl": 696, "f_string": 700, "placehold": 700, "hello_": 700, "_world": 700, "_bar_": 700, "foo_a_bar_1": 700, "foo_b_bar_2": 700, "foo_c_bar_3": 700, "epoch": 701, "timestep": 701, "1666683077": 701, "1666683099": 701, "12345": [701, 896, 989, 1110, 1221], "12346": 701, "agg_group": [702, 746], "allow_object": 708, "valueexcept": 708, "test_func": 710, "list_of_seri": 711, "my_custom_aggreg": 711, "understood": 711, "power": [726, 1221], "a_a": 726, "a_txt": 726, "605551": 727, "605551275463989": 727, "my_struct": 728, "thens": 736, "elif": 736, "pick": 736, "met": 736, "implicitli": 736, "own": [736, 1229], "isn": 736, "arr": [738, 1202, 1213, 1221], "technic": 742, "further": [742, 1203, 1221], "columnfactori": 742, "more_nam": 742, "__call__": 742, "helper": 742, "__getattr__": 742, "idiomat": [742, 843], "quick": [742, 916, 1221, 1229], "prototyp": 742, "keystrok": 742, "drawback": 742, "readabl": 742, "modul": [745, 858, 1229], "and_": 746, "arcco": [746, 1221], "arccosh": [746, 1221], "arcsin": [746, 1221], "arcsinh": [746, 1221], "arctanh": [746, 1221], "arg_max": [746, 1221], "arg_min": [746, 1221], "arg_sort": [746, 1221], "arg_uniqu": [746, 1221], "backward_fil": 746, "cbrt": [746, 1221], "clip_max": [746, 1221], "clip_min": [746, 1221], "cosh": [746, 1221], "cot": [746, 1221], "cumcount": 746, "cummax": [746, 1221], "cummin": [746, 1221], "cumprod": [746, 1221], "cumsum": [746, 1221], "cumulative_ev": [746, 1221], "entropi": [746, 1221], "eq_miss": [746, 1221], "ewm_mean": [746, 1221], "ewm_std": [746, 1221], "ewm_var": [746, 1221], "extend_const": [746, 1221], "from_json": 746, "ge": [746, 1221], "gt": [746, 1221], "hist": [746, 1221], "implod": [746, 1221], "inspect": [746, 855], "is_between": [746, 1221], "is_finit": [746, 1221], "is_first": [746, 1221], "is_infinit": [746, 1221], "is_last": [746, 1221], "is_nan": [746, 1221], "is_not": 746, "is_not_nan": [746, 1221], "is_not_nul": [746, 1221], "kurtosi": [746, 1221], "log10": [746, 1221], "log1p": [746, 1221], "map_alia": 746, "map_dict": [746, 1221], "mod": 746, "mul": 746, "nan_max": [746, 1221], "nan_min": [746, 1221], "ne_miss": [746, 1221], "or_": 746, "pct_chang": [746, 1221], "peak_max": [746, 1221], "peak_min": [746, 1221], "pow": [746, 1221], "register_plugin": 746, "lib": [746, 1197, 1221], "input_wildcard_expans": 746, "cast_to_supertyp": 746, "pass_name_to_appli": 746, "changes_length": 746, "plugin": 746, "highli": 746, "unsaf": 746, "unstabl": 746, "serializ": 746, "ran": 746, "reinterpret": [746, 1221], "repeat_bi": 746, "rle_id": [746, 1221], "rolling_appli": [746, 1221], "rolling_max": [746, 1221], "rolling_mean": [746, 1221], "rolling_median": [746, 1221], "rolling_min": [746, 1221], "rolling_quantil": [746, 1221], "rolling_skew": [746, 1221], "rolling_std": [746, 1221], "rolling_var": [746, 1221], "round_sig_fig": [746, 1221], "search_sort": [746, 1221], "shrink_dtyp": [746, 1221], "sin": [746, 1221], "sinh": [746, 1221], "sort_bi": 746, "tan": [746, 1221], "to_phys": [746, 893, 1221], "unique_count": [746, 1221], "xor": 746, "expos": 758, "miscellan": 758, "arrowerror": 758, "columnnotfounderror": 758, "invalidoperationerror": 758, "polarspanicerror": 758, "schemaerror": 758, "schemafieldnotfounderror": 758, "shapeerror": 758, "parametr": 758, "build_info": 758, "get_index_typ": 758, "show_vers": 758, "threadpool_s": 758, "sqlcontext": [758, 1228], "hit": [763, 855], "node": [763, 767, 790, 797, 798, 802, 807, 809, 855], "background": [767, 855], "_eager": [767, 855], "inprocessqueri": [767, 855], "explain": [767, 855], "cancel": [767, 855], "purpos": [767, 777, 855], "set_streaming_chunk_s": [767, 855], "collect_all_async": [768, 855], "async": [768, 855], "stringio": [771, 815, 855], "snippet": [773, 855], "Be": [777, 855], "fewer": [777, 855], "suscept": [777, 855], "lazygroupbi": [783, 784, 785, 786, 787, 788, 811, 855], "other_lf": [792, 855], "validate_output_schema": [797, 798, 855], "streamabl": [797, 798, 802, 855], "past": [797, 798, 855], "paramount": [797, 798, 855], "elig": [797, 798, 855], "invari": [798, 855], "upheld": [798, 855], "100_000": [798, 855], "200000": [798, 855], "199998": [798, 855], "199996": [798, 855], "199994": [798, 855], "199992": [798, 855], "show_plot": [807, 855], "truncate_nod": [807, 855], "figsiz": [807, 819, 855], "gantt": [807, 855], "plot": [807, 819, 855], "group_by_partit": [807, 855], "470": [807, 855], "475": [807, 855], "1964": [807, 855], "swap": [809, 855], "dynamic_group_bi": [811, 855], "deseri": [815, 855], "dataframescan": [815, 855], "output_schema": [815, 855], "run_parallel": [815, 855], "duplicate_check": [815, 855], "later": [815, 855], "output_path": [819, 855], "raw_output": [819, 855], "290994": [822, 855], "118034": [822, 855], "implicit": [829, 855], "new_lf": [829, 855], "extern": [834, 855], "lf_other": [834, 855], "afoo": [834, 855], "cfoo": [834, 855], "train_lf": [834, 855], "feature_0": [834, 855], "feature_1": [834, 855], "test_lf": [834, 855], "_train": [834, 855], "feature_0_train": [834, 855], "opaqu": 843, "my_column": 843, "struct_seri": 843, "lf5": 855, "lf6": 855, "sink_csv": 855, "sink_ipc": 855, "sink_ndjson": 855, "sink_json": 855, "sink_parquet": 855, "with_context": 855, "intuit": 858, "emploi": 858, "complement": 858, "plenti": 858, "cde": 858, "fgg": 858, "jjk": 858, "lmn": 858, "opp": 858, "qqr": 858, "by_dtyp": 858, "as_expr": 858, "dispatch": 858, "1_234_500": 858, "5_000_555": 858, "1234500": 858, "5000555": 858, "by_nam": 858, "4_500_000": 858, "4500000": 858, "3265500": 858, "zap": 858, "2031": 858, "tstamp_tokyo": 858, "123465": 858, "tstamp_utc": 858, "2025": 858, "666000": 858, "tstamp": 858, "600000": 858, "123000": 858, "666": 858, "td1": 858, "987000": 858, "td2": 858, "td3": 858, "2m": [858, 944], "456m": 858, "7d": 858, "456789\u00b5": 858, "18d": 858, "999999\u00b5": 858, "23h": 858, "987m": 858, "14d": 858, "16h": 858, "39m": 858, "21d": 858, "456001\u00b5": 858, "expand_selector": 858, "colz": [858, 1229], "everyth": 858, "signed_integ": 858, "unsigned_integ": 858, "is_selector": 858, "obj": 858, "_selector_proxy_": 858, "include_categor": 858, "2345": 858, "3456": 858, "292432": [867, 1221], "549306": [871, 1221], "catnamespac": 889, "set_ord": 894, "56789": [896, 989, 1110, 1221], "901234": [896, 989, 1110, 1221], "1232e": [903, 905, 1221], "1656e15": [905, 1221], "break_point_label": [915, 1088, 1221], "break_point": [915, 996, 1088, 1221], "category_label": [915, 1088, 1221], "581139": [916, 1221], "arraylik": [918, 1221], "datetimenamespac": 921, "ser": [926, 927, 959], "kathmandu": [926, 927, 959], "0545": [926, 927, 959], "500m": [939, 941, 949], "500000": 939, "500000000": 949, "date_minus_1y_2mon": 951, "165": [955, 969], "round_str": 955, "round_td": 955, "timestamp_u": 960, "978307200000000000": 960, "978393600000000000": 960, "978480000000000000": 960, "005": [975, 1221], "06293300616044681": [975, 1221], "65": [975, 1221], "8568409950394724": [975, 1221], "4000000": [977, 1221], "814697265625": [977, 1221], "bitmask": [993, 1221], "absenc": [993, 1221], "presenc": [993, 1202, 1221], "confirm": [993, 1221], "10734580197236529959": [994, 1221], "3022416320763508302": [994, 1221], "13756996518000038261": [994, 1221], "is_signed_integ": [1010, 1221], "is_unsigned_integ": [1010, 1221], "listnamespac": 1026, "field_2": 1063, "n00": 1063, "n01": 1063, "n02": 1063, "2147483648": [1068, 1221], "166667": [1084, 1221], "142857": [1084, 1221], "150": [1102, 1221], "350": [1102, 1221], "450": [1102, 1221], "dev": [1107, 1221], "527525": [1107, 1221], "57": [1110, 1221, 1229], "frequent": [1113, 1116, 1221], "scatter": [1117, 1221], "2246e": [1126, 1195, 1221], "stringnamespac": 1133, "orld": 1171, "tur": 1182, "structnamespac": 1187, "6331e16": [1195, 1221], "int64arrai": [1197, 1221], "a_2": [1198, 1221], "a_3": [1198, 1221], "s_from_str_repr": [1200, 1221], "zero_copy_onli": [1202, 1221], "writabl": [1202, 1221], "immut": [1202, 1221], "127": [1208, 1221], "seriesview": [1211, 1221], "dtype_if_empti": 1221, "position": 1221, "scenario": 1221, "chunk_length": 1221, "get_chunk": 1221, "has_valid": 1221, "is_boolean": 1221, "is_float": 1221, "is_integ": 1221, "is_numer": [1221, 1229], "is_sort": 1221, "is_tempor": 1221, "is_utf8": 1221, "new_from_index": 1221, "series_equ": 1221, "set_at_idx": 1221, "two_a": 1228, "__enter__": 1228, "__exit__": 1228, "exc_typ": 1228, "baseexcept": 1228, "exc_val": 1228, "exc_tb": 1228, "tracebacktyp": 1228, "primari": 1229, "guid": 1229, "machin": 1229, "xdist": 1229, "hardwar": 1229, "setup": 1229, "sec": 1229, "numeric_dtyp": 1229, "null_probabililti": 1229, "test_numer": 1229, "col0": 1229, "col4": 1229, "29096": 1229, "485": 1229, "2147483647": 1229, "8257e14": 1229, "7508": 1229, "37338": 1229, "7264": 1229, "16996": 1229, "121": 1229, "361": 1229, "63204": 1229, "1443e235": 1229, "conform": 1229, "ascii_lett": 1229, "id_char": 1229, "alphabet": 1229, "price": 1229, "min_valu": 1229, "max_valu": 1229, "test_price_calcul": 1229, "a101": 1229, "8nin": 1229, "qhoo": 1229, "714": 1229, "544": 1229, "i0e0": 1229, "0000": 1229, "test_miscellan": 1229, "235": 1229, "87": 1229, "186": 1229, "174": 1229, "179": 1229, "213": 1229, "221": 1229, "86": 1229, "255": 1229}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Enum"], [52, 0, 1, "", "Float32"], [53, 0, 1, "", "Float64"], [54, 0, 1, "", "Int16"], [55, 0, 1, "", "Int32"], [56, 0, 1, "", "Int64"], [57, 0, 1, "", "Int8"], [61, 0, 1, "", "List"], [62, 0, 1, "", "Null"], [63, 0, 1, "", "Object"], [1228, 0, 1, "", "SQLContext"], [70, 0, 1, "", "StringCache"], [71, 0, 1, "", "Struct"], [72, 0, 1, "", "Time"], [73, 0, 1, "", "UInt16"], [74, 0, 1, "", "UInt32"], [75, 0, 1, "", "UInt64"], [76, 0, 1, "", "UInt8"], [77, 0, 1, "", "Unknown"], [78, 0, 1, "", "Utf8"], [79, 4, 1, "", "align_frames"], [664, 4, 1, "", "all"], [665, 4, 1, "", "all_horizontal"], [666, 4, 1, "", "any"], [667, 4, 1, "", "any_horizontal"], [668, 4, 1, "", "apply"], [669, 4, 1, "", "approx_n_unique"], [670, 4, 1, "", "arange"], [671, 4, 1, "", "arctan2"], [672, 4, 1, "", "arctan2d"], [673, 4, 1, "", "arg_sort_by"], [674, 4, 1, "", "arg_where"], [84, 4, 1, "", "build_info"], [675, 4, 1, "", "coalesce"], [85, 4, 1, "", "collect_all"], [86, 4, 1, "", "collect_all_async"], [87, 4, 1, "", "concat"], [676, 4, 1, "", "concat_list"], [677, 4, 1, "", "concat_str"], [678, 4, 1, "", "corr"], [679, 4, 1, "", "count"], [680, 4, 1, "", "cov"], [681, 4, 1, "", "cum_fold"], [682, 4, 1, "", "cum_reduce"], [683, 4, 1, "", "cum_sum"], [684, 4, 1, "", "cum_sum_horizontal"], [685, 4, 1, "", "cumfold"], [686, 4, 1, "", "cumreduce"], [687, 4, 1, "", "cumsum"], [688, 4, 1, "", "cumsum_horizontal"], [689, 4, 1, "", "date"], [690, 4, 1, "", "date_range"], [691, 4, 1, "", "date_ranges"], [692, 4, 1, "", "datetime"], [693, 4, 1, "", "datetime_range"], [694, 4, 1, "", "datetime_ranges"], [88, 4, 1, "", "disable_string_cache"], [695, 4, 1, "", "duration"], [696, 4, 1, "", "element"], [89, 4, 1, "", "enable_string_cache"], [697, 4, 1, "", "exclude"], [698, 4, 1, "", "first"], [699, 4, 1, "", "fold"], [700, 4, 1, "", "format"], [104, 4, 1, "", "from_arrow"], [105, 4, 1, "", "from_dataframe"], [106, 4, 1, "", "from_dict"], [107, 4, 1, "", "from_dicts"], [701, 4, 1, "", "from_epoch"], [108, 4, 1, "", "from_numpy"], [109, 4, 1, "", "from_pandas"], [110, 4, 1, "", "from_records"], [111, 4, 1, "", "from_repr"], [112, 4, 1, "", "get_index_type"], [702, 4, 1, "", "groups"], [703, 4, 1, "", "head"], [704, 4, 1, "", "implode"], [705, 4, 1, "", "int_range"], [706, 4, 1, "", "int_ranges"], [707, 4, 1, "", "last"], [708, 4, 1, "", "lit"], [709, 4, 1, "", "map"], [710, 4, 1, "", "map_batches"], [711, 4, 1, "", "map_groups"], [712, 4, 1, "", "max"], [713, 4, 1, "", "max_horizontal"], [714, 4, 1, "", "mean"], [715, 4, 1, "", "median"], [716, 4, 1, "", "min"], [717, 4, 1, "", "min_horizontal"], [718, 4, 1, "", "n_unique"], [719, 4, 1, "", "ones"], [720, 4, 1, "", "quantile"], [114, 4, 1, "", "read_avro"], [115, 4, 1, "", "read_csv"], [116, 4, 1, "", "read_csv_batched"], [117, 4, 1, "", "read_database"], [118, 4, 1, "", "read_database_uri"], [119, 4, 1, "", "read_delta"], [120, 4, 1, "", "read_excel"], [121, 4, 1, "", "read_ipc"], [122, 4, 1, "", "read_ipc_schema"], [123, 4, 1, "", "read_ipc_stream"], [124, 4, 1, "", "read_json"], [125, 4, 1, "", "read_ndjson"], [126, 4, 1, "", "read_ods"], [127, 4, 1, "", "read_parquet"], [128, 4, 1, "", "read_parquet_schema"], [721, 4, 1, "", "reduce"], [722, 4, 1, "", "repeat"], [723, 4, 1, "", "rolling_corr"], [724, 4, 1, "", "rolling_cov"], [129, 4, 1, "", "scan_csv"], [130, 4, 1, "", "scan_delta"], [131, 4, 1, "", "scan_iceberg"], [132, 4, 1, "", "scan_ipc"], [133, 4, 1, "", "scan_ndjson"], [134, 4, 1, "", "scan_parquet"], [135, 4, 1, "", "scan_pyarrow_dataset"], [725, 4, 1, "", "select"], [858, 6, 0, "-", "selectors"], [136, 4, 1, "", "set_random_seed"], [137, 4, 1, "", "show_versions"], [726, 4, 1, "", "sql_expr"], [727, 4, 1, "", "std"], [728, 4, 1, "", "struct"], [729, 4, 1, "", "sum"], [730, 4, 1, "", "sum_horizontal"], [731, 4, 1, "", "tail"], [149, 4, 1, "", "threadpool_size"], [732, 4, 1, "", "time"], [733, 4, 1, "", "time_range"], [734, 4, 1, "", "time_ranges"], [150, 4, 1, "", "using_string_cache"], [735, 4, 1, "", "var"], [736, 4, 1, "", "when"], [737, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[153, 1, 1, "", "__dataframe__"], [154, 1, 1, "", "apply"], [155, 1, 1, "", "approx_n_unique"], [156, 1, 1, "", "bottom_k"], [157, 1, 1, "", "cast"], [158, 1, 1, "", "clear"], [159, 1, 1, "", "clone"], [160, 2, 1, "", "columns"], [161, 1, 1, "", "corr"], [162, 1, 1, "", "count"], [163, 1, 1, "", "describe"], [164, 1, 1, "", "drop"], [165, 1, 1, "", "drop_in_place"], [166, 1, 1, "", "drop_nulls"], [167, 2, 1, "", "dtypes"], [168, 1, 1, "", "equals"], [169, 1, 1, "", "estimated_size"], [170, 1, 1, "", "explode"], [171, 1, 1, "", "extend"], [172, 1, 1, "", "fill_nan"], [173, 1, 1, "", "fill_null"], [174, 1, 1, "", "filter"], [175, 1, 1, "", "find_idx_by_name"], [176, 2, 1, "", "flags"], [177, 1, 1, "", "fold"], [178, 1, 1, "", "frame_equal"], [179, 1, 1, "", "gather_every"], [180, 1, 1, "", "get_column"], [181, 1, 1, "", "get_column_index"], [182, 1, 1, "", "get_columns"], [183, 1, 1, "", "glimpse"], [184, 1, 1, "", "group_by"], [185, 1, 1, "", "group_by_dynamic"], [186, 1, 1, "", "group_by_rolling"], [187, 1, 1, "", "groupby"], [188, 1, 1, "", "groupby_dynamic"], [189, 1, 1, "", "groupby_rolling"], [190, 1, 1, "", "hash_rows"], [191, 1, 1, "", "head"], [192, 2, 1, "", "height"], [193, 1, 1, "", "hstack"], [194, 1, 1, "", "insert_at_idx"], [195, 1, 1, "", "insert_column"], [196, 1, 1, "", "interpolate"], [197, 1, 1, "", "is_duplicated"], [198, 1, 1, "", "is_empty"], [199, 1, 1, "", "is_unique"], [200, 1, 1, "", "item"], [201, 1, 1, "", "iter_columns"], [202, 1, 1, "", "iter_rows"], [203, 1, 1, "", "iter_slices"], [204, 1, 1, "", "join"], [205, 1, 1, "", "join_asof"], [206, 1, 1, "", "lazy"], [207, 1, 1, "", "limit"], [208, 1, 1, "", "map_rows"], [209, 1, 1, "", "max"], [210, 1, 1, "", "max_horizontal"], [211, 1, 1, "", "mean"], [212, 1, 1, "", "mean_horizontal"], [213, 1, 1, "", "median"], [214, 1, 1, "", "melt"], [215, 1, 1, "", "merge_sorted"], [216, 1, 1, "", "min"], [217, 1, 1, "", "min_horizontal"], [218, 1, 1, "", "n_chunks"], [219, 1, 1, "", "n_unique"], [220, 1, 1, "", "null_count"], [221, 1, 1, "", "partition_by"], [222, 1, 1, "", "pipe"], [223, 1, 1, "", "pivot"], [224, 1, 1, "", "product"], [225, 1, 1, "", "quantile"], [226, 1, 1, "", "rechunk"], [227, 1, 1, "", "rename"], [228, 1, 1, "", "replace"], [229, 1, 1, "", "replace_at_idx"], [230, 1, 1, "", "replace_column"], [231, 1, 1, "", "reverse"], [232, 1, 1, "", "rolling"], [233, 1, 1, "", "row"], [234, 1, 1, "", "rows"], [235, 1, 1, "", "rows_by_key"], [236, 1, 1, "", "sample"], [237, 2, 1, "", "schema"], [238, 1, 1, "", "select"], [239, 1, 1, "", "select_seq"], [240, 1, 1, "", "set_sorted"], [241, 2, 1, "", "shape"], [242, 1, 1, "", "shift"], [243, 1, 1, "", "shift_and_fill"], [244, 1, 1, "", "shrink_to_fit"], [245, 1, 1, "", "slice"], [246, 1, 1, "", "sort"], [247, 1, 1, "", "std"], [248, 1, 1, "", "sum"], [249, 1, 1, "", "sum_horizontal"], [250, 1, 1, "", "tail"], [251, 1, 1, "", "take_every"], [252, 1, 1, "", "to_arrow"], [253, 1, 1, "", "to_dict"], [254, 1, 1, "", "to_dicts"], [255, 1, 1, "", "to_dummies"], [256, 1, 1, "", "to_init_repr"], [257, 1, 1, "", "to_numpy"], [258, 1, 1, "", "to_pandas"], [259, 1, 1, "", "to_series"], [260, 1, 1, "", "to_struct"], [261, 1, 1, "", "top_k"], [262, 1, 1, "", "transpose"], [263, 1, 1, "", "unique"], [264, 1, 1, "", "unnest"], [265, 1, 1, "", "unstack"], [266, 1, 1, "", "update"], [267, 1, 1, "", "upsample"], [268, 1, 1, "", "var"], [269, 1, 1, "", "vstack"], [270, 2, 1, "", "width"], [271, 1, 1, "", "with_columns"], [272, 1, 1, "", "with_columns_seq"], [273, 1, 1, "", "with_row_count"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Enum": [[51, 1, 1, "", "__init__"]], "polars.Expr": [[302, 1, 1, "", "abs"], [303, 1, 1, "", "add"], [304, 1, 1, "", "agg_groups"], [305, 1, 1, "", "alias"], [306, 1, 1, "", "all"], [307, 1, 1, "", "and_"], [308, 1, 1, "", "any"], [309, 1, 1, "", "append"], [310, 1, 1, "", "apply"], [311, 1, 1, "", "approx_n_unique"], [312, 1, 1, "", "arccos"], [313, 1, 1, "", "arccosh"], [314, 1, 1, "", "arcsin"], [315, 1, 1, "", "arcsinh"], [316, 1, 1, "", "arctan"], [317, 1, 1, "", "arctanh"], [318, 1, 1, "", "arg_max"], [319, 1, 1, "", "arg_min"], [320, 1, 1, "", "arg_sort"], [321, 1, 1, "", "arg_true"], [322, 1, 1, "", "arg_unique"], [328, 1, 1, "", "backward_fill"], [334, 1, 1, "", "bottom_k"], [335, 1, 1, "", "cast"], [338, 1, 1, "", "cbrt"], [339, 1, 1, "", "ceil"], [340, 1, 1, "", "clip"], [341, 1, 1, "", "clip_max"], [342, 1, 1, "", "clip_min"], [343, 1, 1, "", "cos"], [344, 1, 1, "", "cosh"], [345, 1, 1, "", "cot"], [346, 1, 1, "", "count"], [347, 1, 1, "", "cum_count"], [348, 1, 1, "", "cum_max"], [349, 1, 1, "", "cum_min"], [350, 1, 1, "", "cum_prod"], [351, 1, 1, "", "cum_sum"], [352, 1, 1, "", "cumcount"], [353, 1, 1, "", "cummax"], [354, 1, 1, "", "cummin"], [355, 1, 1, "", "cumprod"], [356, 1, 1, "", "cumsum"], [357, 1, 1, "", "cumulative_eval"], [358, 1, 1, "", "cut"], [359, 1, 1, "", "degrees"], [360, 1, 1, "", "diff"], [361, 1, 1, "", "dot"], [362, 1, 1, "", "drop_nans"], [363, 1, 1, "", "drop_nulls"], [412, 1, 1, "", "entropy"], [413, 1, 1, "", "eq"], [414, 1, 1, "", "eq_missing"], [415, 1, 1, "", "ewm_mean"], [416, 1, 1, "", "ewm_std"], [417, 1, 1, "", "ewm_var"], [418, 1, 1, "", "exclude"], [419, 1, 1, "", "exp"], [420, 1, 1, "", "explode"], [421, 1, 1, "", "extend_constant"], [422, 1, 1, "", "fill_nan"], [423, 1, 1, "", "fill_null"], [424, 1, 1, "", "filter"], [425, 1, 1, "", "first"], [426, 1, 1, "", "flatten"], [427, 1, 1, "", "floor"], [428, 1, 1, "", "floordiv"], [429, 1, 1, "", "forward_fill"], [430, 1, 1, "", "from_json"], [431, 1, 1, "", "gather"], [432, 1, 1, "", "gather_every"], [433, 1, 1, "", "ge"], [434, 1, 1, "", "get"], [435, 1, 1, "", "gt"], [436, 1, 1, "", "hash"], [437, 1, 1, "", "head"], [438, 1, 1, "", "hist"], [439, 1, 1, "", "implode"], [440, 1, 1, "", "inspect"], [441, 1, 1, "", "interpolate"], [442, 1, 1, "", "is_between"], [443, 1, 1, "", "is_duplicated"], [444, 1, 1, "", "is_finite"], [445, 1, 1, "", "is_first"], [446, 1, 1, "", "is_first_distinct"], [447, 1, 1, "", "is_in"], [448, 1, 1, "", "is_infinite"], [449, 1, 1, "", "is_last"], [450, 1, 1, "", "is_last_distinct"], [451, 1, 1, "", "is_nan"], [452, 1, 1, "", "is_not"], [453, 1, 1, "", "is_not_nan"], [454, 1, 1, "", "is_not_null"], [455, 1, 1, "", "is_null"], [456, 1, 1, "", "is_unique"], [457, 1, 1, "", "keep_name"], [458, 1, 1, "", "kurtosis"], [459, 1, 1, "", "last"], [460, 1, 1, "", "le"], [461, 1, 1, "", "len"], [462, 1, 1, "", "limit"], [501, 1, 1, "", "log"], [502, 1, 1, "", "log10"], [503, 1, 1, "", "log1p"], [504, 1, 1, "", "lower_bound"], [505, 1, 1, "", "lt"], [506, 1, 1, "", "map"], [507, 1, 1, "", "map_alias"], [508, 1, 1, "", "map_batches"], [509, 1, 1, "", "map_dict"], [510, 1, 1, "", "map_elements"], [511, 1, 1, "", "max"], [512, 1, 1, "", "mean"], [513, 1, 1, "", "median"], [524, 1, 1, "", "min"], [525, 1, 1, "", "mod"], [526, 1, 1, "", "mode"], [527, 1, 1, "", "mul"], [528, 1, 1, "", "n_unique"], [535, 1, 1, "", "nan_max"], [536, 1, 1, "", "nan_min"], [537, 1, 1, "", "ne"], [538, 1, 1, "", "ne_missing"], [539, 1, 1, "", "not_"], [540, 1, 1, "", "null_count"], [541, 1, 1, "", "or_"], [542, 1, 1, "", "over"], [543, 1, 1, "", "pct_change"], [544, 1, 1, "", "peak_max"], [545, 1, 1, "", "peak_min"], [546, 1, 1, "", "pipe"], [547, 1, 1, "", "pow"], [548, 1, 1, "", "prefix"], [549, 1, 1, "", "product"], [550, 1, 1, "", "qcut"], [551, 1, 1, "", "quantile"], [552, 1, 1, "", "radians"], [553, 1, 1, "", "rank"], [554, 1, 1, "", "rechunk"], [555, 1, 1, "", "reinterpret"], [556, 1, 1, "", "repeat_by"], [557, 1, 1, "", "replace"], [558, 1, 1, "", "reshape"], [559, 1, 1, "", "reverse"], [560, 1, 1, "", "rle"], [561, 1, 1, "", "rle_id"], [562, 1, 1, "", "rolling"], [563, 1, 1, "", "rolling_apply"], [564, 1, 1, "", "rolling_map"], [565, 1, 1, "", "rolling_max"], [566, 1, 1, "", "rolling_mean"], [567, 1, 1, "", "rolling_median"], [568, 1, 1, "", "rolling_min"], [569, 1, 1, "", "rolling_quantile"], [570, 1, 1, "", "rolling_skew"], [571, 1, 1, "", "rolling_std"], [572, 1, 1, "", "rolling_sum"], [573, 1, 1, "", "rolling_var"], [574, 1, 1, "", "round"], [575, 1, 1, "", "round_sig_figs"], [576, 1, 1, "", "sample"], [577, 1, 1, "", "search_sorted"], [578, 1, 1, "", "set_sorted"], [579, 1, 1, "", "shift"], [580, 1, 1, "", "shift_and_fill"], [581, 1, 1, "", "shrink_dtype"], [582, 1, 1, "", "shuffle"], [583, 1, 1, "", "sign"], [584, 1, 1, "", "sin"], [585, 1, 1, "", "sinh"], [586, 1, 1, "", "skew"], [587, 1, 1, "", "slice"], [588, 1, 1, "", "sort"], [589, 1, 1, "", "sort_by"], [590, 1, 1, "", "sqrt"], [591, 1, 1, "", "std"], [646, 1, 1, "", "sub"], [647, 1, 1, "", "suffix"], [648, 1, 1, "", "sum"], [649, 1, 1, "", "tail"], [650, 1, 1, "", "take"], [651, 1, 1, "", "take_every"], [652, 1, 1, "", "tan"], [653, 1, 1, "", "tanh"], [654, 1, 1, "", "to_physical"], [655, 1, 1, "", "top_k"], [656, 1, 1, "", "truediv"], [657, 1, 1, "", "unique"], [658, 1, 1, "", "unique_counts"], [659, 1, 1, "", "upper_bound"], [660, 1, 1, "", "value_counts"], [661, 1, 1, "", "var"], [662, 1, 1, "", "where"], [663, 1, 1, "", "xor"]], "polars.Expr.arr": [[323, 1, 1, "", "max"], [324, 1, 1, "", "min"], [325, 1, 1, "", "sum"], [326, 1, 1, "", "to_list"], [327, 1, 1, "", "unique"]], "polars.Expr.bin": [[329, 1, 1, "", "contains"], [330, 1, 1, "", "decode"], [331, 1, 1, "", "encode"], [332, 1, 1, "", "ends_with"], [333, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[336, 1, 1, "", "get_categories"], [337, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[364, 1, 1, "", "base_utc_offset"], [365, 1, 1, "", "cast_time_unit"], [366, 1, 1, "", "combine"], [367, 1, 1, "", "convert_time_zone"], [368, 1, 1, "", "date"], [369, 1, 1, "", "datetime"], [370, 1, 1, "", "day"], [371, 1, 1, "", "days"], [372, 1, 1, "", "dst_offset"], [373, 1, 1, "", "epoch"], [374, 1, 1, "", "hour"], [375, 1, 1, "", "hours"], [376, 1, 1, "", "is_leap_year"], [377, 1, 1, "", "iso_year"], [378, 1, 1, "", "microsecond"], [379, 1, 1, "", "microseconds"], [380, 1, 1, "", "millisecond"], [381, 1, 1, "", "milliseconds"], [382, 1, 1, "", "minute"], [383, 1, 1, "", "minutes"], [384, 1, 1, "", "month"], [385, 1, 1, "", "month_end"], [386, 1, 1, "", "month_start"], [387, 1, 1, "", "nanosecond"], [388, 1, 1, "", "nanoseconds"], [389, 1, 1, "", "offset_by"], [390, 1, 1, "", "ordinal_day"], [391, 1, 1, "", "quarter"], [392, 1, 1, "", "replace_time_zone"], [393, 1, 1, "", "round"], [394, 1, 1, "", "second"], [395, 1, 1, "", "seconds"], [396, 1, 1, "", "strftime"], [397, 1, 1, "", "time"], [398, 1, 1, "", "timestamp"], [399, 1, 1, "", "to_string"], [400, 1, 1, "", "total_days"], [401, 1, 1, "", "total_hours"], [402, 1, 1, "", "total_microseconds"], [403, 1, 1, "", "total_milliseconds"], [404, 1, 1, "", "total_minutes"], [405, 1, 1, "", "total_nanoseconds"], [406, 1, 1, "", "total_seconds"], [407, 1, 1, "", "truncate"], [408, 1, 1, "", "week"], [409, 1, 1, "", "weekday"], [410, 1, 1, "", "with_time_unit"], [411, 1, 1, "", "year"]], "polars.Expr.list": [[463, 1, 1, "", "all"], [464, 1, 1, "", "any"], [465, 1, 1, "", "arg_max"], [466, 1, 1, "", "arg_min"], [467, 1, 1, "", "concat"], [468, 1, 1, "", "contains"], [469, 1, 1, "", "count_match"], [470, 1, 1, "", "count_matches"], [471, 1, 1, "", "diff"], [472, 1, 1, "", "drop_nulls"], [473, 1, 1, "", "eval"], [474, 1, 1, "", "explode"], [475, 1, 1, "", "first"], [476, 1, 1, "", "gather"], [477, 1, 1, "", "get"], [478, 1, 1, "", "head"], [479, 1, 1, "", "join"], [480, 1, 1, "", "last"], [481, 1, 1, "", "len"], [482, 1, 1, "", "lengths"], [483, 1, 1, "", "max"], [484, 1, 1, "", "mean"], [485, 1, 1, "", "min"], [486, 1, 1, "", "reverse"], [487, 1, 1, "", "sample"], [488, 1, 1, "", "set_difference"], [489, 1, 1, "", "set_intersection"], [490, 1, 1, "", "set_symmetric_difference"], [491, 1, 1, "", "set_union"], [492, 1, 1, "", "shift"], [493, 1, 1, "", "slice"], [494, 1, 1, "", "sort"], [495, 1, 1, "", "sum"], [496, 1, 1, "", "tail"], [497, 1, 1, "", "take"], [498, 1, 1, "", "to_array"], [499, 1, 1, "", "to_struct"], [500, 1, 1, "", "unique"]], "polars.Expr.meta": [[514, 1, 1, "", "eq"], [515, 1, 1, "", "has_multiple_outputs"], [516, 1, 1, "", "is_regex_projection"], [517, 1, 1, "", "ne"], [518, 1, 1, "", "output_name"], [519, 1, 1, "", "pop"], [520, 1, 1, "", "root_names"], [521, 1, 1, "", "tree_format"], [522, 1, 1, "", "undo_aliases"], [523, 1, 1, "", "write_json"]], "polars.Expr.name": [[529, 1, 1, "", "keep"], [530, 1, 1, "", "map"], [531, 1, 1, "", "prefix"], [532, 1, 1, "", "suffix"], [533, 1, 1, "", "to_lowercase"], [534, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[592, 1, 1, "", "concat"], [593, 1, 1, "", "contains"], [594, 1, 1, "", "contains_any"], [595, 1, 1, "", "count_match"], [596, 1, 1, "", "count_matches"], [597, 1, 1, "", "decode"], [598, 1, 1, "", "encode"], [599, 1, 1, "", "ends_with"], [600, 1, 1, "", "explode"], [601, 1, 1, "", "extract"], [602, 1, 1, "", "extract_all"], [603, 1, 1, "", "extract_groups"], [604, 1, 1, "", "json_decode"], [605, 1, 1, "", "json_extract"], [606, 1, 1, "", "json_path_match"], [607, 1, 1, "", "len_bytes"], [608, 1, 1, "", "len_chars"], [609, 1, 1, "", "lengths"], [610, 1, 1, "", "ljust"], [611, 1, 1, "", "lstrip"], [612, 1, 1, "", "n_chars"], [613, 1, 1, "", "pad_end"], [614, 1, 1, "", "pad_start"], [615, 1, 1, "", "parse_int"], [616, 1, 1, "", "replace"], [617, 1, 1, "", "replace_all"], [618, 1, 1, "", "replace_many"], [619, 1, 1, "", "reverse"], [620, 1, 1, "", "rjust"], [621, 1, 1, "", "rstrip"], [622, 1, 1, "", "slice"], [623, 1, 1, "", "split"], [624, 1, 1, "", "split_exact"], [625, 1, 1, "", "splitn"], [626, 1, 1, "", "starts_with"], [627, 1, 1, "", "strip"], [628, 1, 1, "", "strip_chars"], [629, 1, 1, "", "strip_chars_end"], [630, 1, 1, "", "strip_chars_start"], [631, 1, 1, "", "strip_prefix"], [632, 1, 1, "", "strip_suffix"], [633, 1, 1, "", "strptime"], [634, 1, 1, "", "to_date"], [635, 1, 1, "", "to_datetime"], [636, 1, 1, "", "to_decimal"], [637, 1, 1, "", "to_integer"], [638, 1, 1, "", "to_lowercase"], [639, 1, 1, "", "to_time"], [640, 1, 1, "", "to_titlecase"], [641, 1, 1, "", "to_uppercase"], [642, 1, 1, "", "zfill"]], "polars.Expr.struct": [[643, 1, 1, "", "field"], [644, 1, 1, "", "json_encode"], [645, 1, 1, "", "rename_fields"]], "polars.Float32": [[52, 1, 1, "", "__init__"]], "polars.Float64": [[53, 1, 1, "", "__init__"]], "polars.Int16": [[54, 1, 1, "", "__init__"]], "polars.Int32": [[55, 1, 1, "", "__init__"]], "polars.Int64": [[56, 1, 1, "", "__init__"]], "polars.Int8": [[57, 1, 1, "", "__init__"]], "polars.LazyFrame": [[761, 1, 1, "", "approx_n_unique"], [762, 1, 1, "", "bottom_k"], [763, 1, 1, "", "cache"], [764, 1, 1, "", "cast"], [765, 1, 1, "", "clear"], [766, 1, 1, "", "clone"], [767, 1, 1, "", "collect"], [768, 1, 1, "", "collect_async"], [769, 2, 1, "", "columns"], [770, 1, 1, "", "count"], [771, 1, 1, "", "deserialize"], [772, 1, 1, "", "drop"], [773, 1, 1, "", "drop_nulls"], [774, 2, 1, "", "dtypes"], [775, 1, 1, "", "explain"], [776, 1, 1, "", "explode"], [777, 1, 1, "", "fetch"], [778, 1, 1, "", "fill_nan"], [779, 1, 1, "", "fill_null"], [780, 1, 1, "", "filter"], [781, 1, 1, "", "first"], [782, 1, 1, "", "gather_every"], [783, 1, 1, "", "group_by"], [784, 1, 1, "", "group_by_dynamic"], [785, 1, 1, "", "group_by_rolling"], [786, 1, 1, "", "groupby"], [787, 1, 1, "", "groupby_dynamic"], [788, 1, 1, "", "groupby_rolling"], [789, 1, 1, "", "head"], [790, 1, 1, "", "inspect"], [791, 1, 1, "", "interpolate"], [792, 1, 1, "", "join"], [793, 1, 1, "", "join_asof"], [794, 1, 1, "", "last"], [795, 1, 1, "", "lazy"], [796, 1, 1, "", "limit"], [797, 1, 1, "", "map"], [798, 1, 1, "", "map_batches"], [799, 1, 1, "", "max"], [800, 1, 1, "", "mean"], [801, 1, 1, "", "median"], [802, 1, 1, "", "melt"], [803, 1, 1, "", "merge_sorted"], [804, 1, 1, "", "min"], [805, 1, 1, "", "null_count"], [806, 1, 1, "", "pipe"], [807, 1, 1, "", "profile"], [808, 1, 1, "", "quantile"], [809, 1, 1, "", "rename"], [810, 1, 1, "", "reverse"], [811, 1, 1, "", "rolling"], [812, 2, 1, "", "schema"], [813, 1, 1, "", "select"], [814, 1, 1, "", "select_seq"], [815, 1, 1, "", "serialize"], [816, 1, 1, "", "set_sorted"], [817, 1, 1, "", "shift"], [818, 1, 1, "", "shift_and_fill"], [819, 1, 1, "", "show_graph"], [58, 1, 1, "", "sink_csv"], [59, 1, 1, "", "sink_ipc"], [60, 1, 1, "", "sink_parquet"], [820, 1, 1, "", "slice"], [821, 1, 1, "", "sort"], [822, 1, 1, "", "std"], [823, 1, 1, "", "sum"], [824, 1, 1, "", "tail"], [825, 1, 1, "", "take_every"], [826, 1, 1, "", "top_k"], [827, 1, 1, "", "unique"], [828, 1, 1, "", "unnest"], [829, 1, 1, "", "update"], [830, 1, 1, "", "var"], [831, 2, 1, "", "width"], [832, 1, 1, "", "with_columns"], [833, 1, 1, "", "with_columns_seq"], [834, 1, 1, "", "with_context"], [835, 1, 1, "", "with_row_count"]], "polars.List": [[61, 1, 1, "", "__init__"]], "polars.Null": [[62, 1, 1, "", "__init__"]], "polars.Object": [[63, 1, 1, "", "__init__"]], "polars.SQLContext": [[1228, 1, 1, "", "__enter__"], [1228, 1, 1, "", "__exit__"], [1228, 1, 1, "", "__init__"], [64, 1, 1, "", "execute"], [65, 1, 1, "", "register"], [66, 1, 1, "", "register_globals"], [67, 1, 1, "", "register_many"], [68, 1, 1, "", "tables"], [69, 1, 1, "", "unregister"]], "polars.Series": [[860, 1, 1, "", "abs"], [861, 1, 1, "", "alias"], [862, 1, 1, "", "all"], [863, 1, 1, "", "any"], [864, 1, 1, "", "append"], [865, 1, 1, "", "apply"], [866, 1, 1, "", "arccos"], [867, 1, 1, "", "arccosh"], [868, 1, 1, "", "arcsin"], [869, 1, 1, "", "arcsinh"], [870, 1, 1, "", "arctan"], [871, 1, 1, "", "arctanh"], [872, 1, 1, "", "arg_max"], [873, 1, 1, "", "arg_min"], [874, 1, 1, "", "arg_sort"], [875, 1, 1, "", "arg_true"], [876, 1, 1, "", "arg_unique"], [887, 1, 1, "", "bottom_k"], [888, 1, 1, "", "cast"], [889, 3, 1, "", "cat"], [895, 1, 1, "", "cbrt"], [896, 1, 1, "", "ceil"], [897, 1, 1, "", "chunk_lengths"], [898, 1, 1, "", "clear"], [899, 1, 1, "", "clip"], [900, 1, 1, "", "clip_max"], [901, 1, 1, "", "clip_min"], [902, 1, 1, "", "clone"], [903, 1, 1, "", "cos"], [904, 1, 1, "", "cosh"], [905, 1, 1, "", "cot"], [906, 1, 1, "", "cum_max"], [907, 1, 1, "", "cum_min"], [908, 1, 1, "", "cum_prod"], [909, 1, 1, "", "cum_sum"], [910, 1, 1, "", "cummax"], [911, 1, 1, "", "cummin"], [912, 1, 1, "", "cumprod"], [913, 1, 1, "", "cumsum"], [914, 1, 1, "", "cumulative_eval"], [915, 1, 1, "", "cut"], [916, 1, 1, "", "describe"], [917, 1, 1, "", "diff"], [918, 1, 1, "", "dot"], [919, 1, 1, "", "drop_nans"], [920, 1, 1, "", "drop_nulls"], [921, 3, 1, "", "dt"], [974, 3, 1, "", "dtype"], [975, 1, 1, "", "entropy"], [976, 1, 1, "", "equals"], [977, 1, 1, "", "estimated_size"], [978, 1, 1, "", "ewm_mean"], [979, 1, 1, "", "ewm_std"], [980, 1, 1, "", "ewm_var"], [981, 1, 1, "", "exp"], [982, 1, 1, "", "explode"], [983, 1, 1, "", "extend"], [984, 1, 1, "", "extend_constant"], [985, 1, 1, "", "fill_nan"], [986, 1, 1, "", "fill_null"], [987, 1, 1, "", "filter"], [988, 3, 1, "", "flags"], [989, 1, 1, "", "floor"], [990, 1, 1, "", "gather"], [991, 1, 1, "", "gather_every"], [992, 1, 1, "", "get_chunks"], [993, 1, 1, "", "has_validity"], [994, 1, 1, "", "hash"], [995, 1, 1, "", "head"], [996, 1, 1, "", "hist"], [997, 1, 1, "", "implode"], [998, 3, 1, "", "inner_dtype"], [999, 1, 1, "", "interpolate"], [1000, 1, 1, "", "is_between"], [1001, 1, 1, "", "is_boolean"], [1002, 1, 1, "", "is_duplicated"], [1003, 1, 1, "", "is_empty"], [1004, 1, 1, "", "is_finite"], [1005, 1, 1, "", "is_first"], [1006, 1, 1, "", "is_first_distinct"], [1007, 1, 1, "", "is_float"], [1008, 1, 1, "", "is_in"], [1009, 1, 1, "", "is_infinite"], [1010, 1, 1, "", "is_integer"], [1011, 1, 1, "", "is_last"], [1012, 1, 1, "", "is_last_distinct"], [1013, 1, 1, "", "is_nan"], [1014, 1, 1, "", "is_not_nan"], [1015, 1, 1, "", "is_not_null"], [1016, 1, 1, "", "is_null"], [1017, 1, 1, "", "is_numeric"], [1018, 1, 1, "", "is_sorted"], [1019, 1, 1, "", "is_temporal"], [1020, 1, 1, "", "is_unique"], [1021, 1, 1, "", "is_utf8"], [1022, 1, 1, "", "item"], [1023, 1, 1, "", "kurtosis"], [1024, 1, 1, "", "len"], [1025, 1, 1, "", "limit"], [1026, 3, 1, "", "list"], [1065, 1, 1, "", "log"], [1066, 1, 1, "", "log10"], [1067, 1, 1, "", "log1p"], [1068, 1, 1, "", "lower_bound"], [1069, 1, 1, "", "map_dict"], [1070, 1, 1, "", "map_elements"], [1071, 1, 1, "", "max"], [1072, 1, 1, "", "mean"], [1073, 1, 1, "", "median"], [1074, 1, 1, "", "min"], [1075, 1, 1, "", "mode"], [1076, 1, 1, "", "n_chunks"], [1077, 1, 1, "", "n_unique"], [1078, 3, 1, "", "name"], [1079, 1, 1, "", "nan_max"], [1080, 1, 1, "", "nan_min"], [1081, 1, 1, "", "new_from_index"], [1082, 1, 1, "", "not_"], [1083, 1, 1, "", "null_count"], [1084, 1, 1, "", "pct_change"], [1085, 1, 1, "", "peak_max"], [1086, 1, 1, "", "peak_min"], [1087, 1, 1, "", "product"], [1088, 1, 1, "", "qcut"], [1089, 1, 1, "", "quantile"], [1090, 1, 1, "", "rank"], [1091, 1, 1, "", "rechunk"], [1092, 1, 1, "", "reinterpret"], [1093, 1, 1, "", "rename"], [1094, 1, 1, "", "replace"], [1095, 1, 1, "", "reshape"], [1096, 1, 1, "", "reverse"], [1097, 1, 1, "", "rle"], [1098, 1, 1, "", "rle_id"], [1099, 1, 1, "", "rolling_apply"], [1100, 1, 1, "", "rolling_map"], [1101, 1, 1, "", "rolling_max"], [1102, 1, 1, "", "rolling_mean"], [1103, 1, 1, "", "rolling_median"], [1104, 1, 1, "", "rolling_min"], [1105, 1, 1, "", "rolling_quantile"], [1106, 1, 1, "", "rolling_skew"], [1107, 1, 1, "", "rolling_std"], [1108, 1, 1, "", "rolling_sum"], [1109, 1, 1, "", "rolling_var"], [1110, 1, 1, "", "round"], [1111, 1, 1, "", "round_sig_figs"], [1112, 1, 1, "", "sample"], [1113, 1, 1, "", "scatter"], [1114, 1, 1, "", "search_sorted"], [1115, 1, 1, "", "series_equal"], [1116, 1, 1, "", "set"], [1117, 1, 1, "", "set_at_idx"], [1118, 1, 1, "", "set_sorted"], [1119, 3, 1, "", "shape"], [1120, 1, 1, "", "shift"], [1121, 1, 1, "", "shift_and_fill"], [1122, 1, 1, "", "shrink_dtype"], [1123, 1, 1, "", "shrink_to_fit"], [1124, 1, 1, "", "shuffle"], [1125, 1, 1, "", "sign"], [1126, 1, 1, "", "sin"], [1127, 1, 1, "", "sinh"], [1128, 1, 1, "", "skew"], [1129, 1, 1, "", "slice"], [1130, 1, 1, "", "sort"], [1131, 1, 1, "", "sqrt"], [1132, 1, 1, "", "std"], [1133, 3, 1, "", "str"], [1191, 1, 1, "", "sum"], [1192, 1, 1, "", "tail"], [1193, 1, 1, "", "take"], [1194, 1, 1, "", "take_every"], [1195, 1, 1, "", "tan"], [1196, 1, 1, "", "tanh"], [1197, 1, 1, "", "to_arrow"], [1198, 1, 1, "", "to_dummies"], [1199, 1, 1, "", "to_frame"], [1200, 1, 1, "", "to_init_repr"], [1201, 1, 1, "", "to_list"], [1202, 1, 1, "", "to_numpy"], [1203, 1, 1, "", "to_pandas"], [1204, 1, 1, "", "to_physical"], [1205, 1, 1, "", "top_k"], [1206, 1, 1, "", "unique"], [1207, 1, 1, "", "unique_counts"], [1208, 1, 1, "", "upper_bound"], [1209, 1, 1, "", "value_counts"], [1210, 1, 1, "", "var"], [1211, 1, 1, "", "view"], [1212, 1, 1, "", "zip_with"]], "polars.Series.arr": [[877, 1, 1, "", "max"], [878, 1, 1, "", "min"], [879, 1, 1, "", "sum"], [880, 1, 1, "", "to_list"], [881, 1, 1, "", "unique"]], "polars.Series.bin": [[882, 1, 1, "", "contains"], [883, 1, 1, "", "decode"], [884, 1, 1, "", "encode"], [885, 1, 1, "", "ends_with"], [886, 1, 1, "", "starts_with"]], "polars.Series.cat": [[890, 1, 1, "", "get_categories"], [891, 1, 1, "", "is_local"], [892, 1, 1, "", "set_ordering"], [893, 1, 1, "", "to_local"], [894, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[922, 1, 1, "", "base_utc_offset"], [923, 1, 1, "", "cast_time_unit"], [924, 1, 1, "", "combine"], [925, 1, 1, "", "convert_time_zone"], [926, 1, 1, "", "date"], [927, 1, 1, "", "datetime"], [928, 1, 1, "", "day"], [929, 1, 1, "", "days"], [930, 1, 1, "", "dst_offset"], [931, 1, 1, "", "epoch"], [932, 1, 1, "", "hour"], [933, 1, 1, "", "hours"], [934, 1, 1, "", "is_leap_year"], [935, 1, 1, "", "iso_year"], [936, 1, 1, "", "max"], [937, 1, 1, "", "mean"], [938, 1, 1, "", "median"], [939, 1, 1, "", "microsecond"], [940, 1, 1, "", "microseconds"], [941, 1, 1, "", "millisecond"], [942, 1, 1, "", "milliseconds"], [943, 1, 1, "", "min"], [944, 1, 1, "", "minute"], [945, 1, 1, "", "minutes"], [946, 1, 1, "", "month"], [947, 1, 1, "", "month_end"], [948, 1, 1, "", "month_start"], [949, 1, 1, "", "nanosecond"], [950, 1, 1, "", "nanoseconds"], [951, 1, 1, "", "offset_by"], [952, 1, 1, "", "ordinal_day"], [953, 1, 1, "", "quarter"], [954, 1, 1, "", "replace_time_zone"], [955, 1, 1, "", "round"], [956, 1, 1, "", "second"], [957, 1, 1, "", "seconds"], [958, 1, 1, "", "strftime"], [959, 1, 1, "", "time"], [960, 1, 1, "", "timestamp"], [961, 1, 1, "", "to_string"], [962, 1, 1, "", "total_days"], [963, 1, 1, "", "total_hours"], [964, 1, 1, "", "total_microseconds"], [965, 1, 1, "", "total_milliseconds"], [966, 1, 1, "", "total_minutes"], [967, 1, 1, "", "total_nanoseconds"], [968, 1, 1, "", "total_seconds"], [969, 1, 1, "", "truncate"], [970, 1, 1, "", "week"], [971, 1, 1, "", "weekday"], [972, 1, 1, "", "with_time_unit"], [973, 1, 1, "", "year"]], "polars.Series.list": [[1027, 1, 1, "", "all"], [1028, 1, 1, "", "any"], [1029, 1, 1, "", "arg_max"], [1030, 1, 1, "", "arg_min"], [1031, 1, 1, "", "concat"], [1032, 1, 1, "", "contains"], [1033, 1, 1, "", "count_match"], [1034, 1, 1, "", "count_matches"], [1035, 1, 1, "", "diff"], [1036, 1, 1, "", "drop_nulls"], [1037, 1, 1, "", "eval"], [1038, 1, 1, "", "explode"], [1039, 1, 1, "", "first"], [1040, 1, 1, "", "gather"], [1041, 1, 1, "", "get"], [1042, 1, 1, "", "head"], [1043, 1, 1, "", "join"], [1044, 1, 1, "", "last"], [1045, 1, 1, "", "len"], [1046, 1, 1, "", "lengths"], [1047, 1, 1, "", "max"], [1048, 1, 1, "", "mean"], [1049, 1, 1, "", "min"], [1050, 1, 1, "", "reverse"], [1051, 1, 1, "", "sample"], [1052, 1, 1, "", "set_difference"], [1053, 1, 1, "", "set_intersection"], [1054, 1, 1, "", "set_symmetric_difference"], [1055, 1, 1, "", "set_union"], [1056, 1, 1, "", "shift"], [1057, 1, 1, "", "slice"], [1058, 1, 1, "", "sort"], [1059, 1, 1, "", "sum"], [1060, 1, 1, "", "tail"], [1061, 1, 1, "", "take"], [1062, 1, 1, "", "to_array"], [1063, 1, 1, "", "to_struct"], [1064, 1, 1, "", "unique"]], "polars.Series.str": [[1134, 1, 1, "", "concat"], [1135, 1, 1, "", "contains"], [1136, 1, 1, "", "contains_any"], [1137, 1, 1, "", "count_match"], [1138, 1, 1, "", "count_matches"], [1139, 1, 1, "", "decode"], [1140, 1, 1, "", "encode"], [1141, 1, 1, "", "ends_with"], [1142, 1, 1, "", "explode"], [1143, 1, 1, "", "extract"], [1144, 1, 1, "", "extract_all"], [1145, 1, 1, "", "extract_groups"], [1146, 1, 1, "", "json_decode"], [1147, 1, 1, "", "json_extract"], [1148, 1, 1, "", "json_path_match"], [1149, 1, 1, "", "len_bytes"], [1150, 1, 1, "", "len_chars"], [1151, 1, 1, "", "lengths"], [1152, 1, 1, "", "ljust"], [1153, 1, 1, "", "lstrip"], [1154, 1, 1, "", "n_chars"], [1155, 1, 1, "", "pad_end"], [1156, 1, 1, "", "pad_start"], [1157, 1, 1, "", "parse_int"], [1158, 1, 1, "", "replace"], [1159, 1, 1, "", "replace_all"], [1160, 1, 1, "", "replace_many"], [1161, 1, 1, "", "reverse"], [1162, 1, 1, "", "rjust"], [1163, 1, 1, "", "rstrip"], [1164, 1, 1, "", "slice"], [1165, 1, 1, "", "split"], [1166, 1, 1, "", "split_exact"], [1167, 1, 1, "", "splitn"], [1168, 1, 1, "", "starts_with"], [1169, 1, 1, "", "strip"], [1170, 1, 1, "", "strip_chars"], [1171, 1, 1, "", "strip_chars_end"], [1172, 1, 1, "", "strip_chars_start"], [1173, 1, 1, "", "strip_prefix"], [1174, 1, 1, "", "strip_suffix"], [1175, 1, 1, "", "strptime"], [1176, 1, 1, "", "to_date"], [1177, 1, 1, "", "to_datetime"], [1178, 1, 1, "", "to_decimal"], [1179, 1, 1, "", "to_integer"], [1180, 1, 1, "", "to_lowercase"], [1181, 1, 1, "", "to_time"], [1182, 1, 1, "", "to_titlecase"], [1183, 1, 1, "", "to_uppercase"], [1184, 1, 1, "", "zfill"]], "polars.Series.struct": [[1185, 1, 1, "", "field"], [1186, 3, 1, "", "fields"], [1187, 3, 1, "", "json_encode"], [1188, 1, 1, "", "rename_fields"], [1189, 3, 1, "", "schema"], [1190, 1, 1, "", "unnest"]], "polars.StringCache": [[70, 1, 1, "", "__init__"]], "polars.Struct": [[71, 1, 1, "", "__init__"]], "polars.Time": [[72, 1, 1, "", "__init__"]], "polars.UInt16": [[73, 1, 1, "", "__init__"]], "polars.UInt32": [[74, 1, 1, "", "__init__"]], "polars.UInt64": [[75, 1, 1, "", "__init__"]], "polars.UInt8": [[76, 1, 1, "", "__init__"]], "polars.Unknown": [[77, 1, 1, "", "__init__"]], "polars.Utf8": [[78, 1, 1, "", "__init__"]], "polars.api": [[80, 4, 1, "", "register_dataframe_namespace"], [81, 4, 1, "", "register_expr_namespace"], [82, 4, 1, "", "register_lazyframe_namespace"], [83, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[274, 1, 1, "", "__iter__"], [275, 1, 1, "", "agg"], [276, 1, 1, "", "all"], [277, 1, 1, "", "apply"], [278, 1, 1, "", "count"], [279, 1, 1, "", "first"], [280, 1, 1, "", "head"], [281, 1, 1, "", "last"], [282, 1, 1, "", "map_groups"], [283, 1, 1, "", "max"], [284, 1, 1, "", "mean"], [285, 1, 1, "", "median"], [286, 1, 1, "", "min"], [287, 1, 1, "", "n_unique"], [288, 1, 1, "", "quantile"], [289, 1, 1, "", "sum"], [290, 1, 1, "", "tail"]], "polars.exceptions": [[90, 5, 1, "", "ArrowError"], [91, 5, 1, "", "ColumnNotFoundError"], [92, 5, 1, "", "ComputeError"], [93, 5, 1, "", "DuplicateError"], [94, 5, 1, "", "InvalidOperationError"], [95, 5, 1, "", "NoDataError"], [96, 5, 1, "", "NoRowsReturnedError"], [97, 5, 1, "", "PolarsPanicError"], [98, 5, 1, "", "RowsError"], [99, 5, 1, "", "SchemaError"], [100, 5, 1, "", "SchemaFieldNotFoundError"], [101, 5, 1, "", "ShapeError"], [102, 5, 1, "", "StructFieldNotFoundError"], [103, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[113, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[836, 1, 1, "", "agg"], [837, 1, 1, "", "all"], [838, 1, 1, "", "apply"], [839, 1, 1, "", "count"], [840, 1, 1, "", "first"], [841, 1, 1, "", "head"], [842, 1, 1, "", "last"], [843, 1, 1, "", "map_groups"], [844, 1, 1, "", "max"], [845, 1, 1, "", "mean"], [846, 1, 1, "", "median"], [847, 1, 1, "", "min"], [848, 1, 1, "", "n_unique"], [849, 1, 1, "", "quantile"], [850, 1, 1, "", "sum"], [851, 1, 1, "", "tail"]], "polars.selectors": [[858, 4, 1, "", "all"], [858, 4, 1, "", "by_dtype"], [858, 4, 1, "", "by_name"], [858, 4, 1, "", "categorical"], [858, 4, 1, "", "contains"], [858, 4, 1, "", "date"], [858, 4, 1, "", "datetime"], [858, 4, 1, "", "duration"], [858, 4, 1, "", "ends_with"], [858, 4, 1, "", "expand_selector"], [858, 4, 1, "", "first"], [858, 4, 1, "", "float"], [858, 4, 1, "", "integer"], [858, 4, 1, "", "is_selector"], [858, 4, 1, "", "last"], [858, 4, 1, "", "matches"], [858, 4, 1, "", "numeric"], [858, 4, 1, "", "starts_with"], [858, 4, 1, "", "string"], [858, 4, 1, "", "temporal"], [858, 4, 1, "", "time"]], "polars.testing": [[138, 4, 1, "", "assert_frame_equal"], [139, 4, 1, "", "assert_frame_not_equal"], [140, 4, 1, "", "assert_series_equal"], [141, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[142, 0, 1, "", "column"], [143, 4, 1, "", "columns"], [144, 4, 1, "", "create_list_strategy"], [145, 4, 1, "", "dataframes"], [146, 4, 1, "", "load_profile"], [147, 4, 1, "", "series"], [148, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[142, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 171, 983], "api": [1, 80, 81, 82, 83, 758], "provid": 1, "new": 1, "function": [1, 151, 745, 757, 858], "avail": 1, "registr": 1, "exampl": [1, 858, 1229], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 742, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1229], "arrai": [2, 738, 1213], "binari": [3, 739, 752, 1215], "boolean": [4, 740, 1216], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 151], "activate_decim": 6, "load": [7, 151], "load_from_fil": 8, "restore_default": 9, "save": [10, 151], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 151], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 145, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 296], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 523], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 368, 689, 926], "datetim": [48, 369, 692, 927], "decim": 49, "durat": [50, 695], "enum": 51, "float32": 52, "float64": 53, "int16": 54, "int32": 55, "int64": 56, "int8": 57, "lazyfram": [58, 59, 60, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 855], "sink_csv": 58, "sink_ipc": 59, "sink_parquet": 60, "list": [61, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 747, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1222], "null": 62, "object": 63, "sqlcontext": [64, 65, 66, 67, 68, 69], "execut": 64, "regist": 65, "register_glob": 66, "register_mani": 67, "tabl": 68, "unregist": 69, "stringcach": [70, 757], "struct": [71, 643, 644, 645, 728, 754, 1185, 1186, 1187, 1188, 1189, 1190, 1226], "time": [72, 397, 732, 959], "uint16": 73, "uint32": 74, "uint64": 75, "uint8": 76, "unknown": 77, "utf8": 78, "align_fram": 79, "register_dataframe_namespac": 80, "register_expr_namespac": 81, "register_lazyframe_namespac": 82, "register_series_namespac": 83, "build_info": 84, "collect_al": 85, "collect_all_async": 86, "concat": [87, 467, 592, 1031, 1134], "disable_string_cach": 88, "enable_string_cach": 89, "except": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 300], "arrowerror": 90, "columnnotfounderror": 91, "computeerror": 92, "duplicateerror": 93, "invalidoperationerror": 94, "nodataerror": 95, "norowsreturnederror": 96, "polarspanicerror": 97, "rowserror": 98, "schemaerror": 99, "schemafieldnotfounderror": 100, "shapeerror": 101, "structfieldnotfounderror": 102, "toomanyrowsreturnederror": 103, "from_arrow": 104, "from_datafram": 105, "from_dict": [106, 107], "from_numpi": 108, "from_panda": 109, "from_record": 110, "from_repr": 111, "get_index_typ": 112, "io": 113, "csv": [113, 759], "batched_read": 113, "batchedcsvread": [113, 759], "next_batch": 113, "read_avro": 114, "read_csv": 115, "read_csv_batch": 116, "read_databas": 117, "read_database_uri": 118, "read_delta": 119, "read_excel": 120, "read_ipc": 121, "read_ipc_schema": 122, "read_ipc_stream": 123, "read_json": 124, "read_ndjson": 125, "read_od": 126, "read_parquet": 127, "read_parquet_schema": 128, "scan_csv": 129, "scan_delta": 130, "scan_iceberg": 131, "scan_ipc": 132, "scan_ndjson": 133, "scan_parquet": 134, "scan_pyarrow_dataset": 135, "set_random_se": 136, "show_vers": 137, "test": [138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 1229], "assert_frame_equ": 138, "assert_frame_not_equ": 139, "assert_series_equ": 140, "assert_series_not_equ": 141, "parametr": [142, 143, 144, 145, 146, 147, 148, 1229], "column": [142, 143, 160, 743, 769], "create_list_strategi": 144, "load_profil": 146, "seri": [147, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1221], "set_profil": 148, "threadpool_s": 149, "using_string_cach": 150, "option": 151, "current": 151, "us": 151, "context": 151, "manag": 151, "decor": 151, "aggreg": [152, 301, 760, 859], "__dataframe__": 153, "appli": [154, 277, 310, 668, 838, 865], "approx_n_uniqu": [155, 311, 669, 761], "bottom_k": [156, 334, 762, 887], "cast": [157, 335, 764, 888], "clear": [158, 765, 898], "clone": [159, 766, 902], "corr": [161, 678], "count": [162, 278, 346, 679, 770, 839], "describ": [163, 916], "drop": [164, 772], "drop_in_plac": 165, "drop_nul": [166, 363, 472, 773, 920, 1036], "dtype": [167, 774, 974], "equal": [168, 976], "estimated_s": [169, 977], "explod": [170, 420, 474, 600, 776, 982, 1038, 1142], "fill_nan": [172, 422, 778, 985], "fill_nul": [173, 423, 779, 986], "filter": [174, 424, 780, 987], "find_idx_by_nam": 175, "flag": [176, 988], "fold": [177, 699], "frame_equ": 178, "gather_everi": [179, 432, 782, 991], "get_column": [180, 182], "get_column_index": 181, "glimps": 183, "group_bi": [184, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 783, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851], "group_by_dynam": [185, 784], "group_by_rol": [186, 785], "groupbi": [187, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 295, 786, 854], "groupby_dynam": [188, 787], "groupby_rol": [189, 788], "hash_row": 190, "head": [191, 280, 437, 478, 703, 789, 841, 995, 1042], "height": 192, "hstack": 193, "insert_at_idx": 194, "insert_column": 195, "interpol": [196, 441, 791, 999], "is_dupl": [197, 443, 1002], "is_empti": [198, 1003], "is_uniqu": [199, 456, 1020], "item": [200, 1022], "iter_column": 201, "iter_row": 202, "iter_slic": 203, "join": [204, 479, 792, 1043], "join_asof": [205, 793], "lazi": [206, 795], "limit": [207, 462, 796, 1025], "map_row": 208, "max": [209, 283, 323, 483, 511, 712, 799, 844, 877, 936, 1047, 1071], "max_horizont": [210, 713], "mean": [211, 284, 484, 512, 714, 800, 845, 937, 1048, 1072], "mean_horizont": 212, "median": [213, 285, 513, 715, 801, 846, 938, 1073], "melt": [214, 802], "merge_sort": [215, 803], "min": [216, 286, 324, 485, 524, 716, 804, 847, 878, 943, 1049, 1074], "min_horizont": [217, 717], "n_chunk": [218, 1076], "n_uniqu": [219, 287, 528, 718, 848, 1077], "null_count": [220, 540, 805, 1083], "partition_bi": 221, "pipe": [222, 546, 806], "pivot": 223, "product": [224, 549, 1087], "quantil": [225, 288, 551, 720, 808, 849, 1089], "rechunk": [226, 554, 1091], "renam": [227, 809, 1093], "replac": [228, 557, 616, 1094, 1158], "replace_at_idx": 229, "replace_column": 230, "revers": [231, 486, 559, 619, 810, 1050, 1096, 1161], "roll": [232, 562, 811], "row": [233, 234], "rows_by_kei": 235, "sampl": [236, 487, 576, 1051, 1112], "schema": [237, 812, 1189], "select": [238, 298, 725, 750, 813, 857, 1224], "select_seq": [239, 814], "set_sort": [240, 578, 816, 1118], "shape": [241, 1119], "shift": [242, 492, 579, 817, 1056, 1120], "shift_and_fil": [243, 580, 818, 1121], "shrink_to_fit": [244, 1123], "slice": [245, 493, 587, 622, 820, 1057, 1129, 1164], "sort": [246, 494, 588, 821, 1058, 1130], "std": [247, 591, 727, 822, 1132], "sum": [248, 289, 325, 495, 648, 729, 823, 850, 879, 1059, 1191], "sum_horizont": [249, 730], "tail": [250, 290, 496, 649, 731, 824, 851, 1060, 1192], "take_everi": [251, 651, 825, 1194], "to_arrow": [252, 1197], "to_dict": [253, 254], "to_dummi": [255, 1198], "to_init_repr": [256, 1200], "to_numpi": [257, 1202], "to_panda": [258, 1203], "to_seri": 259, "to_struct": [260, 499, 1063], "top_k": [261, 655, 826, 1205], "transpos": 262, "uniqu": [263, 327, 500, 657, 827, 881, 1064, 1206], "unnest": [264, 828, 1190], "unstack": 265, "updat": [266, 829], "upsampl": 267, "var": [268, 661, 735, 830, 1210], "vstack": 269, "width": [270, 831], "with_column": [271, 832], "with_columns_seq": [272, 833], "with_row_count": [273, 835], "__iter__": 274, "agg": [275, 836], "all": [276, 306, 463, 664, 837, 862, 1027], "first": [279, 425, 475, 698, 781, 840, 1039], "last": [281, 459, 480, 707, 794, 842, 1044], "map_group": [282, 711, 843], "attribut": [291, 852, 1214], "comput": [292, 744, 1218], "descript": [293, 853, 1219], "export": [294, 1220], "miscellan": [297, 749, 757, 856, 1223], "manipul": [298, 750, 857, 1224], "data": 299, "type": 299, "numer": [299, 752], "tempor": [299, 755, 1227], "nest": 299, "other": 299, "expr": [302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663], "ab": [302, 860], "add": 303, "agg_group": 304, "alia": [305, 861], "and_": 307, "ani": [308, 464, 666, 863, 1028], "append": [309, 864], "arcco": [312, 866], "arccosh": [313, 867], "arcsin": [314, 868], "arcsinh": [315, 869], "arctan": [316, 870], "arctanh": [317, 871], "arg_max": [318, 465, 872, 1029], "arg_min": [319, 466, 873, 1030], "arg_sort": [320, 874], "arg_tru": [321, 875], "arg_uniqu": [322, 876], "arr": [323, 324, 325, 326, 327, 877, 878, 879, 880, 881], "to_list": [326, 880, 1201], "backward_fil": 328, "bin": [329, 330, 331, 332, 333, 882, 883, 884, 885, 886], "contain": [329, 468, 593, 882, 1032, 1135], "decod": [330, 597, 883, 1139], "encod": [331, 598, 884, 1140], "ends_with": [332, 599, 885, 1141], "starts_with": [333, 626, 886, 1168], "cat": [336, 337, 889, 890, 891, 892, 893, 894], "get_categori": [336, 890], "set_ord": [337, 892], "cbrt": [338, 895], "ceil": [339, 896], "clip": [340, 899], "clip_max": [341, 900], "clip_min": [342, 901], "co": [343, 903], "cosh": [344, 904], "cot": [345, 905], "cum_count": 347, "cum_max": [348, 906], "cum_min": [349, 907], "cum_prod": [350, 908], "cum_sum": [351, 683, 909], "cumcount": 352, "cummax": [353, 910], "cummin": [354, 911], "cumprod": [355, 912], "cumsum": [356, 687, 913], "cumulative_ev": [357, 914], "cut": [358, 915], "degre": 359, "diff": [360, 471, 917, 1035], "dot": [361, 918], "drop_nan": [362, 919], "dt": [364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973], "base_utc_offset": [364, 922], "cast_time_unit": [365, 923], "combin": [366, 924], "convert_time_zon": [367, 925], "dai": [370, 371, 928, 929], "dst_offset": [372, 930], "epoch": [373, 931], "hour": [374, 375, 932, 933], "is_leap_year": [376, 934], "iso_year": [377, 935], "microsecond": [378, 379, 939, 940], "millisecond": [380, 381, 941, 942], "minut": [382, 383, 944, 945], "month": [384, 946], "month_end": [385, 947], "month_start": [386, 948], "nanosecond": [387, 388, 949, 950], "offset_bi": [389, 951], "ordinal_dai": [390, 952], "quarter": [391, 953], "replace_time_zon": [392, 954], "round": [393, 574, 955, 1110], "second": [394, 395, 956, 957], "strftime": [396, 958], "timestamp": [398, 960], "to_str": [399, 961], "total_dai": [400, 962], "total_hour": [401, 963], "total_microsecond": [402, 964], "total_millisecond": [403, 965], "total_minut": [404, 966], "total_nanosecond": [405, 967], "total_second": [406, 968], "truncat": [407, 969], "week": [408, 970], "weekdai": [409, 971], "with_time_unit": [410, 972], "year": [411, 973], "entropi": [412, 975], "eq": [413, 514], "eq_miss": 414, "ewm_mean": [415, 978], "ewm_std": [416, 979], "ewm_var": [417, 980], "exclud": [418, 697], "exp": [419, 981], "extend_const": [421, 984], "flatten": 426, "floor": [427, 989], "floordiv": 428, "forward_fil": 429, "from_json": 430, "gather": [431, 476, 990, 1040], "ge": 433, "get": [434, 477, 1041], "gt": 435, "hash": [436, 994], "hist": [438, 996], "implod": [439, 704, 997], "inspect": [440, 790], "is_between": [442, 1000], "is_finit": [444, 1004], "is_first": [445, 1005], "is_first_distinct": [446, 1006], "is_in": [447, 1008], "is_infinit": [448, 1009], "is_last": [449, 1011], "is_last_distinct": [450, 1012], "is_nan": [451, 1013], "is_not": 452, "is_not_nan": [453, 1014], "is_not_nul": [454, 1015], "is_nul": [455, 1016], "keep_nam": 457, "kurtosi": [458, 1023], "le": 460, "len": [461, 481, 1024, 1045], "count_match": [469, 470, 595, 596, 1033, 1034, 1137, 1138], "eval": [473, 1037], "length": [482, 609, 1046, 1151], "set_differ": [488, 1052], "set_intersect": [489, 1053], "set_symmetric_differ": [490, 1054], "set_union": [491, 1055], "take": [497, 650, 1061, 1193], "to_arrai": [498, 1062], "log": [501, 1065], "log10": [502, 1066], "log1p": [503, 1067], "lower_bound": [504, 1068], "lt": 505, "map": [506, 530, 709, 797], "map_alia": 507, "map_batch": [508, 710, 798], "map_dict": [509, 1069], "map_el": [510, 1070], "meta": [514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 748], "has_multiple_output": 515, "is_regex_project": 516, "ne": [517, 537], "output_nam": 518, "pop": 519, "root_nam": 520, "tree_format": 521, "undo_alias": 522, "mod": 525, "mode": [526, 1075], "mul": 527, "name": [529, 530, 531, 532, 533, 534, 743, 751, 1078], "keep": 529, "prefix": [531, 548], "suffix": [532, 647], "to_lowercas": [533, 638, 1180], "to_uppercas": [534, 641, 1183], "nan_max": [535, 1079], "nan_min": [536, 1080], "ne_miss": 538, "not_": [539, 1082], "or_": 541, "over": 542, "pct_chang": [543, 1084], "peak_max": [544, 1085], "peak_min": [545, 1086], "pow": 547, "qcut": [550, 1088], "radian": 552, "rank": [553, 1090], "reinterpret": [555, 1092], "repeat_bi": 556, "reshap": [558, 1095], "rle": [560, 1097], "rle_id": [561, 1098], "rolling_appli": [563, 1099], "rolling_map": [564, 1100], "rolling_max": [565, 1101], "rolling_mean": [566, 1102], "rolling_median": [567, 1103], "rolling_min": [568, 1104], "rolling_quantil": [569, 1105], "rolling_skew": [570, 1106], "rolling_std": [571, 1107], "rolling_sum": [572, 1108], "rolling_var": [573, 1109], "round_sig_fig": [575, 1111], "search_sort": [577, 1114], "shrink_dtyp": [581, 1122], "shuffl": [582, 1124], "sign": [583, 1125], "sin": [584, 1126], "sinh": [585, 1127], "skew": [586, 1128], "sort_bi": 589, "sqrt": [590, 1131], "str": [592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184], "contains_ani": [594, 1136], "extract": [601, 1143], "extract_al": [602, 1144], "extract_group": [603, 1145], "json_decod": [604, 1146], "json_extract": [605, 1147], "json_path_match": [606, 1148], "len_byt": [607, 1149], "len_char": [608, 1150], "ljust": [610, 1152], "lstrip": [611, 1153], "n_char": [612, 1154], "pad_end": [613, 1155], "pad_start": [614, 1156], "parse_int": [615, 1157], "replace_al": [617, 1159], "replace_mani": [618, 1160], "rjust": [620, 1162], "rstrip": [621, 1163], "split": [623, 1165], "split_exact": [624, 1166], "splitn": [625, 1167], "strip": [627, 1169], "strip_char": [628, 1170], "strip_chars_end": [629, 1171], "strip_chars_start": [630, 1172], "strip_prefix": [631, 1173], "strip_suffix": [632, 1174], "strptime": [633, 1175], "to_dat": [634, 1176], "to_datetim": [635, 1177], "to_decim": [636, 1178], "to_integ": [637, 1179], "to_tim": [639, 1181], "to_titlecas": [640, 1182], "zfill": [642, 1184], "field": [643, 1185, 1186], "json_encod": [644, 1187], "rename_field": [645, 1188], "sub": 646, "tan": [652, 1195], "tanh": [653, 1196], "to_phys": [654, 1204], "truediv": 656, "unique_count": [658, 1207], "upper_bound": [659, 1208], "value_count": [660, 1209], "where": 662, "xor": 663, "all_horizont": 665, "any_horizont": 667, "arang": 670, "arctan2": 671, "arctan2d": 672, "arg_sort_bi": 673, "arg_wher": 674, "coalesc": 675, "concat_list": 676, "concat_str": 677, "cov": 680, "cum_fold": 681, "cum_reduc": 682, "cum_sum_horizont": 684, "cumfold": 685, "cumreduc": 686, "cumsum_horizont": 688, "date_rang": [690, 691], "datetime_rang": [693, 694], "element": 696, "format": 700, "from_epoch": 701, "group": 702, "int_rang": [705, 706], "lit": 708, "ones": 719, "reduc": 721, "repeat": 722, "rolling_corr": 723, "rolling_cov": 724, "sql_expr": 726, "time_rang": [733, 734], "when": 736, "zero": 737, "categori": [741, 1217], "col": 742, "express": 746, "oper": [752, 858], "conjunct": 752, "comparison": 752, "string": [753, 1225], "window": 756, "convers": 757, "parallel": 757, "random": 757, "refer": 758, "input": 759, "output": 759, "feather": 759, "ipc": 759, "parquet": 759, "databas": 759, "json": 759, "avro": 759, "spreadsheet": 759, "apach": 759, "iceberg": 759, "delta": 759, "lake": 759, "dataset": 759, "cach": 763, "collect": 767, "collect_async": 768, "deseri": 771, "explain": 775, "fetch": 777, "profil": [807, 1229], "serial": 815, "show_graph": 819, "with_context": 834, "lazygroupbi": [836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851], "read": 856, "write": 856, "logic": 856, "plan": 856, "selector": 858, "import": 858, "set": [858, 1116], "is_loc": 891, "to_loc": 893, "uses_lexical_ord": 894, "chunk_length": 897, "get_chunk": 992, "has_valid": 993, "inner_dtyp": 998, "is_boolean": 1001, "is_float": 1007, "is_integ": 1010, "is_numer": 1017, "is_sort": 1018, "is_tempor": 1019, "is_utf8": 1021, "new_from_index": 1081, "scatter": 1113, "series_equ": 1115, "set_at_idx": 1117, "to_fram": 1199, "view": 1211, "zip_with": 1212, "sql": 1228, "method": 1228, "assert": 1229, "primit": 1229, "strategi": 1229, "helper": 1229, "util": 1230}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.equals": [[168, "polars-dataframe-equals"]], "polars.DataFrame.get_columns": [[182, "polars-dataframe-get-columns"]], "polars.DataFrame.mean": [[211, "polars-dataframe-mean"]], "polars.DataFrame.median": [[213, "polars-dataframe-median"]], "polars.DataFrame.map_rows": [[208, "polars-dataframe-map-rows"]], "polars.DataFrame.merge_sorted": [[215, "polars-dataframe-merge-sorted"]], "polars.DataFrame.explode": [[170, "polars-dataframe-explode"]], "polars.DataFrame.min": [[216, "polars-dataframe-min"]], "polars.DataFrame.melt": [[214, "polars-dataframe-melt"]], "polars.DataFrame.iter_columns": [[201, "polars-dataframe-iter-columns"]], "polars.DataFrame.item": [[200, "polars-dataframe-item"]], "polars.DataFrame.is_unique": [[199, "polars-dataframe-is-unique"]], "polars.DataFrame.n_chunks": [[218, "polars-dataframe-n-chunks"]], "polars.DataFrame.insert_at_idx": [[194, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.group_by_dynamic": [[185, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.join": [[204, "polars-dataframe-join"]], "polars.DataFrame.lazy": [[206, "polars-dataframe-lazy"]], "polars.DataFrame.hash_rows": [[190, "polars-dataframe-hash-rows"]], "polars.DataFrame.join_asof": [[205, "polars-dataframe-join-asof"]], "polars.DataFrame.drop_nulls": [[166, "polars-dataframe-drop-nulls"]], "polars.DataFrame.drop_in_place": [[165, "polars-dataframe-drop-in-place"]], "polars.DataFrame.fold": [[177, "polars-dataframe-fold"]], "polars.DataFrame.gather_every": [[179, "polars-dataframe-gather-every"]], "polars.DataFrame.group_by_rolling": [[186, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.mean_horizontal": [[212, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.flags": [[176, "polars-dataframe-flags"]], "polars.DataFrame.frame_equal": [[178, "polars-dataframe-frame-equal"]], "polars.DataFrame.get_column_index": [[181, "polars-dataframe-get-column-index"]], "polars.DataFrame.head": [[191, "polars-dataframe-head"]], "polars.DataFrame.fill_null": [[173, "polars-dataframe-fill-null"]], "polars.DataFrame.dtypes": [[167, "polars-dataframe-dtypes"]], "polars.DataFrame.estimated_size": [[169, "polars-dataframe-estimated-size"]], "polars.DataFrame.groupby_rolling": [[189, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.groupby_dynamic": [[188, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.interpolate": [[196, "polars-dataframe-interpolate"]], "polars.DataFrame.n_unique": [[219, "polars-dataframe-n-unique"]], "polars.DataFrame.glimpse": [[183, "polars-dataframe-glimpse"]], "polars.DataFrame.hstack": [[193, "polars-dataframe-hstack"]], "polars.DataFrame.max": [[209, "polars-dataframe-max"]], "polars.DataFrame.find_idx_by_name": [[175, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.get_column": [[180, "polars-dataframe-get-column"]], "polars.DataFrame.fill_nan": [[172, "polars-dataframe-fill-nan"]], "polars.DataFrame.insert_column": [[195, "polars-dataframe-insert-column"]], "polars.DataFrame.limit": [[207, "polars-dataframe-limit"]], "polars.DataFrame.max_horizontal": [[210, "polars-dataframe-max-horizontal"]], "polars.DataFrame.extend": [[171, "polars-dataframe-extend"]], "polars.DataFrame.iter_slices": [[203, "polars-dataframe-iter-slices"]], "polars.DataFrame.min_horizontal": [[217, "polars-dataframe-min-horizontal"]], "polars.DataFrame.filter": [[174, "polars-dataframe-filter"]], "polars.DataFrame.is_empty": [[198, "polars-dataframe-is-empty"]], "polars.DataFrame.is_duplicated": [[197, "polars-dataframe-is-duplicated"]], "polars.DataFrame.height": [[192, "polars-dataframe-height"]], "polars.DataFrame.iter_rows": [[202, "polars-dataframe-iter-rows"]], "polars.DataFrame.groupby": [[187, "polars-dataframe-groupby"]], "polars.DataFrame.group_by": [[184, "polars-dataframe-group-by"]], "polars.testing.parametric.load_profile": [[146, "polars-testing-parametric-load-profile"]], "polars.from_repr": [[111, "polars-from-repr"]], "polars.DataFrame.drop": [[164, "polars-dataframe-drop"]], "polars.read_json": [[124, "polars-read-json"]], "polars.DataFrame.count": [[162, "polars-dataframe-count"]], "polars.read_ipc_stream": [[123, "polars-read-ipc-stream"]], "polars.read_avro": [[114, "polars-read-avro"]], "polars.DataFrame.corr": [[161, "polars-dataframe-corr"]], "polars.read_ipc_schema": [[122, "polars-read-ipc-schema"]], "polars.DataFrame.describe": [[163, "polars-dataframe-describe"]], "polars.read_csv": [[115, "polars-read-csv"]], "polars.scan_iceberg": [[131, "polars-scan-iceberg"]], "polars.DataFrame.approx_n_unique": [[155, "polars-dataframe-approx-n-unique"]], "polars.testing.assert_frame_equal": [[138, "polars-testing-assert-frame-equal"]], "polars.read_parquet_schema": [[128, "polars-read-parquet-schema"]], "polars.threadpool_size": [[149, "polars-threadpool-size"]], "polars.DataFrame.apply": [[154, "polars-dataframe-apply"]], "polars.read_excel": [[120, "polars-read-excel"]], "polars.read_ndjson": [[125, "polars-read-ndjson"]], "polars.DataFrame.cast": [[157, "polars-dataframe-cast"]], "polars.using_string_cache": [[150, "polars-using-string-cache"]], "polars.DataFrame.clear": [[158, "polars-dataframe-clear"]], "polars.scan_pyarrow_dataset": [[135, "polars-scan-pyarrow-dataset"]], "polars.testing.parametric.series": [[147, "polars-testing-parametric-series"]], "polars.read_parquet": [[127, "polars-read-parquet"]], "polars.from_records": [[110, "polars-from-records"]], "polars.scan_csv": [[129, "polars-scan-csv"]], "Config": [[151, "config"]], "Config options": [[151, "config-options"]], "Config load, save, and current state": [[151, "config-load-save-and-current-state"]], "Use as a context manager": [[151, "use-as-a-context-manager"]], "Use as a function decorator": [[151, "use-as-a-function-decorator"]], "polars.read_delta": [[119, "polars-read-delta"]], "polars.set_random_seed": [[136, "polars-set-random-seed"]], "polars.scan_ipc": [[132, "polars-scan-ipc"]], "polars.testing.assert_frame_not_equal": [[139, "polars-testing-assert-frame-not-equal"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[113, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.testing.assert_series_equal": [[140, "polars-testing-assert-series-equal"]], "polars.testing.parametric.dataframes": [[145, "polars-testing-parametric-dataframes"]], "polars.scan_ndjson": [[133, "polars-scan-ndjson"]], "polars.read_csv_batched": [[116, "polars-read-csv-batched"]], "polars.scan_parquet": [[134, "polars-scan-parquet"]], "polars.testing.parametric.set_profile": [[148, "polars-testing-parametric-set-profile"]], "polars.testing.assert_series_not_equal": [[141, "polars-testing-assert-series-not-equal"]], "polars.read_ipc": [[121, "polars-read-ipc"]], "polars.testing.parametric.columns": [[143, "polars-testing-parametric-columns"]], "Aggregation": [[152, "aggregation"], [859, "aggregation"], [760, "aggregation"], [301, "aggregation"]], "polars.testing.parametric.create_list_strategy": [[144, "polars-testing-parametric-create-list-strategy"]], "polars.show_versions": [[137, "polars-show-versions"]], "polars.get_index_type": [[112, "polars-get-index-type"]], "polars.scan_delta": [[130, "polars-scan-delta"]], "polars.read_ods": [[126, "polars-read-ods"]], "polars.testing.parametric.column": [[142, "polars-testing-parametric-column"]], "polars.read_database_uri": [[118, "polars-read-database-uri"]], "polars.DataFrame.__dataframe__": [[153, "polars-dataframe-dataframe"]], "polars.DataFrame.columns": [[160, "polars-dataframe-columns"]], "polars.read_database": [[117, "polars-read-database"]], "polars.DataFrame.bottom_k": [[156, "polars-dataframe-bottom-k"]], "polars.DataFrame.clone": [[159, "polars-dataframe-clone"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.Array": [[2, "polars-array"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Binary": [[3, "polars-binary"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Enum": [[51, "polars-enum"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Date": [[47, "polars-date"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [1229, "examples"], [858, "examples"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.Duration": [[50, "polars-duration"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "Index": [[0, "index"]], "polars.Float64": [[53, "polars-float64"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Int16": [[54, "polars-int16"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Float32": [[52, "polars-float32"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.Series.str.split": [[1165, "polars-series-str-split"]], "polars.Series.struct.field": [[1185, "polars-series-struct-field"]], "polars.Series.struct.schema": [[1189, "polars-series-struct-schema"]], "polars.Series.tanh": [[1196, "polars-series-tanh"]], "polars.Series.str.starts_with": [[1168, "polars-series-str-starts-with"]], "polars.Series.struct.fields": [[1186, "polars-series-struct-fields"]], "polars.Series.take_every": [[1194, "polars-series-take-every"]], "polars.Series.str.replace_all": [[1159, "polars-series-str-replace-all"]], "polars.Series.str.to_lowercase": [[1180, "polars-series-str-to-lowercase"]], "polars.Series.str.to_uppercase": [[1183, "polars-series-str-to-uppercase"]], "polars.Series.str.to_datetime": [[1177, "polars-series-str-to-datetime"]], "polars.Series.unique_counts": [[1207, "polars-series-unique-counts"]], "polars.Series.str.to_titlecase": [[1182, "polars-series-str-to-titlecase"]], "polars.Series.str.to_time": [[1181, "polars-series-str-to-time"]], "polars.Series.tan": [[1195, "polars-series-tan"]], "polars.Series.struct.unnest": [[1190, "polars-series-struct-unnest"]], "polars.Series.to_numpy": [[1202, "polars-series-to-numpy"]], "polars.Series.top_k": [[1205, "polars-series-top-k"]], "polars.Series.value_counts": [[1209, "polars-series-value-counts"]], "polars.Series.str.rstrip": [[1163, "polars-series-str-rstrip"]], "polars.Series.str.slice": [[1164, "polars-series-str-slice"]], "polars.Series.tail": [[1192, "polars-series-tail"]], "polars.Series.take": [[1193, "polars-series-take"]], "polars.Series.unique": [[1206, "polars-series-unique"]], "polars.Series.str.to_decimal": [[1178, "polars-series-str-to-decimal"]], "polars.Series.str.replace": [[1158, "polars-series-str-replace"]], "polars.Series.str.strip_chars_end": [[1171, "polars-series-str-strip-chars-end"]], "polars.Series.str.replace_many": [[1160, "polars-series-str-replace-many"]], "polars.Series.to_list": [[1201, "polars-series-to-list"]], "polars.Series.struct.json_encode": [[1187, "polars-series-struct-json-encode"]], "polars.Series.to_frame": [[1199, "polars-series-to-frame"]], "polars.Series.to_arrow": [[1197, "polars-series-to-arrow"]], "polars.Series.str.strip_chars": [[1170, "polars-series-str-strip-chars"]], "polars.Series.str.parse_int": [[1157, "polars-series-str-parse-int"]], "polars.Series.to_dummies": [[1198, "polars-series-to-dummies"]], "polars.Series.to_pandas": [[1203, "polars-series-to-pandas"]], "polars.Series.str.strip": [[1169, "polars-series-str-strip"]], "polars.Series.str.to_date": [[1176, "polars-series-str-to-date"]], "polars.Series.str.to_integer": [[1179, "polars-series-str-to-integer"]], "polars.Series.to_init_repr": [[1200, "polars-series-to-init-repr"]], "polars.Series.str.splitn": [[1167, "polars-series-str-splitn"]], "polars.Series.struct.rename_fields": [[1188, "polars-series-struct-rename-fields"]], "polars.Series.str.reverse": [[1161, "polars-series-str-reverse"]], "polars.Series.sum": [[1191, "polars-series-sum"]], "polars.Series.str.strip_prefix": [[1173, "polars-series-str-strip-prefix"]], "polars.Series.str.strip_suffix": [[1174, "polars-series-str-strip-suffix"]], "polars.Series.str.strip_chars_start": [[1172, "polars-series-str-strip-chars-start"]], "polars.Series.str.rjust": [[1162, "polars-series-str-rjust"]], "polars.Series.str.zfill": [[1184, "polars-series-str-zfill"]], "polars.Series.str.split_exact": [[1166, "polars-series-str-split-exact"]], "polars.Series.str.pad_start": [[1156, "polars-series-str-pad-start"]], "polars.Series.to_physical": [[1204, "polars-series-to-physical"]], "polars.Series.upper_bound": [[1208, "polars-series-upper-bound"]], "polars.Series.str.pad_end": [[1155, "polars-series-str-pad-end"]], "polars.Series.str.strptime": [[1175, "polars-series-str-strptime"]], "polars.align_frames": [[79, "polars-align-frames"]], "polars.build_info": [[84, "polars-build-info"]], "polars.enable_string_cache": [[89, "polars-enable-string-cache"]], "polars.StringCache": [[70, "polars-stringcache"]], "polars.disable_string_cache": [[88, "polars-disable-string-cache"]], "polars.UInt32": [[74, "polars-uint32"]], "polars.LazyFrame.sink_csv": [[58, "polars-lazyframe-sink-csv"]], "polars.Null": [[62, "polars-null"]], "polars.exceptions.RowsError": [[98, "polars-exceptions-rowserror"]], "polars.List": [[61, "polars-list"]], "polars.api.register_expr_namespace": [[81, "polars-api-register-expr-namespace"]], "polars.Int64": [[56, "polars-int64"]], "polars.exceptions.InvalidOperationError": [[94, "polars-exceptions-invalidoperationerror"]], "polars.UInt8": [[76, "polars-uint8"]], "polars.UInt16": [[73, "polars-uint16"]], "polars.exceptions.ColumnNotFoundError": [[91, "polars-exceptions-columnnotfounderror"]], "polars.api.register_dataframe_namespace": [[80, "polars-api-register-dataframe-namespace"]], "polars.api.register_lazyframe_namespace": [[82, "polars-api-register-lazyframe-namespace"]], "polars.Utf8": [[78, "polars-utf8"]], "polars.concat": [[87, "polars-concat"]], "polars.LazyFrame.sink_parquet": [[60, "polars-lazyframe-sink-parquet"]], "polars.from_dataframe": [[105, "polars-from-dataframe"]], "polars.Object": [[63, "polars-object"]], "polars.SQLContext.execute": [[64, "polars-sqlcontext-execute"]], "polars.Int8": [[57, "polars-int8"]], "polars.SQLContext.register": [[65, "polars-sqlcontext-register"]], "polars.exceptions.TooManyRowsReturnedError": [[103, "polars-exceptions-toomanyrowsreturnederror"]], "polars.exceptions.DuplicateError": [[93, "polars-exceptions-duplicateerror"]], "polars.exceptions.NoRowsReturnedError": [[96, "polars-exceptions-norowsreturnederror"]], "polars.from_arrow": [[104, "polars-from-arrow"]], "polars.exceptions.ArrowError": [[90, "polars-exceptions-arrowerror"]], "polars.SQLContext.register_globals": [[66, "polars-sqlcontext-register-globals"]], "polars.exceptions.ComputeError": [[92, "polars-exceptions-computeerror"]], "polars.exceptions.StructFieldNotFoundError": [[102, "polars-exceptions-structfieldnotfounderror"]], "polars.LazyFrame.sink_ipc": [[59, "polars-lazyframe-sink-ipc"]], "polars.exceptions.SchemaError": [[99, "polars-exceptions-schemaerror"]], "polars.from_numpy": [[108, "polars-from-numpy"]], "polars.Time": [[72, "polars-time"]], "polars.from_dicts": [[107, "polars-from-dicts"]], "polars.UInt64": [[75, "polars-uint64"]], "polars.exceptions.PolarsPanicError": [[97, "polars-exceptions-polarspanicerror"]], "polars.collect_all_async": [[86, "polars-collect-all-async"]], "polars.from_dict": [[106, "polars-from-dict"]], "polars.collect_all": [[85, "polars-collect-all"]], "polars.SQLContext.register_many": [[67, "polars-sqlcontext-register-many"]], "polars.exceptions.NoDataError": [[95, "polars-exceptions-nodataerror"]], "polars.SQLContext.tables": [[68, "polars-sqlcontext-tables"]], "polars.Int32": [[55, "polars-int32"]], "polars.SQLContext.unregister": [[69, "polars-sqlcontext-unregister"]], "polars.exceptions.ShapeError": [[101, "polars-exceptions-shapeerror"]], "polars.exceptions.SchemaFieldNotFoundError": [[100, "polars-exceptions-schemafieldnotfounderror"]], "polars.from_pandas": [[109, "polars-from-pandas"]], "polars.Unknown": [[77, "polars-unknown"]], "polars.api.register_series_namespace": [[83, "polars-api-register-series-namespace"]], "polars.Struct": [[71, "polars-struct"]], "polars.Series.sort": [[1130, "polars-series-sort"]], "polars.Series.str.count_matches": [[1138, "polars-series-str-count-matches"]], "polars.Series.str": [[1133, "polars-series-str"]], "polars.Series.shrink_to_fit": [[1123, "polars-series-shrink-to-fit"]], "polars.Series.str.contains": [[1135, "polars-series-str-contains"]], "polars.Series.str.json_decode": [[1146, "polars-series-str-json-decode"]], "polars.Series.set_at_idx": [[1117, "polars-series-set-at-idx"]], "polars.Series.rolling_median": [[1103, "polars-series-rolling-median"]], "polars.Series.str.extract_all": [[1144, "polars-series-str-extract-all"]], "polars.Series.str.lstrip": [[1153, "polars-series-str-lstrip"]], "polars.Series.sqrt": [[1131, "polars-series-sqrt"]], "polars.Series.str.decode": [[1139, "polars-series-str-decode"]], "polars.Series.shrink_dtype": [[1122, "polars-series-shrink-dtype"]], "polars.Series.shape": [[1119, "polars-series-shape"]], "polars.Series.str.len_bytes": [[1149, "polars-series-str-len-bytes"]], "polars.Series.str.count_match": [[1137, "polars-series-str-count-match"]], "polars.Series.str.ends_with": [[1141, "polars-series-str-ends-with"]], "polars.Series.rolling_min": [[1104, "polars-series-rolling-min"]], "polars.Series.str.lengths": [[1151, "polars-series-str-lengths"]], "polars.Series.str.contains_any": [[1136, "polars-series-str-contains-any"]], "polars.Series.sin": [[1126, "polars-series-sin"]], "polars.Series.slice": [[1129, "polars-series-slice"]], "polars.Series.set_sorted": [[1118, "polars-series-set-sorted"]], "polars.Series.str.ljust": [[1152, "polars-series-str-ljust"]], "polars.Series.sinh": [[1127, "polars-series-sinh"]], "polars.Series.str.n_chars": [[1154, "polars-series-str-n-chars"]], "polars.Series.shuffle": [[1124, "polars-series-shuffle"]], "polars.Series.str.json_path_match": [[1148, "polars-series-str-json-path-match"]], "polars.Series.rolling_map": [[1100, "polars-series-rolling-map"]], "polars.Series.skew": [[1128, "polars-series-skew"]], "polars.Series.rolling_mean": [[1102, "polars-series-rolling-mean"]], "polars.Series.series_equal": [[1115, "polars-series-series-equal"]], "polars.Series.sign": [[1125, "polars-series-sign"]], "polars.Series.rolling_max": [[1101, "polars-series-rolling-max"]], "polars.Series.str.json_extract": [[1147, "polars-series-str-json-extract"]], "polars.Series.rolling_std": [[1107, "polars-series-rolling-std"]], "polars.Series.scatter": [[1113, "polars-series-scatter"]], "polars.Series.str.explode": [[1142, "polars-series-str-explode"]], "polars.Series.shift": [[1120, "polars-series-shift"]], "polars.Series.rolling_quantile": [[1105, "polars-series-rolling-quantile"]], "polars.Series.str.extract": [[1143, "polars-series-str-extract"]], "polars.Series.str.extract_groups": [[1145, "polars-series-str-extract-groups"]], "polars.Series.rolling_skew": [[1106, "polars-series-rolling-skew"]], "polars.Series.std": [[1132, "polars-series-std"]], "polars.Series.shift_and_fill": [[1121, "polars-series-shift-and-fill"]], "polars.Series.str.encode": [[1140, "polars-series-str-encode"]], "polars.Series.sample": [[1112, "polars-series-sample"]], "polars.Series.str.concat": [[1134, "polars-series-str-concat"]], "polars.Series.rolling_sum": [[1108, "polars-series-rolling-sum"]], "polars.Series.search_sorted": [[1114, "polars-series-search-sorted"]], "polars.Series.set": [[1116, "polars-series-set"]], "polars.Series.str.len_chars": [[1150, "polars-series-str-len-chars"]], "polars.Series.round": [[1110, "polars-series-round"]], "polars.Series.round_sig_figs": [[1111, "polars-series-round-sig-figs"]], "polars.Series.rolling_var": [[1109, "polars-series-rolling-var"]], "polars.Series.list.sample": [[1051, "polars-series-list-sample"]], "polars.Series.n_chunks": [[1076, "polars-series-n-chunks"]], "polars.Series.median": [[1073, "polars-series-median"]], "polars.Series.nan_max": [[1079, "polars-series-nan-max"]], "polars.Series.mode": [[1075, "polars-series-mode"]], "polars.Series.list.lengths": [[1046, "polars-series-list-lengths"]], "polars.Series.list.slice": [[1057, "polars-series-list-slice"]], "polars.Series.not_": [[1082, "polars-series-not"]], "polars.Series.mean": [[1072, "polars-series-mean"]], "polars.Series.pct_change": [[1084, "polars-series-pct-change"]], "polars.Series.list.tail": [[1060, "polars-series-list-tail"]], "polars.Series.quantile": [[1089, "polars-series-quantile"]], "polars.Series.list.min": [[1049, "polars-series-list-min"]], "polars.Series.list.set_difference": [[1052, "polars-series-list-set-difference"]], "polars.Series.list.unique": [[1064, "polars-series-list-unique"]], "polars.Series.map_dict": [[1069, "polars-series-map-dict"]], "polars.Series.replace": [[1094, "polars-series-replace"]], "polars.Series.reshape": [[1095, "polars-series-reshape"]], "polars.Series.list.len": [[1045, "polars-series-list-len"]], "polars.Series.reinterpret": [[1092, "polars-series-reinterpret"]], "polars.Series.log10": [[1066, "polars-series-log10"]], "polars.Series.min": [[1074, "polars-series-min"]], "polars.Series.product": [[1087, "polars-series-product"]], "polars.Series.list.reverse": [[1050, "polars-series-list-reverse"]], "polars.Series.list.shift": [[1056, "polars-series-list-shift"]], "polars.Series.name": [[1078, "polars-series-name"]], "polars.Series.nan_min": [[1080, "polars-series-nan-min"]], "polars.Series.peak_max": [[1085, "polars-series-peak-max"]], "polars.Series.reverse": [[1096, "polars-series-reverse"]], "polars.Series.log": [[1065, "polars-series-log"]], "polars.Series.list.sum": [[1059, "polars-series-list-sum"]], "polars.Series.n_unique": [[1077, "polars-series-n-unique"]], "polars.Series.list.set_intersection": [[1053, "polars-series-list-set-intersection"]], "polars.Series.lower_bound": [[1068, "polars-series-lower-bound"]], "polars.Series.new_from_index": [[1081, "polars-series-new-from-index"]], "polars.Series.list.set_symmetric_difference": [[1054, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.sort": [[1058, "polars-series-list-sort"]], "polars.Series.list.to_array": [[1062, "polars-series-list-to-array"]], "polars.Series.rechunk": [[1091, "polars-series-rechunk"]], "polars.Series.max": [[1071, "polars-series-max"]], "polars.Series.list.mean": [[1048, "polars-series-list-mean"]], "polars.Series.qcut": [[1088, "polars-series-qcut"]], "polars.Series.rename": [[1093, "polars-series-rename"]], "polars.Series.rle": [[1097, "polars-series-rle"]], "polars.Series.rank": [[1090, "polars-series-rank"]], "polars.Series.rolling_apply": [[1099, "polars-series-rolling-apply"]], "polars.Series.log1p": [[1067, "polars-series-log1p"]], "polars.Series.null_count": [[1083, "polars-series-null-count"]], "polars.Series.list.set_union": [[1055, "polars-series-list-set-union"]], "polars.Series.peak_min": [[1086, "polars-series-peak-min"]], "polars.Series.map_elements": [[1070, "polars-series-map-elements"]], "polars.Series.rle_id": [[1098, "polars-series-rle-id"]], "polars.Series.list.take": [[1061, "polars-series-list-take"]], "polars.Series.list.to_struct": [[1063, "polars-series-list-to-struct"]], "polars.Series.list.max": [[1047, "polars-series-list-max"]], "polars.Series.is_not_null": [[1015, "polars-series-is-not-null"]], "polars.Series.gather_every": [[991, "polars-series-gather-every"]], "polars.Series.list.concat": [[1031, "polars-series-list-concat"]], "polars.Series.is_first_distinct": [[1006, "polars-series-is-first-distinct"]], "polars.Series.list.eval": [[1037, "polars-series-list-eval"]], "polars.Series.list.head": [[1042, "polars-series-list-head"]], "polars.Series.list.count_matches": [[1034, "polars-series-list-count-matches"]], "polars.Series.list.join": [[1043, "polars-series-list-join"]], "polars.Series.is_integer": [[1010, "polars-series-is-integer"]], "polars.Series.is_finite": [[1004, "polars-series-is-finite"]], "polars.Series.is_temporal": [[1019, "polars-series-is-temporal"]], "polars.Series.has_validity": [[993, "polars-series-has-validity"]], "polars.Series.list.drop_nulls": [[1036, "polars-series-list-drop-nulls"]], "polars.Series.kurtosis": [[1023, "polars-series-kurtosis"]], "polars.Series.is_utf8": [[1021, "polars-series-is-utf8"]], "polars.Series.list.first": [[1039, "polars-series-list-first"]], "polars.Series.head": [[995, "polars-series-head"]], "polars.Series.list.count_match": [[1033, "polars-series-list-count-match"]], "polars.Series.list.all": [[1027, "polars-series-list-all"]], "polars.Series.is_duplicated": [[1002, "polars-series-is-duplicated"]], "polars.Series.is_empty": [[1003, "polars-series-is-empty"]], "polars.Series.list.last": [[1044, "polars-series-list-last"]], "polars.Series.get_chunks": [[992, "polars-series-get-chunks"]], "polars.Series.is_between": [[1000, "polars-series-is-between"]], "polars.Series.is_float": [[1007, "polars-series-is-float"]], "polars.Series.is_last_distinct": [[1012, "polars-series-is-last-distinct"]], "polars.Series.interpolate": [[999, "polars-series-interpolate"]], "polars.Series.inner_dtype": [[998, "polars-series-inner-dtype"]], "polars.Series.list.explode": [[1038, "polars-series-list-explode"]], "polars.Series.gather": [[990, "polars-series-gather"]], "polars.Series.list.any": [[1028, "polars-series-list-any"]], "polars.Series.list.arg_max": [[1029, "polars-series-list-arg-max"]], "polars.Series.is_sorted": [[1018, "polars-series-is-sorted"]], "polars.Series.implode": [[997, "polars-series-implode"]], "polars.Series.is_boolean": [[1001, "polars-series-is-boolean"]], "polars.Series.is_in": [[1008, "polars-series-is-in"]], "polars.Series.list.diff": [[1035, "polars-series-list-diff"]], "polars.Series.is_unique": [[1020, "polars-series-is-unique"]], "polars.Series.is_last": [[1011, "polars-series-is-last"]], "polars.Series.list": [[1026, "polars-series-list"]], "polars.Series.is_first": [[1005, "polars-series-is-first"]], "polars.Series.limit": [[1025, "polars-series-limit"]], "polars.Series.list.arg_min": [[1030, "polars-series-list-arg-min"]], "polars.Series.len": [[1024, "polars-series-len"]], "polars.Series.hist": [[996, "polars-series-hist"]], "polars.Series.item": [[1022, "polars-series-item"]], "polars.Series.is_numeric": [[1017, "polars-series-is-numeric"]], "polars.Series.list.get": [[1041, "polars-series-list-get"]], "polars.Series.is_null": [[1016, "polars-series-is-null"]], "polars.Series.is_infinite": [[1009, "polars-series-is-infinite"]], "polars.Series.list.contains": [[1032, "polars-series-list-contains"]], "polars.Series.is_nan": [[1013, "polars-series-is-nan"]], "polars.Series.list.gather": [[1040, "polars-series-list-gather"]], "polars.Series.hash": [[994, "polars-series-hash"]], "polars.Series.is_not_nan": [[1014, "polars-series-is-not-nan"]], "polars.Series.extend": [[983, "polars-series-extend"]], "polars.Series.fill_null": [[986, "polars-series-fill-null"]], "polars.Series.dt.nanosecond": [[949, "polars-series-dt-nanosecond"]], "polars.Series.dt.total_microseconds": [[964, "polars-series-dt-total-microseconds"]], "polars.Series.dt.second": [[956, "polars-series-dt-second"]], "polars.Series.explode": [[982, "polars-series-explode"]], "polars.Series.fill_nan": [[985, "polars-series-fill-nan"]], "polars.Series.dt.microseconds": [[940, "polars-series-dt-microseconds"]], "polars.Series.dt.total_nanoseconds": [[967, "polars-series-dt-total-nanoseconds"]], "polars.Series.dt.iso_year": [[935, "polars-series-dt-iso-year"]], "polars.Series.dt.median": [[938, "polars-series-dt-median"]], "polars.Series.dt.month": [[946, "polars-series-dt-month"]], "polars.Series.dt.microsecond": [[939, "polars-series-dt-microsecond"]], "polars.Series.dt.round": [[955, "polars-series-dt-round"]], "polars.Series.dt.weekday": [[971, "polars-series-dt-weekday"]], "polars.Series.dt.month_start": [[948, "polars-series-dt-month-start"]], "polars.Series.estimated_size": [[977, "polars-series-estimated-size"]], "polars.Series.ewm_var": [[980, "polars-series-ewm-var"]], "polars.Series.dt.truncate": [[969, "polars-series-dt-truncate"]], "polars.Series.filter": [[987, "polars-series-filter"]], "polars.Series.dt.total_seconds": [[968, "polars-series-dt-total-seconds"]], "polars.Series.dt.mean": [[937, "polars-series-dt-mean"]], "polars.Series.dt.with_time_unit": [[972, "polars-series-dt-with-time-unit"]], "polars.Series.dt.nanoseconds": [[950, "polars-series-dt-nanoseconds"]], "polars.Series.exp": [[981, "polars-series-exp"]], "polars.Series.dt.max": [[936, "polars-series-dt-max"]], "polars.Series.dt.replace_time_zone": [[954, "polars-series-dt-replace-time-zone"]], "polars.Series.dt.seconds": [[957, "polars-series-dt-seconds"]], "polars.Series.dt.timestamp": [[960, "polars-series-dt-timestamp"]], "polars.Series.extend_constant": [[984, "polars-series-extend-constant"]], "polars.Series.dt.total_milliseconds": [[965, "polars-series-dt-total-milliseconds"]], "polars.Series.ewm_mean": [[978, "polars-series-ewm-mean"]], "polars.Series.entropy": [[975, "polars-series-entropy"]], "polars.Series.dtype": [[974, "polars-series-dtype"]], "polars.Series.equals": [[976, "polars-series-equals"]], "polars.Series.dt.milliseconds": [[942, "polars-series-dt-milliseconds"]], "polars.Series.dt.to_string": [[961, "polars-series-dt-to-string"]], "polars.Series.flags": [[988, "polars-series-flags"]], "polars.Series.dt.year": [[973, "polars-series-dt-year"]], "polars.Series.dt.ordinal_day": [[952, "polars-series-dt-ordinal-day"]], "polars.Series.dt.month_end": [[947, "polars-series-dt-month-end"]], "polars.Series.dt.quarter": [[953, "polars-series-dt-quarter"]], "polars.Series.dt.total_hours": [[963, "polars-series-dt-total-hours"]], "polars.Series.dt.time": [[959, "polars-series-dt-time"]], "polars.Series.dt.minute": [[944, "polars-series-dt-minute"]], "polars.Series.dt.min": [[943, "polars-series-dt-min"]], "polars.Series.ewm_std": [[979, "polars-series-ewm-std"]], "polars.Series.dt.strftime": [[958, "polars-series-dt-strftime"]], "polars.Series.dt.total_days": [[962, "polars-series-dt-total-days"]], "polars.Series.floor": [[989, "polars-series-floor"]], "polars.Series.dt.millisecond": [[941, "polars-series-dt-millisecond"]], "polars.Series.dt.total_minutes": [[966, "polars-series-dt-total-minutes"]], "polars.Series.dt.week": [[970, "polars-series-dt-week"]], "polars.Series.dt.minutes": [[945, "polars-series-dt-minutes"]], "polars.Series.dt.offset_by": [[951, "polars-series-dt-offset-by"]], "polars.Series.dt.cast_time_unit": [[923, "polars-series-dt-cast-time-unit"]], "polars.Series.bottom_k": [[887, "polars-series-bottom-k"]], "polars.Series.ceil": [[896, "polars-series-ceil"]], "polars.Series.describe": [[916, "polars-series-describe"]], "polars.Series.clip": [[899, "polars-series-clip"]], "polars.Series.cat": [[889, "polars-series-cat"]], "polars.Series.cast": [[888, "polars-series-cast"]], "polars.Series.cummax": [[910, "polars-series-cummax"]], "polars.Series.bin.ends_with": [[885, "polars-series-bin-ends-with"]], "polars.Series.cbrt": [[895, "polars-series-cbrt"]], "polars.Series.cat.uses_lexical_ordering": [[894, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.cot": [[905, "polars-series-cot"]], "polars.Series.cumulative_eval": [[914, "polars-series-cumulative-eval"]], "polars.Series.dt.is_leap_year": [[934, "polars-series-dt-is-leap-year"]], "polars.Series.cat.to_local": [[893, "polars-series-cat-to-local"]], "polars.Series.cos": [[903, "polars-series-cos"]], "polars.Series.cum_max": [[906, "polars-series-cum-max"]], "polars.Series.cum_min": [[907, "polars-series-cum-min"]], "polars.Series.dt.days": [[929, "polars-series-dt-days"]], "polars.Series.cum_prod": [[908, "polars-series-cum-prod"]], "polars.Series.dt.convert_time_zone": [[925, "polars-series-dt-convert-time-zone"]], "polars.Series.bin.encode": [[884, "polars-series-bin-encode"]], "polars.Series.clear": [[898, "polars-series-clear"]], "polars.Series.clip_max": [[900, "polars-series-clip-max"]], "polars.Series.arr.to_list": [[880, "polars-series-arr-to-list"]], "polars.Series.dt.date": [[926, "polars-series-dt-date"]], "polars.Series.clone": [[902, "polars-series-clone"]], "polars.Series.cumprod": [[912, "polars-series-cumprod"]], "polars.Series.cat.set_ordering": [[892, "polars-series-cat-set-ordering"]], "polars.Series.dt.hour": [[932, "polars-series-dt-hour"]], "polars.Series.bin.decode": [[883, "polars-series-bin-decode"]], "polars.Series.drop_nulls": [[920, "polars-series-drop-nulls"]], "polars.Series.cosh": [[904, "polars-series-cosh"]], "polars.Series.dt.combine": [[924, "polars-series-dt-combine"]], "polars.Series.dt.day": [[928, "polars-series-dt-day"]], "polars.Series.arr.unique": [[881, "polars-series-arr-unique"]], "polars.Series.bin.starts_with": [[886, "polars-series-bin-starts-with"]], "polars.Series.cum_sum": [[909, "polars-series-cum-sum"]], "polars.Series.dt.datetime": [[927, "polars-series-dt-datetime"]], "polars.Series.cummin": [[911, "polars-series-cummin"]], "polars.Series.dt.hours": [[933, "polars-series-dt-hours"]], "polars.Series.dt": [[921, "polars-series-dt"]], "polars.Series.chunk_lengths": [[897, "polars-series-chunk-lengths"]], "polars.Series.dt.dst_offset": [[930, "polars-series-dt-dst-offset"]], "polars.Series.cat.get_categories": [[890, "polars-series-cat-get-categories"]], "polars.Series.dt.epoch": [[931, "polars-series-dt-epoch"]], "polars.Series.clip_min": [[901, "polars-series-clip-min"]], "polars.Series.drop_nans": [[919, "polars-series-drop-nans"]], "polars.Series.cumsum": [[913, "polars-series-cumsum"]], "polars.Series.dot": [[918, "polars-series-dot"]], "polars.Series.cut": [[915, "polars-series-cut"]], "polars.Series.cat.is_local": [[891, "polars-series-cat-is-local"]], "polars.Series.bin.contains": [[882, "polars-series-bin-contains"]], "polars.Series.dt.base_utc_offset": [[922, "polars-series-dt-base-utc-offset"]], "polars.Series.diff": [[917, "polars-series-diff"]], "polars.LazyFrame.map_batches": [[798, "polars-lazyframe-map-batches"]], "polars.LazyFrame.serialize": [[815, "polars-lazyframe-serialize"]], "polars.LazyFrame.filter": [[780, "polars-lazyframe-filter"]], "polars.LazyFrame.quantile": [[808, "polars-lazyframe-quantile"]], "polars.LazyFrame.rename": [[809, "polars-lazyframe-rename"]], "polars.LazyFrame.limit": [[796, "polars-lazyframe-limit"]], "polars.LazyFrame.slice": [[820, "polars-lazyframe-slice"]], "polars.LazyFrame.merge_sorted": [[803, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.groupby": [[786, "polars-lazyframe-groupby"]], "polars.LazyFrame.groupby_rolling": [[788, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.std": [[822, "polars-lazyframe-std"]], "polars.LazyFrame.sort": [[821, "polars-lazyframe-sort"]], "polars.LazyFrame.lazy": [[795, "polars-lazyframe-lazy"]], "polars.LazyFrame.mean": [[800, "polars-lazyframe-mean"]], "polars.LazyFrame.select": [[813, "polars-lazyframe-select"]], "polars.LazyFrame.join_asof": [[793, "polars-lazyframe-join-asof"]], "polars.LazyFrame.fill_nan": [[778, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.map": [[797, "polars-lazyframe-map"]], "polars.LazyFrame.profile": [[807, "polars-lazyframe-profile"]], "polars.LazyFrame.select_seq": [[814, "polars-lazyframe-select-seq"]], "polars.LazyFrame.group_by_dynamic": [[784, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.set_sorted": [[816, "polars-lazyframe-set-sorted"]], "polars.LazyFrame.explode": [[776, "polars-lazyframe-explode"]], "polars.LazyFrame.group_by": [[783, "polars-lazyframe-group-by"]], "polars.LazyFrame.reverse": [[810, "polars-lazyframe-reverse"]], "polars.LazyFrame.rolling": [[811, "polars-lazyframe-rolling"]], "polars.LazyFrame.last": [[794, "polars-lazyframe-last"]], "polars.LazyFrame.interpolate": [[791, "polars-lazyframe-interpolate"]], "polars.LazyFrame.melt": [[802, "polars-lazyframe-melt"]], "polars.LazyFrame.group_by_rolling": [[785, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.median": [[801, "polars-lazyframe-median"]], "polars.LazyFrame.schema": [[812, "polars-lazyframe-schema"]], "polars.LazyFrame.first": [[781, "polars-lazyframe-first"]], "polars.LazyFrame.show_graph": [[819, "polars-lazyframe-show-graph"]], "polars.LazyFrame.drop_nulls": [[773, "polars-lazyframe-drop-nulls"]], "polars.LazyFrame.null_count": [[805, "polars-lazyframe-null-count"]], "polars.LazyFrame.dtypes": [[774, "polars-lazyframe-dtypes"]], "polars.LazyFrame.drop": [[772, "polars-lazyframe-drop"]], "polars.LazyFrame.join": [[792, "polars-lazyframe-join"]], "polars.LazyFrame.shift_and_fill": [[818, "polars-lazyframe-shift-and-fill"]], "polars.LazyFrame.max": [[799, "polars-lazyframe-max"]], "polars.LazyFrame.inspect": [[790, "polars-lazyframe-inspect"]], "polars.LazyFrame.min": [[804, "polars-lazyframe-min"]], "polars.LazyFrame.fetch": [[777, "polars-lazyframe-fetch"]], "polars.LazyFrame.fill_null": [[779, "polars-lazyframe-fill-null"]], "polars.LazyFrame.explain": [[775, "polars-lazyframe-explain"]], "polars.LazyFrame.head": [[789, "polars-lazyframe-head"]], "polars.LazyFrame.shift": [[817, "polars-lazyframe-shift"]], "polars.LazyFrame.gather_every": [[782, "polars-lazyframe-gather-every"]], "polars.LazyFrame.deserialize": [[771, "polars-lazyframe-deserialize"]], "polars.LazyFrame.pipe": [[806, "polars-lazyframe-pipe"]], "polars.LazyFrame.tail": [[824, "polars-lazyframe-tail"]], "polars.LazyFrame.sum": [[823, "polars-lazyframe-sum"]], "polars.LazyFrame.count": [[770, "polars-lazyframe-count"]], "polars.LazyFrame.groupby_dynamic": [[787, "polars-lazyframe-groupby-dynamic"]], "polars.any": [[666, "polars-any"]], "polars.map_batches": [[710, "polars-map-batches"]], "polars.cumsum_horizontal": [[688, "polars-cumsum-horizontal"]], "polars.cov": [[680, "polars-cov"]], "polars.fold": [[699, "polars-fold"]], "polars.max_horizontal": [[713, "polars-max-horizontal"]], "polars.int_ranges": [[706, "polars-int-ranges"]], "polars.format": [[700, "polars-format"]], "polars.arctan2": [[671, "polars-arctan2"]], "polars.cum_sum": [[683, "polars-cum-sum"]], "polars.Expr.value_counts": [[660, "polars-expr-value-counts"]], "polars.approx_n_unique": [[669, "polars-approx-n-unique"]], "polars.first": [[698, "polars-first"]], "polars.arctan2d": [[672, "polars-arctan2d"]], "polars.cum_reduce": [[682, "polars-cum-reduce"]], "polars.Expr.xor": [[663, "polars-expr-xor"]], "polars.cumfold": [[685, "polars-cumfold"]], "polars.arg_sort_by": [[673, "polars-arg-sort-by"]], "polars.lit": [[708, "polars-lit"]], "polars.arg_where": [[674, "polars-arg-where"]], "polars.concat_str": [[677, "polars-concat-str"]], "polars.datetime": [[692, "polars-datetime"]], "polars.cumreduce": [[686, "polars-cumreduce"]], "polars.corr": [[678, "polars-corr"]], "polars.duration": [[695, "polars-duration"]], "polars.max": [[712, "polars-max"]], "polars.date": [[689, "polars-date"]], "polars.exclude": [[697, "polars-exclude"]], "polars.groups": [[702, "polars-groups"]], "polars.Expr.where": [[662, "polars-expr-where"]], "polars.arange": [[670, "polars-arange"]], "polars.coalesce": [[675, "polars-coalesce"]], "polars.cum_fold": [[681, "polars-cum-fold"]], "polars.count": [[679, "polars-count"]], "polars.implode": [[704, "polars-implode"]], "polars.int_range": [[705, "polars-int-range"]], "polars.element": [[696, "polars-element"]], "polars.all": [[664, "polars-all"]], "polars.head": [[703, "polars-head"]], "polars.all_horizontal": [[665, "polars-all-horizontal"]], "polars.last": [[707, "polars-last"]], "polars.apply": [[668, "polars-apply"]], "polars.concat_list": [[676, "polars-concat-list"]], "polars.cum_sum_horizontal": [[684, "polars-cum-sum-horizontal"]], "polars.date_range": [[690, "polars-date-range"]], "polars.Expr.var": [[661, "polars-expr-var"]], "polars.datetime_ranges": [[694, "polars-datetime-ranges"]], "polars.cumsum": [[687, "polars-cumsum"]], "polars.map_groups": [[711, "polars-map-groups"]], "polars.datetime_range": [[693, "polars-datetime-range"]], "polars.mean": [[714, "polars-mean"]], "polars.from_epoch": [[701, "polars-from-epoch"]], "polars.map": [[709, "polars-map"]], "polars.date_ranges": [[691, "polars-date-ranges"]], "polars.any_horizontal": [[667, "polars-any-horizontal"]], "Boolean": [[1216, "boolean"], [740, "boolean"]], "List": [[1222, "list"], [747, "list"]], "Utils": [[1230, "utils"]], "polars.Series.zip_with": [[1212, "polars-series-zip-with"]], "String": [[1225, "string"], [753, "string"]], "polars.Series.view": [[1211, "polars-series-view"]], "Export": [[1220, "export"], [294, "export"]], "Series": [[1221, "series"]], "Temporal": [[1227, "temporal"], [755, "temporal"], [299, "temporal"]], "Categories": [[1217, "categories"], [741, "categories"]], "Descriptive": [[1219, "descriptive"], [853, "descriptive"], [293, "descriptive"]], "Testing": [[1229, "testing"]], "Asserts": [[1229, "asserts"]], "Parametric testing": [[1229, "parametric-testing"]], "Polars primitives": [[1229, "polars-primitives"]], "Strategy helpers": [[1229, "strategy-helpers"]], "Profiles": [[1229, "profiles"]], "Attributes": [[1214, "attributes"], [852, "attributes"], [291, "attributes"]], "Array": [[1213, "array"], [738, "array"]], "Miscellaneous": [[1223, "miscellaneous"], [856, "miscellaneous"], [749, "miscellaneous"], [757, "miscellaneous"], [297, "miscellaneous"]], "polars.Series.var": [[1210, "polars-series-var"]], "Struct": [[1226, "struct"], [754, "struct"]], "Binary": [[1215, "binary"], [752, "binary"], [739, "binary"]], "SQL": [[1228, "sql"]], "Methods": [[1228, "methods"]], "Manipulation/selection": [[1224, "manipulation-selection"], [857, "manipulation-selection"], [750, "manipulation-selection"], [298, "manipulation-selection"]], "Computation": [[1218, "computation"], [744, "computation"], [292, "computation"]], "GroupBy": [[854, "groupby"], [295, "groupby"]], "polars.Series.all": [[862, "polars-series-all"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[845, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[839, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.top_k": [[826, "polars-lazyframe-top-k"]], "Read/write logical plan": [[856, "read-write-logical-plan"]], "polars.Series.any": [[863, "polars-series-any"]], "polars.Series.apply": [[865, "polars-series-apply"]], "polars.Series.arg_true": [[875, "polars-series-arg-true"]], "polars.Series.arg_max": [[872, "polars-series-arg-max"]], "polars.LazyFrame.update": [[829, "polars-lazyframe-update"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[842, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[851, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.Series.arr.max": [[877, "polars-series-arr-max"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[850, "polars-lazyframe-group-by-lazygroupby-sum"]], "polars.Series.arccos": [[866, "polars-series-arccos"]], "polars.LazyFrame.with_columns": [[832, "polars-lazyframe-with-columns"]], "polars.Series.arctanh": [[871, "polars-series-arctanh"]], "polars.Series.arr.sum": [[879, "polars-series-arr-sum"]], "polars.LazyFrame.with_row_count": [[835, "polars-lazyframe-with-row-count"]], "polars.LazyFrame.var": [[830, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[837, "polars-lazyframe-group-by-lazygroupby-all"]], "Selectors": [[858, "selectors"]], "Importing": [[858, "importing"]], "Set operations": [[858, "set-operations"]], "Functions": [[858, "functions"], [745, "functions"], [757, "functions"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[838, "polars-lazyframe-group-by-lazygroupby-apply"]], "LazyFrame": [[855, "lazyframe"]], "polars.LazyFrame.with_context": [[834, "polars-lazyframe-with-context"]], "polars.LazyFrame.unnest": [[828, "polars-lazyframe-unnest"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[840, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.width": [[831, "polars-lazyframe-width"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[847, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.Series.abs": [[860, "polars-series-abs"]], "polars.Series.arcsin": [[868, "polars-series-arcsin"]], "polars.Series.arr.min": [[878, "polars-series-arr-min"]], "polars.Series.append": [[864, "polars-series-append"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[836, "polars-lazyframe-group-by-lazygroupby-agg"]], "polars.Series.arg_unique": [[876, "polars-series-arg-unique"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[849, "polars-lazyframe-group-by-lazygroupby-quantile"]], "polars.LazyFrame.take_every": [[825, "polars-lazyframe-take-every"]], "polars.Series.arg_min": [[873, "polars-series-arg-min"]], "polars.Series.arctan": [[870, "polars-series-arctan"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[846, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[841, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.Series.arccosh": [[867, "polars-series-arccosh"]], "polars.Series.arcsinh": [[869, "polars-series-arcsinh"]], "polars.Series.arg_sort": [[874, "polars-series-arg-sort"]], "polars.LazyFrame.with_columns_seq": [[833, "polars-lazyframe-with-columns-seq"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[848, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.Series.alias": [[861, "polars-series-alias"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[843, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "polars.LazyFrame.unique": [[827, "polars-lazyframe-unique"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[844, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.Expr.to_physical": [[654, "polars-expr-to-physical"]], "polars.Expr.str.split": [[623, "polars-expr-str-split"]], "polars.Expr.str.json_path_match": [[606, "polars-expr-str-json-path-match"]], "polars.Expr.str.strip": [[627, "polars-expr-str-strip"]], "polars.Expr.str.replace_all": [[617, "polars-expr-str-replace-all"]], "polars.Expr.str.reverse": [[619, "polars-expr-str-reverse"]], "polars.Expr.str.strptime": [[633, "polars-expr-str-strptime"]], "polars.Expr.str.strip_chars_start": [[630, "polars-expr-str-strip-chars-start"]], "polars.Expr.tanh": [[653, "polars-expr-tanh"]], "polars.Expr.str.json_extract": [[605, "polars-expr-str-json-extract"]], "polars.Expr.str.to_titlecase": [[640, "polars-expr-str-to-titlecase"]], "polars.Expr.struct.field": [[643, "polars-expr-struct-field"]], "polars.Expr.str.len_chars": [[608, "polars-expr-str-len-chars"]], "polars.Expr.str.n_chars": [[612, "polars-expr-str-n-chars"]], "polars.Expr.str.pad_start": [[614, "polars-expr-str-pad-start"]], "polars.Expr.str.to_uppercase": [[641, "polars-expr-str-to-uppercase"]], "polars.Expr.upper_bound": [[659, "polars-expr-upper-bound"]], "polars.Expr.str.to_datetime": [[635, "polars-expr-str-to-datetime"]], "polars.Expr.str.parse_int": [[615, "polars-expr-str-parse-int"]], "polars.Expr.str.len_bytes": [[607, "polars-expr-str-len-bytes"]], "polars.Expr.str.starts_with": [[626, "polars-expr-str-starts-with"]], "polars.Expr.str.rstrip": [[621, "polars-expr-str-rstrip"]], "polars.Expr.str.lengths": [[609, "polars-expr-str-lengths"]], "polars.Expr.str.strip_suffix": [[632, "polars-expr-str-strip-suffix"]], "polars.Expr.str.to_integer": [[637, "polars-expr-str-to-integer"]], "polars.Expr.str.ljust": [[610, "polars-expr-str-ljust"]], "polars.Expr.str.to_date": [[634, "polars-expr-str-to-date"]], "polars.Expr.unique_counts": [[658, "polars-expr-unique-counts"]], "polars.Expr.str.pad_end": [[613, "polars-expr-str-pad-end"]], "polars.Expr.str.split_exact": [[624, "polars-expr-str-split-exact"]], "polars.Expr.struct.json_encode": [[644, "polars-expr-struct-json-encode"]], "polars.Expr.str.zfill": [[642, "polars-expr-str-zfill"]], "polars.Expr.tail": [[649, "polars-expr-tail"]], "polars.Expr.str.slice": [[622, "polars-expr-str-slice"]], "polars.Expr.str.replace_many": [[618, "polars-expr-str-replace-many"]], "polars.Expr.struct.rename_fields": [[645, "polars-expr-struct-rename-fields"]], "polars.Expr.str.strip_chars": [[628, "polars-expr-str-strip-chars"]], "polars.Expr.str.lstrip": [[611, "polars-expr-str-lstrip"]], "polars.Expr.take_every": [[651, "polars-expr-take-every"]], "polars.Expr.sum": [[648, "polars-expr-sum"]], "polars.Expr.str.strip_prefix": [[631, "polars-expr-str-strip-prefix"]], "polars.Expr.str.to_decimal": [[636, "polars-expr-str-to-decimal"]], "polars.Expr.unique": [[657, "polars-expr-unique"]], "polars.Expr.str.to_time": [[639, "polars-expr-str-to-time"]], "polars.Expr.truediv": [[656, "polars-expr-truediv"]], "polars.Expr.top_k": [[655, "polars-expr-top-k"]], "polars.Expr.str.rjust": [[620, "polars-expr-str-rjust"]], "polars.Expr.str.replace": [[616, "polars-expr-str-replace"]], "polars.Expr.str.strip_chars_end": [[629, "polars-expr-str-strip-chars-end"]], "polars.Expr.sub": [[646, "polars-expr-sub"]], "polars.Expr.take": [[650, "polars-expr-take"]], "polars.Expr.suffix": [[647, "polars-expr-suffix"]], "polars.Expr.str.to_lowercase": [[638, "polars-expr-str-to-lowercase"]], "polars.Expr.str.splitn": [[625, "polars-expr-str-splitn"]], "polars.Expr.tan": [[652, "polars-expr-tan"]], "polars.Expr.log": [[501, "polars-expr-log"]], "polars.Expr.map_alias": [[507, "polars-expr-map-alias"]], "polars.Expr.name.to_uppercase": [[534, "polars-expr-name-to-uppercase"]], "polars.Expr.nan_min": [[536, "polars-expr-nan-min"]], "polars.Expr.map_batches": [[508, "polars-expr-map-batches"]], "polars.Expr.prefix": [[548, "polars-expr-prefix"]], "polars.Expr.meta.eq": [[514, "polars-expr-meta-eq"]], "polars.Expr.list.to_struct": [[499, "polars-expr-list-to-struct"]], "polars.Expr.lt": [[505, "polars-expr-lt"]], "polars.Expr.pct_change": [[543, "polars-expr-pct-change"]], "polars.Expr.peak_max": [[544, "polars-expr-peak-max"]], "polars.Expr.log10": [[502, "polars-expr-log10"]], "polars.Expr.pow": [[547, "polars-expr-pow"]], "polars.Expr.max": [[511, "polars-expr-max"]], "polars.Expr.median": [[513, "polars-expr-median"]], "polars.Expr.name.to_lowercase": [[533, "polars-expr-name-to-lowercase"]], "polars.Expr.map_elements": [[510, "polars-expr-map-elements"]], "polars.Expr.mean": [[512, "polars-expr-mean"]], "polars.Expr.ne": [[537, "polars-expr-ne"]], "polars.Expr.ne_missing": [[538, "polars-expr-ne-missing"]], "polars.Expr.meta.pop": [[519, "polars-expr-meta-pop"]], "polars.Expr.product": [[549, "polars-expr-product"]], "polars.Expr.over": [[542, "polars-expr-over"]], "polars.Expr.name.map": [[530, "polars-expr-name-map"]], "polars.Expr.null_count": [[540, "polars-expr-null-count"]], "polars.Expr.peak_min": [[545, "polars-expr-peak-min"]], "polars.Expr.list.unique": [[500, "polars-expr-list-unique"]], "polars.Expr.mode": [[526, "polars-expr-mode"]], "polars.Expr.mod": [[525, "polars-expr-mod"]], "polars.Expr.meta.is_regex_projection": [[516, "polars-expr-meta-is-regex-projection"]], "polars.Expr.list.take": [[497, "polars-expr-list-take"]], "polars.Expr.map_dict": [[509, "polars-expr-map-dict"]], "polars.Expr.nan_max": [[535, "polars-expr-nan-max"]], "polars.Expr.name.suffix": [[532, "polars-expr-name-suffix"]], "polars.Expr.meta.output_name": [[518, "polars-expr-meta-output-name"]], "polars.Expr.list.sum": [[495, "polars-expr-list-sum"]], "polars.Expr.mul": [[527, "polars-expr-mul"]], "polars.Expr.name.keep": [[529, "polars-expr-name-keep"]], "polars.Expr.name.prefix": [[531, "polars-expr-name-prefix"]], "polars.Expr.meta.undo_aliases": [[522, "polars-expr-meta-undo-aliases"]], "polars.Expr.meta.write_json": [[523, "polars-expr-meta-write-json"]], "polars.Expr.pipe": [[546, "polars-expr-pipe"]], "polars.Expr.or_": [[541, "polars-expr-or"]], "polars.Expr.min": [[524, "polars-expr-min"]], "polars.Expr.n_unique": [[528, "polars-expr-n-unique"]], "polars.Expr.log1p": [[503, "polars-expr-log1p"]], "polars.Expr.list.tail": [[496, "polars-expr-list-tail"]], "polars.Expr.lower_bound": [[504, "polars-expr-lower-bound"]], "polars.Expr.meta.tree_format": [[521, "polars-expr-meta-tree-format"]], "polars.Expr.not_": [[539, "polars-expr-not"]], "polars.Expr.meta.ne": [[517, "polars-expr-meta-ne"]], "polars.Expr.meta.has_multiple_outputs": [[515, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.list.to_array": [[498, "polars-expr-list-to-array"]], "polars.Expr.meta.root_names": [[520, "polars-expr-meta-root-names"]], "polars.Expr.map": [[506, "polars-expr-map"]], "polars.Expr.repeat_by": [[556, "polars-expr-repeat-by"]], "polars.Expr.shuffle": [[582, "polars-expr-shuffle"]], "polars.Expr.rolling_quantile": [[569, "polars-expr-rolling-quantile"]], "polars.Expr.round_sig_figs": [[575, "polars-expr-round-sig-figs"]], "polars.Expr.str.decode": [[597, "polars-expr-str-decode"]], "polars.Expr.str.count_match": [[595, "polars-expr-str-count-match"]], "polars.Expr.str.count_matches": [[596, "polars-expr-str-count-matches"]], "polars.Expr.rolling_median": [[567, "polars-expr-rolling-median"]], "polars.Expr.sin": [[584, "polars-expr-sin"]], "polars.Expr.set_sorted": [[578, "polars-expr-set-sorted"]], "polars.Expr.str.concat": [[592, "polars-expr-str-concat"]], "polars.Expr.sign": [[583, "polars-expr-sign"]], "polars.Expr.skew": [[586, "polars-expr-skew"]], "polars.Expr.rolling_mean": [[566, "polars-expr-rolling-mean"]], "polars.Expr.sort_by": [[589, "polars-expr-sort-by"]], "polars.Expr.round": [[574, "polars-expr-round"]], "polars.Expr.rolling_min": [[568, "polars-expr-rolling-min"]], "polars.Expr.qcut": [[550, "polars-expr-qcut"]], "polars.Expr.str.extract_groups": [[603, "polars-expr-str-extract-groups"]], "polars.Expr.sort": [[588, "polars-expr-sort"]], "polars.Expr.str.encode": [[598, "polars-expr-str-encode"]], "polars.Expr.search_sorted": [[577, "polars-expr-search-sorted"]], "polars.Expr.rolling_skew": [[570, "polars-expr-rolling-skew"]], "polars.Expr.rolling_apply": [[563, "polars-expr-rolling-apply"]], "polars.Expr.rolling_std": [[571, "polars-expr-rolling-std"]], "polars.Expr.std": [[591, "polars-expr-std"]], "polars.Expr.rolling_max": [[565, "polars-expr-rolling-max"]], "polars.Expr.reverse": [[559, "polars-expr-reverse"]], "polars.Expr.radians": [[552, "polars-expr-radians"]], "polars.Expr.rechunk": [[554, "polars-expr-rechunk"]], "polars.Expr.rolling": [[562, "polars-expr-rolling"]], "polars.Expr.shift_and_fill": [[580, "polars-expr-shift-and-fill"]], "polars.Expr.str.extract": [[601, "polars-expr-str-extract"]], "polars.Expr.reinterpret": [[555, "polars-expr-reinterpret"]], "polars.Expr.quantile": [[551, "polars-expr-quantile"]], "polars.Expr.replace": [[557, "polars-expr-replace"]], "polars.Expr.str.extract_all": [[602, "polars-expr-str-extract-all"]], "polars.Expr.shift": [[579, "polars-expr-shift"]], "polars.Expr.str.contains": [[593, "polars-expr-str-contains"]], "polars.Expr.rle_id": [[561, "polars-expr-rle-id"]], "polars.Expr.rank": [[553, "polars-expr-rank"]], "polars.Expr.rle": [[560, "polars-expr-rle"]], "polars.Expr.str.explode": [[600, "polars-expr-str-explode"]], "polars.Expr.sqrt": [[590, "polars-expr-sqrt"]], "polars.Expr.slice": [[587, "polars-expr-slice"]], "polars.Expr.str.ends_with": [[599, "polars-expr-str-ends-with"]], "polars.Expr.reshape": [[558, "polars-expr-reshape"]], "polars.Expr.str.contains_any": [[594, "polars-expr-str-contains-any"]], "polars.Expr.str.json_decode": [[604, "polars-expr-str-json-decode"]], "polars.Expr.rolling_map": [[564, "polars-expr-rolling-map"]], "polars.Expr.rolling_var": [[573, "polars-expr-rolling-var"]], "polars.Expr.shrink_dtype": [[581, "polars-expr-shrink-dtype"]], "polars.Expr.sample": [[576, "polars-expr-sample"]], "polars.Expr.rolling_sum": [[572, "polars-expr-rolling-sum"]], "polars.Expr.sinh": [[585, "polars-expr-sinh"]], "polars.Expr.list.arg_min": [[466, "polars-expr-list-arg-min"]], "polars.Expr.is_nan": [[451, "polars-expr-is-nan"]], "polars.Expr.list.lengths": [[482, "polars-expr-list-lengths"]], "polars.Expr.list.set_intersection": [[489, "polars-expr-list-set-intersection"]], "polars.Expr.is_not_nan": [[453, "polars-expr-is-not-nan"]], "polars.Expr.list.sample": [[487, "polars-expr-list-sample"]], "polars.Expr.list.count_match": [[469, "polars-expr-list-count-match"]], "polars.Expr.inspect": [[440, "polars-expr-inspect"]], "polars.Expr.is_first_distinct": [[446, "polars-expr-is-first-distinct"]], "polars.Expr.list.head": [[478, "polars-expr-list-head"]], "polars.Expr.is_unique": [[456, "polars-expr-is-unique"]], "polars.Expr.list.eval": [[473, "polars-expr-list-eval"]], "polars.Expr.list.any": [[464, "polars-expr-list-any"]], "polars.Expr.list.shift": [[492, "polars-expr-list-shift"]], "polars.Expr.list.count_matches": [[470, "polars-expr-list-count-matches"]], "polars.Expr.keep_name": [[457, "polars-expr-keep-name"]], "polars.Expr.list.drop_nulls": [[472, "polars-expr-list-drop-nulls"]], "polars.Expr.kurtosis": [[458, "polars-expr-kurtosis"]], "polars.Expr.list.get": [[477, "polars-expr-list-get"]], "polars.Expr.interpolate": [[441, "polars-expr-interpolate"]], "polars.Expr.is_duplicated": [[443, "polars-expr-is-duplicated"]], "polars.Expr.list.mean": [[484, "polars-expr-list-mean"]], "polars.Expr.list.min": [[485, "polars-expr-list-min"]], "polars.Expr.list.set_symmetric_difference": [[490, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.list.slice": [[493, "polars-expr-list-slice"]], "polars.Expr.list.explode": [[474, "polars-expr-list-explode"]], "polars.Expr.list.len": [[481, "polars-expr-list-len"]], "polars.Expr.le": [[460, "polars-expr-le"]], "polars.Expr.is_null": [[455, "polars-expr-is-null"]], "polars.Expr.is_in": [[447, "polars-expr-is-in"]], "polars.Expr.list.set_difference": [[488, "polars-expr-list-set-difference"]], "polars.Expr.list.sort": [[494, "polars-expr-list-sort"]], "polars.Expr.list.concat": [[467, "polars-expr-list-concat"]], "polars.Expr.is_finite": [[444, "polars-expr-is-finite"]], "polars.Expr.last": [[459, "polars-expr-last"]], "polars.Expr.list.max": [[483, "polars-expr-list-max"]], "polars.Expr.list.reverse": [[486, "polars-expr-list-reverse"]], "polars.Expr.list.set_union": [[491, "polars-expr-list-set-union"]], "polars.Expr.list.last": [[480, "polars-expr-list-last"]], "polars.Expr.limit": [[462, "polars-expr-limit"]], "polars.Expr.list.contains": [[468, "polars-expr-list-contains"]], "polars.Expr.is_not_null": [[454, "polars-expr-is-not-null"]], "polars.Expr.list.join": [[479, "polars-expr-list-join"]], "polars.Expr.list.arg_max": [[465, "polars-expr-list-arg-max"]], "polars.Expr.is_last": [[449, "polars-expr-is-last"]], "polars.Expr.is_infinite": [[448, "polars-expr-is-infinite"]], "polars.Expr.list.diff": [[471, "polars-expr-list-diff"]], "polars.Expr.is_not": [[452, "polars-expr-is-not"]], "polars.Expr.is_between": [[442, "polars-expr-is-between"]], "polars.Expr.len": [[461, "polars-expr-len"]], "polars.Expr.list.gather": [[476, "polars-expr-list-gather"]], "polars.Expr.list.first": [[475, "polars-expr-list-first"]], "polars.Expr.is_last_distinct": [[450, "polars-expr-is-last-distinct"]], "polars.Expr.is_first": [[445, "polars-expr-is-first"]], "polars.Expr.list.all": [[463, "polars-expr-list-all"]], "polars.Expr.dt.nanoseconds": [[388, "polars-expr-dt-nanoseconds"]], "polars.Expr.flatten": [[426, "polars-expr-flatten"]], "polars.Expr.hash": [[436, "polars-expr-hash"]], "polars.Expr.explode": [[420, "polars-expr-explode"]], "polars.Expr.dt.month_start": [[386, "polars-expr-dt-month-start"]], "polars.Expr.forward_fill": [[429, "polars-expr-forward-fill"]], "polars.Expr.dt.with_time_unit": [[410, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.strftime": [[396, "polars-expr-dt-strftime"]], "polars.Expr.dt.total_hours": [[401, "polars-expr-dt-total-hours"]], "polars.Expr.dt.timestamp": [[398, "polars-expr-dt-timestamp"]], "polars.Expr.dt.to_string": [[399, "polars-expr-dt-to-string"]], "polars.Expr.gather_every": [[432, "polars-expr-gather-every"]], "polars.Expr.dt.weekday": [[409, "polars-expr-dt-weekday"]], "polars.Expr.ewm_var": [[417, "polars-expr-ewm-var"]], "polars.Expr.exclude": [[418, "polars-expr-exclude"]], "polars.Expr.entropy": [[412, "polars-expr-entropy"]], "polars.Expr.filter": [[424, "polars-expr-filter"]], "polars.Expr.dt.truncate": [[407, "polars-expr-dt-truncate"]], "polars.Expr.extend_constant": [[421, "polars-expr-extend-constant"]], "polars.Expr.fill_nan": [[422, "polars-expr-fill-nan"]], "polars.Expr.head": [[437, "polars-expr-head"]], "polars.Expr.dt.seconds": [[395, "polars-expr-dt-seconds"]], "polars.Expr.floor": [[427, "polars-expr-floor"]], "polars.Expr.implode": [[439, "polars-expr-implode"]], "polars.Expr.dt.quarter": [[391, "polars-expr-dt-quarter"]], "polars.Expr.dt.round": [[393, "polars-expr-dt-round"]], "polars.Expr.dt.nanosecond": [[387, "polars-expr-dt-nanosecond"]], "polars.Expr.gather": [[431, "polars-expr-gather"]], "polars.Expr.hist": [[438, "polars-expr-hist"]], "polars.Expr.ge": [[433, "polars-expr-ge"]], "polars.Expr.dt.replace_time_zone": [[392, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.offset_by": [[389, "polars-expr-dt-offset-by"]], "polars.Expr.floordiv": [[428, "polars-expr-floordiv"]], "polars.Expr.from_json": [[430, "polars-expr-from-json"]], "polars.Expr.dt.total_nanoseconds": [[405, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.gt": [[435, "polars-expr-gt"]], "polars.Expr.dt.total_days": [[400, "polars-expr-dt-total-days"]], "polars.Expr.ewm_mean": [[415, "polars-expr-ewm-mean"]], "polars.Expr.ewm_std": [[416, "polars-expr-ewm-std"]], "polars.Expr.eq": [[413, "polars-expr-eq"]], "polars.Expr.get": [[434, "polars-expr-get"]], "polars.Expr.dt.total_microseconds": [[402, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.total_minutes": [[404, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.week": [[408, "polars-expr-dt-week"]], "polars.Expr.fill_null": [[423, "polars-expr-fill-null"]], "polars.Expr.dt.year": [[411, "polars-expr-dt-year"]], "polars.Expr.first": [[425, "polars-expr-first"]], "polars.Expr.exp": [[419, "polars-expr-exp"]], "polars.Expr.dt.total_milliseconds": [[403, "polars-expr-dt-total-milliseconds"]], "polars.Expr.eq_missing": [[414, "polars-expr-eq-missing"]], "polars.Expr.dt.total_seconds": [[406, "polars-expr-dt-total-seconds"]], "polars.Expr.dt.second": [[394, "polars-expr-dt-second"]], "polars.Expr.dt.month_end": [[385, "polars-expr-dt-month-end"]], "polars.Expr.dt.ordinal_day": [[390, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.time": [[397, "polars-expr-dt-time"]], "polars.Expr.dot": [[361, "polars-expr-dot"]], "polars.Expr.clip_min": [[342, "polars-expr-clip-min"]], "polars.Expr.diff": [[360, "polars-expr-diff"]], "polars.Expr.cum_min": [[349, "polars-expr-cum-min"]], "polars.Expr.cummin": [[354, "polars-expr-cummin"]], "polars.Expr.cumulative_eval": [[357, "polars-expr-cumulative-eval"]], "polars.Expr.cumprod": [[355, "polars-expr-cumprod"]], "polars.Expr.cot": [[345, "polars-expr-cot"]], "polars.Expr.dt.base_utc_offset": [[364, "polars-expr-dt-base-utc-offset"]], "polars.Expr.dt.milliseconds": [[381, "polars-expr-dt-milliseconds"]], "polars.Expr.dt.month": [[384, "polars-expr-dt-month"]], "polars.Expr.bin.decode": [[330, "polars-expr-bin-decode"]], "polars.Expr.cat.set_ordering": [[337, "polars-expr-cat-set-ordering"]], "polars.Expr.dt.minutes": [[383, "polars-expr-dt-minutes"]], "polars.Expr.dt.microseconds": [[379, "polars-expr-dt-microseconds"]], "polars.Expr.cast": [[335, "polars-expr-cast"]], "polars.Expr.cum_max": [[348, "polars-expr-cum-max"]], "polars.Expr.bin.starts_with": [[333, "polars-expr-bin-starts-with"]], "polars.Expr.dt.combine": [[366, "polars-expr-dt-combine"]], "polars.Expr.cum_prod": [[350, "polars-expr-cum-prod"]], "polars.Expr.dt.microsecond": [[378, "polars-expr-dt-microsecond"]], "polars.Expr.dt.epoch": [[373, "polars-expr-dt-epoch"]], "polars.Expr.bin.ends_with": [[332, "polars-expr-bin-ends-with"]], "polars.Expr.clip_max": [[341, "polars-expr-clip-max"]], "polars.Expr.bottom_k": [[334, "polars-expr-bottom-k"]], "polars.Expr.ceil": [[339, "polars-expr-ceil"]], "polars.Expr.count": [[346, "polars-expr-count"]], "polars.Expr.degrees": [[359, "polars-expr-degrees"]], "polars.Expr.drop_nans": [[362, "polars-expr-drop-nans"]], "polars.Expr.cumsum": [[356, "polars-expr-cumsum"]], "polars.Expr.cum_count": [[347, "polars-expr-cum-count"]], "polars.Expr.dt.convert_time_zone": [[367, "polars-expr-dt-convert-time-zone"]], "polars.Expr.dt.is_leap_year": [[376, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.minute": [[382, "polars-expr-dt-minute"]], "polars.Expr.dt.dst_offset": [[372, "polars-expr-dt-dst-offset"]], "polars.Expr.cos": [[343, "polars-expr-cos"]], "polars.Expr.dt.hour": [[374, "polars-expr-dt-hour"]], "polars.Expr.cumcount": [[352, "polars-expr-cumcount"]], "polars.Expr.dt.hours": [[375, "polars-expr-dt-hours"]], "polars.Expr.clip": [[340, "polars-expr-clip"]], "polars.Expr.bin.encode": [[331, "polars-expr-bin-encode"]], "polars.Expr.dt.datetime": [[369, "polars-expr-dt-datetime"]], "polars.Expr.dt.cast_time_unit": [[365, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cum_sum": [[351, "polars-expr-cum-sum"]], "polars.Expr.cummax": [[353, "polars-expr-cummax"]], "polars.Expr.drop_nulls": [[363, "polars-expr-drop-nulls"]], "polars.Expr.dt.date": [[368, "polars-expr-dt-date"]], "polars.Expr.dt.days": [[371, "polars-expr-dt-days"]], "polars.Expr.dt.day": [[370, "polars-expr-dt-day"]], "polars.Expr.cat.get_categories": [[336, "polars-expr-cat-get-categories"]], "polars.Expr.dt.millisecond": [[380, "polars-expr-dt-millisecond"]], "polars.Expr.cbrt": [[338, "polars-expr-cbrt"]], "polars.Expr.cut": [[358, "polars-expr-cut"]], "polars.Expr.cosh": [[344, "polars-expr-cosh"]], "polars.Expr.dt.iso_year": [[377, "polars-expr-dt-iso-year"]], "polars.DataFrame.replace": [[228, "polars-dataframe-replace"]], "polars.DataFrame.to_init_repr": [[256, "polars-dataframe-to-init-repr"]], "polars.DataFrame.shift": [[242, "polars-dataframe-shift"]], "polars.DataFrame.with_row_count": [[273, "polars-dataframe-with-row-count"]], "polars.DataFrame.upsample": [[267, "polars-dataframe-upsample"]], "polars.DataFrame.take_every": [[251, "polars-dataframe-take-every"]], "polars.DataFrame.to_dict": [[253, "polars-dataframe-to-dict"]], "polars.DataFrame.vstack": [[269, "polars-dataframe-vstack"]], "polars.DataFrame.rows_by_key": [[235, "polars-dataframe-rows-by-key"]], "polars.DataFrame.to_dicts": [[254, "polars-dataframe-to-dicts"]], "polars.DataFrame.to_pandas": [[258, "polars-dataframe-to-pandas"]], "polars.DataFrame.unique": [[263, "polars-dataframe-unique"]], "polars.DataFrame.reverse": [[231, "polars-dataframe-reverse"]], "polars.DataFrame.sum": [[248, "polars-dataframe-sum"]], "polars.DataFrame.partition_by": [[221, "polars-dataframe-partition-by"]], "polars.DataFrame.unstack": [[265, "polars-dataframe-unstack"]], "polars.DataFrame.set_sorted": [[240, "polars-dataframe-set-sorted"]], "polars.DataFrame.to_series": [[259, "polars-dataframe-to-series"]], "polars.DataFrame.update": [[266, "polars-dataframe-update"]], "polars.DataFrame.rolling": [[232, "polars-dataframe-rolling"]], "polars.DataFrame.unnest": [[264, "polars-dataframe-unnest"]], "polars.DataFrame.pivot": [[223, "polars-dataframe-pivot"]], "polars.DataFrame.sort": [[246, "polars-dataframe-sort"]], "polars.DataFrame.select": [[238, "polars-dataframe-select"]], "polars.DataFrame.var": [[268, "polars-dataframe-var"]], "polars.DataFrame.with_columns": [[271, "polars-dataframe-with-columns"]], "polars.DataFrame.rows": [[234, "polars-dataframe-rows"]], "polars.DataFrame.tail": [[250, "polars-dataframe-tail"]], "polars.DataFrame.schema": [[237, "polars-dataframe-schema"]], "polars.DataFrame.sample": [[236, "polars-dataframe-sample"]], "polars.DataFrame.std": [[247, "polars-dataframe-std"]], "polars.DataFrame.width": [[270, "polars-dataframe-width"]], "polars.DataFrame.to_struct": [[260, "polars-dataframe-to-struct"]], "polars.DataFrame.with_columns_seq": [[272, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.to_dummies": [[255, "polars-dataframe-to-dummies"]], "polars.DataFrame.slice": [[245, "polars-dataframe-slice"]], "polars.DataFrame.replace_column": [[230, "polars-dataframe-replace-column"]], "polars.DataFrame.to_arrow": [[252, "polars-dataframe-to-arrow"]], "polars.dataframe.group_by.GroupBy.__iter__": [[274, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.product": [[224, "polars-dataframe-product"]], "polars.DataFrame.shift_and_fill": [[243, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.top_k": [[261, "polars-dataframe-top-k"]], "polars.DataFrame.transpose": [[262, "polars-dataframe-transpose"]], "polars.DataFrame.row": [[233, "polars-dataframe-row"]], "polars.DataFrame.null_count": [[220, "polars-dataframe-null-count"]], "polars.DataFrame.rechunk": [[226, "polars-dataframe-rechunk"]], "polars.DataFrame.pipe": [[222, "polars-dataframe-pipe"]], "polars.DataFrame.shrink_to_fit": [[244, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.quantile": [[225, "polars-dataframe-quantile"]], "polars.DataFrame.shape": [[241, "polars-dataframe-shape"]], "polars.DataFrame.replace_at_idx": [[229, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.select_seq": [[239, "polars-dataframe-select-seq"]], "polars.DataFrame.rename": [[227, "polars-dataframe-rename"]], "polars.DataFrame.sum_horizontal": [[249, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.to_numpy": [[257, "polars-dataframe-to-numpy"]], "polars.min": [[716, "polars-min"]], "polars.col": [[742, "polars-col"]], "polars.tail": [[731, "polars-tail"]], "polars.LazyFrame.collect_async": [[768, "polars-lazyframe-collect-async"]], "polars.time": [[732, "polars-time"]], "Columns / names": [[743, "columns-names"]], "Expressions": [[746, "expressions"]], "polars.rolling_corr": [[723, "polars-rolling-corr"]], "polars.median": [[715, "polars-median"]], "polars.LazyFrame.cache": [[763, "polars-lazyframe-cache"]], "polars.var": [[735, "polars-var"]], "polars.select": [[725, "polars-select"]], "Meta": [[748, "meta"]], "Conversion": [[757, "conversion"]], "Parallelization": [[757, "parallelization"]], "Random": [[757, "random"]], "StringCache": [[757, "stringcache"]], "polars.ones": [[719, "polars-ones"]], "polars.rolling_cov": [[724, "polars-rolling-cov"]], "polars.sum_horizontal": [[730, "polars-sum-horizontal"]], "Input/output": [[759, "input-output"]], "CSV": [[759, "csv"]], "Feather/ IPC": [[759, "feather-ipc"]], "Parquet": [[759, "parquet"]], "Database": [[759, "database"]], "JSON": [[759, "json"]], "AVRO": [[759, "avro"]], "Spreadsheet": [[759, "spreadsheet"]], "Apache Iceberg": [[759, "apache-iceberg"]], "Delta Lake": [[759, "delta-lake"]], "Datasets": [[759, "datasets"]], "BatchedCsvReader": [[759, "batchedcsvreader"]], "polars.quantile": [[720, "polars-quantile"]], "polars.LazyFrame.columns": [[769, "polars-lazyframe-columns"]], "polars.time_ranges": [[734, "polars-time-ranges"]], "polars.zeros": [[737, "polars-zeros"]], "polars.sql_expr": [[726, "polars-sql-expr"]], "polars.LazyFrame.approx_n_unique": [[761, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.bottom_k": [[762, "polars-lazyframe-bottom-k"]], "polars.reduce": [[721, "polars-reduce"]], "polars.sum": [[729, "polars-sum"]], "Window": [[756, "window"]], "polars.LazyFrame.clone": [[766, "polars-lazyframe-clone"]], "polars.when": [[736, "polars-when"]], "Operators": [[752, "operators"]], "Conjunction": [[752, "conjunction"]], "Comparison": [[752, "comparison"]], "Numeric": [[752, "numeric"], [299, "numeric"]], "polars.struct": [[728, "polars-struct"]], "API reference": [[758, "api-reference"]], "polars.LazyFrame.cast": [[764, "polars-lazyframe-cast"]], "polars.min_horizontal": [[717, "polars-min-horizontal"]], "polars.n_unique": [[718, "polars-n-unique"]], "polars.repeat": [[722, "polars-repeat"]], "polars.time_range": [[733, "polars-time-range"]], "polars.LazyFrame.collect": [[767, "polars-lazyframe-collect"]], "Name": [[751, "name"]], "polars.LazyFrame.clear": [[765, "polars-lazyframe-clear"]], "polars.std": [[727, "polars-std"]], "polars.dataframe.group_by.GroupBy.agg": [[275, "polars-dataframe-group-by-groupby-agg"]], "polars.Expr.arctan": [[316, "polars-expr-arctan"]], "polars.Expr.arcsinh": [[315, "polars-expr-arcsinh"]], "polars.Expr.agg_groups": [[304, "polars-expr-agg-groups"]], "polars.Expr.arg_unique": [[322, "polars-expr-arg-unique"]], "polars.Expr.alias": [[305, "polars-expr-alias"]], "polars.Expr.arg_max": [[318, "polars-expr-arg-max"]], "polars.dataframe.group_by.GroupBy.count": [[278, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.last": [[281, "polars-dataframe-group-by-groupby-last"]], "polars.dataframe.group_by.GroupBy.sum": [[289, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.arr.min": [[324, "polars-expr-arr-min"]], "polars.Expr.arr.sum": [[325, "polars-expr-arr-sum"]], "polars.Expr.apply": [[310, "polars-expr-apply"]], "polars.dataframe.group_by.GroupBy.quantile": [[288, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.apply": [[277, "polars-dataframe-group-by-groupby-apply"]], "polars.Expr.arccos": [[312, "polars-expr-arccos"]], "polars.dataframe.group_by.GroupBy.first": [[279, "polars-dataframe-group-by-groupby-first"]], "polars.dataframe.group_by.GroupBy.median": [[285, "polars-dataframe-group-by-groupby-median"]], "polars.dataframe.group_by.GroupBy.max": [[283, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.arr.to_list": [[326, "polars-expr-arr-to-list"]], "Data types": [[299, "data-types"]], "Nested": [[299, "nested"]], "Other": [[299, "other"]], "polars.dataframe.group_by.GroupBy.mean": [[284, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.head": [[280, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.map_groups": [[282, "polars-dataframe-group-by-groupby-map-groups"]], "polars.Expr.arg_true": [[321, "polars-expr-arg-true"]], "polars.Expr.arg_min": [[319, "polars-expr-arg-min"]], "polars.Expr.any": [[308, "polars-expr-any"]], "polars.dataframe.group_by.GroupBy.n_unique": [[287, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.arctanh": [[317, "polars-expr-arctanh"]], "polars.Expr.arg_sort": [[320, "polars-expr-arg-sort"]], "polars.Expr.all": [[306, "polars-expr-all"]], "polars.Expr.add": [[303, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.tail": [[290, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.append": [[309, "polars-expr-append"]], "polars.Expr.abs": [[302, "polars-expr-abs"]], "polars.Expr.arcsin": [[314, "polars-expr-arcsin"]], "Exceptions": [[300, "exceptions"]], "polars.Expr.arr.unique": [[327, "polars-expr-arr-unique"]], "polars.Expr.bin.contains": [[329, "polars-expr-bin-contains"]], "polars.dataframe.group_by.GroupBy.all": [[276, "polars-dataframe-group-by-groupby-all"]], "polars.Expr.arr.max": [[323, "polars-expr-arr-max"]], "DataFrame": [[296, "dataframe"]], "polars.dataframe.group_by.GroupBy.min": [[286, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.arccosh": [[313, "polars-expr-arccosh"]], "polars.Expr.backward_fill": [[328, "polars-expr-backward-fill"]], "polars.Expr.approx_n_unique": [[311, "polars-expr-approx-n-unique"]], "polars.Expr.and_": [[307, "polars-expr-and"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "enum (class in polars)": [[51, "polars.Enum"]], "__init__() (polars.enum method)": [[51, "polars.Enum.__init__"]], "float32 (class in polars)": [[52, "polars.Float32"]], "__init__() (polars.float32 method)": [[52, "polars.Float32.__init__"]], "float64 (class in polars)": [[53, "polars.Float64"]], "__init__() (polars.float64 method)": [[53, "polars.Float64.__init__"]], "int16 (class in polars)": [[54, "polars.Int16"]], "__init__() (polars.int16 method)": [[54, "polars.Int16.__init__"]], "int32 (class in polars)": [[55, "polars.Int32"]], "__init__() (polars.int32 method)": [[55, "polars.Int32.__init__"]], "int64 (class in polars)": [[56, "polars.Int64"]], "__init__() (polars.int64 method)": [[56, "polars.Int64.__init__"]], "int8 (class in polars)": [[57, "polars.Int8"]], "__init__() (polars.int8 method)": [[57, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_ipc"]], "sink_parquet() (polars.lazyframe method)": [[60, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[61, "polars.List"]], "__init__() (polars.list method)": [[61, "polars.List.__init__"]], "null (class in polars)": [[62, "polars.Null"]], "__init__() (polars.null method)": [[62, "polars.Null.__init__"]], "object (class in polars)": [[63, "polars.Object"]], "__init__() (polars.object method)": [[63, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[64, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[65, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[66, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[67, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[68, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[69, "polars.SQLContext.unregister"]], "stringcache (class in polars)": [[70, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[70, "polars.StringCache.__init__"]], "struct (class in polars)": [[71, "polars.Struct"]], "__init__() (polars.struct method)": [[71, "polars.Struct.__init__"]], "time (class in polars)": [[72, "polars.Time"]], "__init__() (polars.time method)": [[72, "polars.Time.__init__"]], "uint16 (class in polars)": [[73, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[73, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[74, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[74, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[75, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[75, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[76, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[76, "polars.UInt8.__init__"]], "unknown (class in polars)": [[77, "polars.Unknown"]], "__init__() (polars.unknown method)": [[77, "polars.Unknown.__init__"]], "utf8 (class in polars)": [[78, "polars.Utf8"]], "__init__() (polars.utf8 method)": [[78, "polars.Utf8.__init__"]], "align_frames() (in module polars)": [[79, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[80, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[81, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[82, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[83, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[84, "polars.build_info"]], "collect_all() (in module polars)": [[85, "polars.collect_all"]], "collect_all_async() (in module polars)": [[86, "polars.collect_all_async"]], "concat() (in module polars)": [[87, "polars.concat"]], "disable_string_cache() (in module polars)": [[88, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[89, "polars.enable_string_cache"]], "arrowerror": [[90, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[91, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[92, "polars.exceptions.ComputeError"]], "duplicateerror": [[93, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[94, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[95, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[96, "polars.exceptions.NoRowsReturnedError"]], "polarspanicerror": [[97, "polars.exceptions.PolarsPanicError"]], "rowserror": [[98, "polars.exceptions.RowsError"]], "schemaerror": [[99, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[100, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[101, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[102, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[103, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[104, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[105, "polars.from_dataframe"]], "from_dict() (in module polars)": [[106, "polars.from_dict"]], "from_dicts() (in module polars)": [[107, "polars.from_dicts"]], "from_numpy() (in module polars)": [[108, "polars.from_numpy"]], "from_pandas() (in module polars)": [[109, "polars.from_pandas"]], "from_records() (in module polars)": [[110, "polars.from_records"]], "from_repr() (in module polars)": [[111, "polars.from_repr"]], "get_index_type() (in module polars)": [[112, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[113, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[114, "polars.read_avro"]], "read_csv() (in module polars)": [[115, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[116, "polars.read_csv_batched"]], "read_database() (in module polars)": [[117, "polars.read_database"]], "read_database_uri() (in module polars)": [[118, "polars.read_database_uri"]], "read_delta() (in module polars)": [[119, "polars.read_delta"]], "read_excel() (in module polars)": [[120, "polars.read_excel"]], "read_ipc() (in module polars)": [[121, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[122, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[123, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[124, "polars.read_json"]], "read_ndjson() (in module polars)": [[125, "polars.read_ndjson"]], "read_ods() (in module polars)": [[126, "polars.read_ods"]], "read_parquet() (in module polars)": [[127, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[128, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[129, "polars.scan_csv"]], "scan_delta() (in module polars)": [[130, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[131, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[132, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[133, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[134, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[135, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[136, "polars.set_random_seed"]], "show_versions() (in module polars)": [[137, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[138, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[139, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[140, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[141, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[142, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[142, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[143, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[144, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[145, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[149, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[150, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[153, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[154, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[155, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[156, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[157, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[158, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[159, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[160, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[161, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[162, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[163, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[164, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[165, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[166, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[167, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[168, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[169, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[170, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[171, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[172, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[173, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[174, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[175, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[176, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[177, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[178, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[179, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[180, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[181, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[182, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[183, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[184, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[185, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[186, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[187, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[188, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[189, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[190, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[191, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[192, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[193, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[194, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[195, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[196, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[197, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[198, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[199, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[200, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[201, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[202, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[203, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[204, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[205, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[206, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[207, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[208, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[209, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[210, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[211, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[212, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[213, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[214, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[215, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[216, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[217, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[218, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[219, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[220, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[221, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[222, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[223, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[224, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[225, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[226, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[227, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[228, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[229, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[230, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[231, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[232, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[233, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[234, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[235, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[236, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[237, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[238, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[239, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[240, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[241, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[242, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[243, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[244, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[245, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[246, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[247, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[248, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[249, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[250, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[251, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[252, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[253, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[254, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[255, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[256, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[257, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[258, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[259, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[260, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[261, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[262, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[263, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[264, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[265, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[266, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[267, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[268, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[269, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[270, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[271, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[272, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[273, "polars.DataFrame.with_row_count"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[274, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[275, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[276, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[277, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.last"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[302, "polars.Expr.abs"]], "add() (polars.expr method)": [[303, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[304, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[305, "polars.Expr.alias"]], "all() (polars.expr method)": [[306, "polars.Expr.all"]], "and_() (polars.expr method)": [[307, "polars.Expr.and_"]], "any() (polars.expr method)": [[308, "polars.Expr.any"]], "append() (polars.expr method)": [[309, "polars.Expr.append"]], "apply() (polars.expr method)": [[310, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[311, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[312, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[313, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[314, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[315, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[316, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[317, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[318, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[319, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[320, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[321, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[322, "polars.Expr.arg_unique"]], "max() (polars.expr.arr method)": [[323, "polars.Expr.arr.max"]], "min() (polars.expr.arr method)": [[324, "polars.Expr.arr.min"]], "sum() (polars.expr.arr method)": [[325, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[326, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[327, "polars.Expr.arr.unique"]], "backward_fill() (polars.expr method)": [[328, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[329, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[330, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[331, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[332, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[333, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[334, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[335, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[336, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[337, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[338, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[339, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[340, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[341, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[342, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[343, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[344, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[345, "polars.Expr.cot"]], "count() (polars.expr method)": [[346, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[347, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[348, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[349, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[350, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[351, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[352, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[353, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[354, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[355, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[356, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[357, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[358, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[359, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[360, "polars.Expr.diff"]], "dot() (polars.expr method)": [[361, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[362, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[363, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[364, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[365, "polars.Expr.dt.cast_time_unit"]], "combine() (polars.expr.dt method)": [[366, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[367, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[368, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[369, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[370, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[371, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[372, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[373, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[374, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[375, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[376, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[377, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[378, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[379, "polars.Expr.dt.microseconds"]], "millisecond() (polars.expr.dt method)": [[380, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[381, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[382, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[383, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[384, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[385, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[386, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[387, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[388, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[389, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[390, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[391, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[392, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[393, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[394, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[395, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[396, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[397, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[398, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[399, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[400, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[401, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[402, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[403, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[404, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[405, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[406, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[407, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[408, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[409, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[410, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[411, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[412, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[413, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[414, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[415, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[416, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[417, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[418, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[419, "polars.Expr.exp"]], "explode() (polars.expr method)": [[420, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[421, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[422, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[423, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[424, "polars.Expr.filter"]], "first() (polars.expr method)": [[425, "polars.Expr.first"]], "flatten() (polars.expr method)": [[426, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[427, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[428, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[429, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[430, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[431, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[432, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[433, "polars.Expr.ge"]], "get() (polars.expr method)": [[434, "polars.Expr.get"]], "gt() (polars.expr method)": [[435, "polars.Expr.gt"]], "hash() (polars.expr method)": [[436, "polars.Expr.hash"]], "head() (polars.expr method)": [[437, "polars.Expr.head"]], "hist() (polars.expr method)": [[438, "polars.Expr.hist"]], "implode() (polars.expr method)": [[439, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[440, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[441, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[442, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[443, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[444, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[445, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[446, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[447, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[448, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[449, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[450, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[451, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[452, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[453, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[454, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[455, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[456, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[457, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[458, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[459, "polars.Expr.last"]], "le() (polars.expr method)": [[460, "polars.Expr.le"]], "len() (polars.expr method)": [[461, "polars.Expr.len"]], "limit() (polars.expr method)": [[462, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[463, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[464, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[465, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[466, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[467, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[468, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[469, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[470, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[471, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[472, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[473, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[474, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[475, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[476, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[477, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[478, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[479, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[480, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[481, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[482, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[483, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[484, "polars.Expr.list.mean"]], "min() (polars.expr.list method)": [[485, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[486, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[487, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[488, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[489, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[490, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[491, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[492, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[493, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[494, "polars.Expr.list.sort"]], "sum() (polars.expr.list method)": [[495, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[496, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[497, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[498, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[499, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[500, "polars.Expr.list.unique"]], "log() (polars.expr method)": [[501, "polars.Expr.log"]], "log10() (polars.expr method)": [[502, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[503, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[504, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[505, "polars.Expr.lt"]], "map() (polars.expr method)": [[506, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[507, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[508, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[509, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[510, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[511, "polars.Expr.max"]], "mean() (polars.expr method)": [[512, "polars.Expr.mean"]], "median() (polars.expr method)": [[513, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[514, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[515, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[516, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[517, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[518, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[519, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[520, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[521, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[522, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[523, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[524, "polars.Expr.min"]], "mod() (polars.expr method)": [[525, "polars.Expr.mod"]], "mode() (polars.expr method)": [[526, "polars.Expr.mode"]], "mul() (polars.expr method)": [[527, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[528, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[529, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[530, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[531, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[532, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[533, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[534, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[535, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[536, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[537, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[538, "polars.Expr.ne_missing"]], "not_() (polars.expr method)": [[539, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[540, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[541, "polars.Expr.or_"]], "over() (polars.expr method)": [[542, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[543, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[544, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[545, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[546, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[547, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[548, "polars.Expr.prefix"]], "product() (polars.expr method)": [[549, "polars.Expr.product"]], "qcut() (polars.expr method)": [[550, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[551, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[552, "polars.Expr.radians"]], "rank() (polars.expr method)": [[553, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[554, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[555, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[556, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[557, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[558, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[559, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[560, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[561, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[562, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[563, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[564, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[565, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[566, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[567, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[568, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[569, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[570, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[571, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[572, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[573, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[574, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[575, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[576, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[577, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[578, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[579, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[580, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[581, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[582, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[583, "polars.Expr.sign"]], "sin() (polars.expr method)": [[584, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[585, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[586, "polars.Expr.skew"]], "slice() (polars.expr method)": [[587, "polars.Expr.slice"]], "sort() (polars.expr method)": [[588, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[589, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[590, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[591, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[592, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[593, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[594, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[595, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[596, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[597, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[598, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[599, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[600, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[601, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[602, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[603, "polars.Expr.str.extract_groups"]], "json_decode() (polars.expr.str method)": [[604, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[605, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[606, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[607, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[608, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[609, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[610, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[611, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[612, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[613, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[614, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[615, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[616, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[617, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[618, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[619, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[620, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[621, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[622, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[623, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[624, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[625, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[626, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[627, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[628, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[629, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[630, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[631, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[632, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[633, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[634, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[635, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[636, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[637, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[638, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[639, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[640, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[641, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[642, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[643, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[644, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[645, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[646, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[647, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[648, "polars.Expr.sum"]], "tail() (polars.expr method)": [[649, "polars.Expr.tail"]], "take() (polars.expr method)": [[650, "polars.Expr.take"]], "take_every() (polars.expr method)": [[651, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[652, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[653, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[654, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[655, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[656, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[657, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[658, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[659, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[660, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[661, "polars.Expr.var"]], "where() (polars.expr method)": [[662, "polars.Expr.where"]], "xor() (polars.expr method)": [[663, "polars.Expr.xor"]], "all() (in module polars)": [[664, "polars.all"]], "all_horizontal() (in module polars)": [[665, "polars.all_horizontal"]], "any() (in module polars)": [[666, "polars.any"]], "any_horizontal() (in module polars)": [[667, "polars.any_horizontal"]], "apply() (in module polars)": [[668, "polars.apply"]], "approx_n_unique() (in module polars)": [[669, "polars.approx_n_unique"]], "arange() (in module polars)": [[670, "polars.arange"]], "arctan2() (in module polars)": [[671, "polars.arctan2"]], "arctan2d() (in module polars)": [[672, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[673, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[674, "polars.arg_where"]], "coalesce() (in module polars)": [[675, "polars.coalesce"]], "concat_list() (in module polars)": [[676, "polars.concat_list"]], "concat_str() (in module polars)": [[677, "polars.concat_str"]], "corr() (in module polars)": [[678, "polars.corr"]], "count() (in module polars)": [[679, "polars.count"]], "cov() (in module polars)": [[680, "polars.cov"]], "cum_fold() (in module polars)": [[681, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[682, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[683, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[684, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[685, "polars.cumfold"]], "cumreduce() (in module polars)": [[686, "polars.cumreduce"]], "cumsum() (in module polars)": [[687, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[688, "polars.cumsum_horizontal"]], "date() (in module polars)": [[689, "polars.date"]], "date_range() (in module polars)": [[690, "polars.date_range"]], "date_ranges() (in module polars)": [[691, "polars.date_ranges"]], "datetime() (in module polars)": [[692, "polars.datetime"]], "datetime_range() (in module polars)": [[693, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[694, "polars.datetime_ranges"]], "duration() (in module polars)": [[695, "polars.duration"]], "element() (in module polars)": [[696, "polars.element"]], "exclude() (in module polars)": [[697, "polars.exclude"]], "first() (in module polars)": [[698, "polars.first"]], "fold() (in module polars)": [[699, "polars.fold"]], "format() (in module polars)": [[700, "polars.format"]], "from_epoch() (in module polars)": [[701, "polars.from_epoch"]], "groups() (in module polars)": [[702, "polars.groups"]], "head() (in module polars)": [[703, "polars.head"]], "implode() (in module polars)": [[704, "polars.implode"]], "int_range() (in module polars)": [[705, "polars.int_range"]], "int_ranges() (in module polars)": [[706, "polars.int_ranges"]], "last() (in module polars)": [[707, "polars.last"]], "lit() (in module polars)": [[708, "polars.lit"]], "map() (in module polars)": [[709, "polars.map"]], "map_batches() (in module polars)": [[710, "polars.map_batches"]], "map_groups() (in module polars)": [[711, "polars.map_groups"]], "max() (in module polars)": [[712, "polars.max"]], "max_horizontal() (in module polars)": [[713, "polars.max_horizontal"]], "mean() (in module polars)": [[714, "polars.mean"]], "median() (in module polars)": [[715, "polars.median"]], "min() (in module polars)": [[716, "polars.min"]], "min_horizontal() (in module polars)": [[717, "polars.min_horizontal"]], "n_unique() (in module polars)": [[718, "polars.n_unique"]], "ones() (in module polars)": [[719, "polars.ones"]], "quantile() (in module polars)": [[720, "polars.quantile"]], "reduce() (in module polars)": [[721, "polars.reduce"]], "repeat() (in module polars)": [[722, "polars.repeat"]], "rolling_corr() (in module polars)": [[723, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[724, "polars.rolling_cov"]], "select() (in module polars)": [[725, "polars.select"]], "sql_expr() (in module polars)": [[726, "polars.sql_expr"]], "std() (in module polars)": [[727, "polars.std"]], "struct() (in module polars)": [[728, "polars.struct"]], "sum() (in module polars)": [[729, "polars.sum"]], "sum_horizontal() (in module polars)": [[730, "polars.sum_horizontal"]], "tail() (in module polars)": [[731, "polars.tail"]], "time() (in module polars)": [[732, "polars.time"]], "time_range() (in module polars)": [[733, "polars.time_range"]], "time_ranges() (in module polars)": [[734, "polars.time_ranges"]], "var() (in module polars)": [[735, "polars.var"]], "when() (in module polars)": [[736, "polars.when"]], "zeros() (in module polars)": [[737, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[761, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[762, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[763, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[764, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[765, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[766, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[767, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[768, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[769, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[770, "polars.LazyFrame.count"]], "deserialize() (polars.lazyframe class method)": [[771, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[772, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[773, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[774, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[775, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[776, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[777, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[778, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[779, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[780, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[781, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[782, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[783, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[784, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[785, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[786, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[787, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[788, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[789, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[790, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[791, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[792, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[793, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[794, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[795, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[796, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[797, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[798, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[799, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[800, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[801, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[802, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[803, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[804, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[805, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[806, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[807, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[808, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[809, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[810, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[811, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[812, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[813, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[814, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[815, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[816, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[817, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[818, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[819, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[820, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[821, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[822, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[823, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[824, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[825, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[826, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[827, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[828, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[829, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[830, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[831, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[832, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[833, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[834, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[835, "polars.LazyFrame.with_row_count"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[836, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[837, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[838, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[839, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[840, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[841, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[842, "polars.lazyframe.group_by.LazyGroupBy.last"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[843, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[844, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[845, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[846, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[847, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[848, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[849, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[850, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[851, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[858, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[858, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[858, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[858, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[858, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[858, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[858, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[858, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[858, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[858, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[858, "polars.selectors.first"]], "float() (in module polars.selectors)": [[858, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[858, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[858, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[858, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[858, "polars.selectors.matches"]], "module": [[858, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[858, "polars.selectors.numeric"]], "polars.selectors": [[858, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[858, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[858, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[858, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[858, "polars.selectors.time"]], "abs() (polars.series method)": [[860, "polars.Series.abs"]], "alias() (polars.series method)": [[861, "polars.Series.alias"]], "all() (polars.series method)": [[862, "polars.Series.all"]], "any() (polars.series method)": [[863, "polars.Series.any"]], "append() (polars.series method)": [[864, "polars.Series.append"]], "apply() (polars.series method)": [[865, "polars.Series.apply"]], "arccos() (polars.series method)": [[866, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[867, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[868, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[869, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[870, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[871, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[872, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[873, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[874, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[875, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[876, "polars.Series.arg_unique"]], "max() (polars.series.arr method)": [[877, "polars.Series.arr.max"]], "min() (polars.series.arr method)": [[878, "polars.Series.arr.min"]], "sum() (polars.series.arr method)": [[879, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[880, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[881, "polars.Series.arr.unique"]], "contains() (polars.series.bin method)": [[882, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[883, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[884, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[885, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[886, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[887, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[888, "polars.Series.cast"]], "cat (polars.series attribute)": [[889, "polars.Series.cat"]], "get_categories() (polars.series.cat method)": [[890, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[891, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[892, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[893, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[894, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[895, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[896, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[897, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[898, "polars.Series.clear"]], "clip() (polars.series method)": [[899, "polars.Series.clip"]], "clip_max() (polars.series method)": [[900, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[901, "polars.Series.clip_min"]], "clone() (polars.series method)": [[902, "polars.Series.clone"]], "cos() (polars.series method)": [[903, "polars.Series.cos"]], "cosh() (polars.series method)": [[904, "polars.Series.cosh"]], "cot() (polars.series method)": [[905, "polars.Series.cot"]], "cum_max() (polars.series method)": [[906, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[907, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[908, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[909, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[910, "polars.Series.cummax"]], "cummin() (polars.series method)": [[911, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[912, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[913, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[914, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[915, "polars.Series.cut"]], "describe() (polars.series method)": [[916, "polars.Series.describe"]], "diff() (polars.series method)": [[917, "polars.Series.diff"]], "dot() (polars.series method)": [[918, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[919, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[920, "polars.Series.drop_nulls"]], "dt (polars.series attribute)": [[921, "polars.Series.dt"]], "base_utc_offset() (polars.series.dt method)": [[922, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[923, "polars.Series.dt.cast_time_unit"]], "combine() (polars.series.dt method)": [[924, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[925, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[926, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[927, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[928, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[929, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[930, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[931, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[932, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[933, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[934, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[935, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[936, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[937, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[938, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[939, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[940, "polars.Series.dt.microseconds"]], "millisecond() (polars.series.dt method)": [[941, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[942, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[943, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[944, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[945, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[946, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[947, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[948, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[949, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[950, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[951, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[952, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[953, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[954, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[955, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[956, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[957, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[958, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[959, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[960, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[961, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[962, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[963, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[964, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[965, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[966, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[967, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[968, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[969, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[970, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[971, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[972, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[973, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[974, "polars.Series.dtype"]], "entropy() (polars.series method)": [[975, "polars.Series.entropy"]], "equals() (polars.series method)": [[976, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[977, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[978, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[979, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[980, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[981, "polars.Series.exp"]], "explode() (polars.series method)": [[982, "polars.Series.explode"]], "extend() (polars.series method)": [[983, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[984, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[985, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[986, "polars.Series.fill_null"]], "filter() (polars.series method)": [[987, "polars.Series.filter"]], "flags (polars.series attribute)": [[988, "polars.Series.flags"]], "floor() (polars.series method)": [[989, "polars.Series.floor"]], "gather() (polars.series method)": [[990, "polars.Series.gather"]], "gather_every() (polars.series method)": [[991, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[992, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[993, "polars.Series.has_validity"]], "hash() (polars.series method)": [[994, "polars.Series.hash"]], "head() (polars.series method)": [[995, "polars.Series.head"]], "hist() (polars.series method)": [[996, "polars.Series.hist"]], "implode() (polars.series method)": [[997, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[998, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[999, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1000, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1001, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1002, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1003, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1004, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1005, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1006, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1007, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1008, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1009, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1010, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1011, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1012, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1013, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1014, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1015, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1016, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1017, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1018, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1019, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1020, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1021, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1022, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1023, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1024, "polars.Series.len"]], "limit() (polars.series method)": [[1025, "polars.Series.limit"]], "list (polars.series attribute)": [[1026, "polars.Series.list"]], "all() (polars.series.list method)": [[1027, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1028, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1029, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1030, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1031, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1032, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1033, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1034, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1035, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1036, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1037, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1038, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1039, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1040, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1041, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1042, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1043, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1044, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1045, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1046, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1047, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1048, "polars.Series.list.mean"]], "min() (polars.series.list method)": [[1049, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1050, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1051, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1052, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1053, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1054, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1055, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1056, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1057, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1058, "polars.Series.list.sort"]], "sum() (polars.series.list method)": [[1059, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1060, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1061, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1062, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1063, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1064, "polars.Series.list.unique"]], "log() (polars.series method)": [[1065, "polars.Series.log"]], "log10() (polars.series method)": [[1066, "polars.Series.log10"]], "log1p() (polars.series method)": [[1067, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1068, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1069, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1070, "polars.Series.map_elements"]], "max() (polars.series method)": [[1071, "polars.Series.max"]], "mean() (polars.series method)": [[1072, "polars.Series.mean"]], "median() (polars.series method)": [[1073, "polars.Series.median"]], "min() (polars.series method)": [[1074, "polars.Series.min"]], "mode() (polars.series method)": [[1075, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1076, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1077, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1078, "polars.Series.name"]], "nan_max() (polars.series method)": [[1079, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1080, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1081, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1082, "polars.Series.not_"]], "null_count() (polars.series method)": [[1083, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1084, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1085, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1086, "polars.Series.peak_min"]], "product() (polars.series method)": [[1087, "polars.Series.product"]], "qcut() (polars.series method)": [[1088, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1089, "polars.Series.quantile"]], "rank() (polars.series method)": [[1090, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1091, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1092, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1093, "polars.Series.rename"]], "replace() (polars.series method)": [[1094, "polars.Series.replace"]], "reshape() (polars.series method)": [[1095, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1096, "polars.Series.reverse"]], "rle() (polars.series method)": [[1097, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1098, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1099, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1100, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1101, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1102, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1103, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1104, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1105, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1106, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1107, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1108, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1109, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1110, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1111, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1112, "polars.Series.sample"]], "scatter() (polars.series method)": [[1113, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1114, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1115, "polars.Series.series_equal"]], "set() (polars.series method)": [[1116, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1117, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1118, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1119, "polars.Series.shape"]], "shift() (polars.series method)": [[1120, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1121, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1122, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1123, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1124, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1125, "polars.Series.sign"]], "sin() (polars.series method)": [[1126, "polars.Series.sin"]], "sinh() (polars.series method)": [[1127, "polars.Series.sinh"]], "skew() (polars.series method)": [[1128, "polars.Series.skew"]], "slice() (polars.series method)": [[1129, "polars.Series.slice"]], "sort() (polars.series method)": [[1130, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1131, "polars.Series.sqrt"]], "std() (polars.series method)": [[1132, "polars.Series.std"]], "str (polars.series attribute)": [[1133, "polars.Series.str"]], "concat() (polars.series.str method)": [[1134, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1135, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1136, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1137, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1138, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1139, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1140, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1141, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1142, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1143, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1144, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1145, "polars.Series.str.extract_groups"]], "json_decode() (polars.series.str method)": [[1146, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1147, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1148, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1149, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1150, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1151, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1152, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1153, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1154, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1155, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1156, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1157, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1158, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1159, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1160, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1161, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1162, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1163, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1164, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1165, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1166, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1167, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1168, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1169, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1170, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1171, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1172, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1173, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1174, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1175, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1176, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1177, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1178, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1179, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1180, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1181, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1182, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1183, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1184, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1185, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1186, "polars.Series.struct.fields"]], "json_encode (polars.series.struct attribute)": [[1187, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1188, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1189, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1190, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1191, "polars.Series.sum"]], "tail() (polars.series method)": [[1192, "polars.Series.tail"]], "take() (polars.series method)": [[1193, "polars.Series.take"]], "take_every() (polars.series method)": [[1194, "polars.Series.take_every"]], "tan() (polars.series method)": [[1195, "polars.Series.tan"]], "tanh() (polars.series method)": [[1196, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1197, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1198, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1199, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1200, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1201, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1202, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1203, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1204, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1205, "polars.Series.top_k"]], "unique() (polars.series method)": [[1206, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1207, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1208, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1209, "polars.Series.value_counts"]], "var() (polars.series method)": [[1210, "polars.Series.var"]], "view() (polars.series method)": [[1211, "polars.Series.view"]], "zip_with() (polars.series method)": [[1212, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1228, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1228, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1228, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1228, "polars.SQLContext.__init__"]]}})